{
    "name": "RoboDSL",
    "scopeName": "source.robodsl",
    "fileTypes": ["robodsl"],
    "patterns": [
        {
            "include": "#includes"
        },
        {
            "include": "#cuda-keywords"
        },
        {
            "include": "#cuda-kernel-declaration"
        },
        {
            "include": "#comments"
        },
        {
            "include": "#keywords"
        },
        {
            "include": "#qos-settings"
        },
        {
            "include": "#cuda-kernel"
        },
        {
            "include": "#strings"
        },
        {
            "include": "#numbers"
        },
        {
            "include": "#operators"
        }
    ],
    "repository": {
        "includes": {
            "patterns": [
                {
                    "name": "meta.preprocessor.include.robodsl",
                    "match": "^\\s*(#\\s*include)\\s*(<[^>]+>|\\\"[^\"]+\")",
                    "captures": {
                        "1": { "name": "keyword.control.import.include.robodsl" },
                        "2": { "name": "string.quoted.other.lt-gt.include.robodsl" }
                    }
                }
            ]
        },
        "comments": {
            "patterns": [
                {
                    "name": "comment.line.number-sign.robodsl",
                    "match": "#(?!include).*$"
                },
                {
                    "name": "comment.block.robodsl",
                    "begin": "/\\*",
                    "end": "\\*/"
                }
            ]
        },
        "keywords": {
            "patterns": [
                {
                    "name": "keyword.control.robodsl",
                    "match": "\\b(node|publisher|subscriber|service|action|parameter|include|import|from|as|true|false|null|if|else|for|while|return|break|continue|in|not|and|or|fn|let|const|var|type|interface|implements|extends|namespace|use|as|pub|priv|prot|static|final|abstract|override|virtual|new|this|super|class|struct|enum|switch|case|default|try|catch|throw|finally|async|await|yield|generator|function|lambda|match|when|is|as|typeof|instanceof|delete|void|any|never|unknown|object|string|number|boolean|symbol|bigint|undefined|null|true|false|this|super|new|typeof|void|delete|in|instanceof|as|is|keyof|readonly|infer|unique|symbol|type|interface|implements|extends|class|enum|const|declare|namespace|module|export|import|require|from|as|default|export=|import=|await|yield|async|function|let|var|const|if|else|switch|case|default|for|do|while|try|catch|finally|throw|break|continue|return|with|debugger|of|in|instanceof|new|delete|void|typeof|this|super|class|extends|static|public|private|protected|readonly|abstract|async|await|yield|get|set|constructor|implements|interface|package|type|enum|export|import|as|from|require|module|declare|namespace|any|boolean|number|string|symbol|void|never|unknown|object|undefined|null|true|false|this|super|new|typeof|void|delete|in|instanceof|as|is|keyof|readonly|infer|unique|symbol|type|interface|implements|extends|class|enum|const|declare|namespace|module|export|import|require|from|as|default|export=|import=|await|yield|async|function|let|var|const|if|else|switch|case|default|for|do|while|try|catch|finally|throw|break|continue|return|with|debugger|of|in|instanceof|new|delete|void|typeof|this|super|class|extends|static|public|private|protected|readonly|abstract|async|await|yield|get|set|constructor|implements|interface|package|type|enum|export|import|as|from|require|module|declare|namespace|any|boolean|number|string|symbol|void|never|unknown|object|undefined|null|true|false|kernel|input|output|block_size|grid_size|shared_mem_size|use_thrust|code)\\b"
                },
                {
                    "name": "keyword.operator.robodsl",
                    "match": "\\b(oneshot|autostart|cleanup_on_shutdown|use_thrust|shared_memory|block_size|grid_size)\\b"
                },
                {
                    "name": "constant.language.boolean.robodsl",
                    "match": "\\b(true|false|yes|no|on|off)\\b"
                }
            ]
        },
        "qos-settings": {
            "patterns": [
                {
                    "name": "support.type.qos.robodsl",
                    "match": "\\b(reliability|durability|history|depth|deadline|lifespan|liveliness|liveliness_lease_duration)\\b"
                },
                {
                    "name": "support.constant.qos.robodsl",
                    "match": "\\b(reliable|best_effort|transient_local|volatile|keep_last|keep_all|automatic|manual_by_topic)\\b"
                }
            ]
        },
        "cuda-kernel": {
            "name": "meta.cuda-kernel.robodsl",
            "begin": "code\\s*\\{",
            "end": "\\}",
            "beginCaptures": {
                "0": { "name": "punctuation.section.block.begin.robodsl" }
            },
            "endCaptures": {
                "0": { "name": "punctuation.section.block.end.robodsl" }
            },
            "contentName": "source.cuda",
            "patterns": [
                {
                    "include": "source.cuda"
                },
                {
                    "include": "source.c++"
                },
                {
                    "include": "source.cpp"
                },
                {
                    "include": "source.c"
                },
                {
                    "include": "#cuda-keywords"
                }
            ]
        },
        "strings": {
            "name": "string.quoted.double.robodsl",
            "begin": "\"",
            "end": "\"",
            "patterns": [
                {
                    "name": "constant.character.escape.robodsl",
                    "match": "\\\\(x\\h{2}|[0-2][0-7]{0,2}|3[0-6][0-7]|37[0-7]?|[4-7][0-7]?|t|n|v|f|r|\\\"|\\'|\\\\)"
                }
            ]
        },
        "numbers": {
            "name": "constant.numeric.robodsl",
            "match": "\\b((0(x|X)[0-9a-fA-F]*)|(\\d+(\\.\\d+)?(e[+\\-]?\\d+)?))\\b"
        },
        "operators": {
            "name": "keyword.operator.robodsl",
            "match": "[=:;{}\\[\\]()<>.,+\\-*/%&|^!~]"
        }
    }
}