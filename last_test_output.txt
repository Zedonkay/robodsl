============================= test session starts ==============================
platform darwin -- Python 3.13.2, pytest-8.4.1, pluggy-1.6.0 -- /Users/ishayu/Documents/Random_projects/cuif/.venv/bin/python3.13
cachedir: .pytest_cache
rootdir: /Users/ishayu/Documents/Random_projects/cuif
configfile: pytest.ini
testpaths: tests
plugins: cov-6.2.1
collecting ... collected 101 items

tests/test_add_node.py::test_add_node_basic PASSED                       [  0%]
tests/test_add_node.py::test_add_node_with_pubsub PASSED                 [  1%]
tests/test_add_node.py::test_add_node_to_existing_config PASSED          [  2%]
tests/test_add_node.py::test_add_node_invalid_project_dir PASSED         [  3%]
tests/test_cli.py::test_cli_help PASSED                                  [  4%]
tests/test_cli.py::test_cli_init PASSED                                  [  5%]
tests/test_cli.py::test_cli_init_existing_dir PASSED                     [  6%]
tests/test_comprehensive_features.py::TestComprehensiveNodeFeatures::test_complex_node_with_all_features FAILED [  7%]
tests/test_comprehensive_features.py::TestAdvancedCppMethodFeatures::test_complex_cpp_methods FAILED [  8%]
tests/test_comprehensive_features.py::TestAdvancedCudaKernelFeatures::test_complex_cuda_kernels FAILED [  9%]
tests/test_comprehensive_features.py::TestSemanticValidation::test_duplicate_parameter_names FAILED [ 10%]
tests/test_comprehensive_features.py::TestSemanticValidation::test_duplicate_timer_names FAILED [ 11%]
tests/test_comprehensive_features.py::TestSemanticValidation::test_duplicate_publisher_topics FAILED [ 12%]
tests/test_comprehensive_features.py::TestSemanticValidation::test_duplicate_subscriber_topics FAILED [ 13%]
tests/test_comprehensive_features.py::TestSemanticValidation::test_duplicate_service_names FAILED [ 14%]
tests/test_comprehensive_features.py::TestSemanticValidation::test_duplicate_action_names FAILED [ 15%]
tests/test_comprehensive_features.py::TestSemanticValidation::test_duplicate_client_names FAILED [ 16%]
tests/test_comprehensive_features.py::TestSemanticValidation::test_duplicate_flag_names FAILED [ 17%]
tests/test_comprehensive_features.py::TestSemanticValidation::test_duplicate_method_names FAILED [ 18%]
tests/test_comprehensive_features.py::TestSemanticValidation::test_duplicate_kernel_names FAILED [ 19%]
tests/test_comprehensive_features.py::TestSemanticValidation::test_invalid_qos_values FAILED [ 20%]
tests/test_comprehensive_features.py::TestSemanticValidation::test_invalid_timer_period FAILED [ 21%]
tests/test_comprehensive_features.py::TestSemanticValidation::test_invalid_block_size FAILED [ 22%]
tests/test_comprehensive_features.py::TestEdgeCases::test_empty_node FAILED [ 23%]
tests/test_comprehensive_features.py::TestEdgeCases::test_node_with_only_comments FAILED [ 24%]
tests/test_comprehensive_features.py::TestEdgeCases::test_very_large_values FAILED [ 25%]
tests/test_comprehensive_features.py::TestEdgeCases::test_unicode_strings FAILED [ 26%]
tests/test_comprehensive_features.py::TestEdgeCases::test_nested_arrays_and_dicts FAILED [ 27%]
tests/test_comprehensive_features.py::TestEdgeCases::test_method_with_no_parameters FAILED [ 28%]
tests/test_comprehensive_features.py::TestEdgeCases::test_kernel_with_no_parameters FAILED [ 29%]
tests/test_comprehensive_features.py::TestErrorRecovery::test_multiple_nodes_with_one_invalid FAILED [ 30%]
tests/test_comprehensive_features.py::TestErrorRecovery::test_invalid_syntax_in_comments FAILED [ 31%]
tests/test_comprehensive_features.py::TestPerformance::test_large_number_of_parameters FAILED [ 32%]
tests/test_comprehensive_features.py::TestPerformance::test_large_number_of_publishers FAILED [ 33%]
tests/test_comprehensive_features.py::TestPerformance::test_large_code_blocks FAILED [ 34%]
tests/test_cuda_generator.py::TestCudaGenerator::test_generate_cuda_kernel_files PASSED [ 35%]
tests/test_cuda_generator.py::TestCudaGenerator::test_generate_with_multiple_kernels PASSED [ 36%]
tests/test_cuda_generator.py::TestCudaGenerator::test_generator_without_kernels PASSED [ 37%]
tests/test_cuda_generator.py::TestCudaGenerator::test_kernel_content_validation PASSED [ 38%]
tests/test_cuda_generator.py::TestCudaGenerator::test_kernel_parameter_direction_enum PASSED [ 39%]
tests/test_generator.py::test_generator_basic PASSED                     [ 40%]
tests/test_generator.py::test_generator_with_ros2 PASSED                 [ 41%]
tests/test_generator.py::test_generator_without_ros2 PASSED              [ 42%]
tests/test_generator.py::test_node_generation PASSED                     [ 43%]
tests/test_generator.py::test_publisher_generation PASSED                [ 44%]
tests/test_generator.py::test_subscriber_generation PASSED               [ 45%]
tests/test_generator.py::test_service_generation PASSED                  [ 46%]
tests/test_generator.py::test_parameter_generation PASSED                [ 47%]
tests/test_lark_parser.py::test_basic_node_parsing FAILED                [ 48%]
tests/test_lark_parser.py::test_cuda_kernel_parsing FAILED               [ 49%]
tests/test_lark_parser.py::test_qos_configuration FAILED                 [ 50%]
tests/test_lark_parser.py::test_lifecycle_configuration FAILED           [ 51%]
tests/test_lark_parser.py::test_timer_configuration FAILED               [ 52%]
tests/test_lark_parser.py::test_include_statements FAILED                [ 53%]
tests/test_lark_parser.py::test_comments FAILED                          [ 54%]
tests/test_lark_parser.py::test_semantic_errors FAILED                   [ 55%]
tests/test_lark_parser.py::test_parse_errors FAILED                      [ 56%]
tests/test_lark_parser.py::test_complex_value_types FAILED               [ 57%]
tests/test_lark_parser.py::test_remapping FAILED                         [ 58%]
tests/test_lark_parser.py::test_namespace FAILED                         [ 59%]
tests/test_lark_parser.py::test_cpp_method_parsing FAILED                [ 60%]
tests/test_lark_parser.py::test_node_with_cuda_kernels FAILED            [ 61%]
tests/test_lark_parser.py::test_enhanced_cpp_method_parsing FAILED       [ 62%]
tests/test_lark_parser.py::test_enhanced_cpp_method_semantic_validation FAILED [ 63%]
tests/test_parser.py::test_parse_empty_config FAILED                     [ 64%]
tests/test_parser.py::test_parse_node_with_publisher FAILED              [ 65%]
tests/test_parser.py::test_parse_node_with_subscriber FAILED             [ 66%]
tests/test_parser.py::test_parse_node_with_service FAILED                [ 67%]
tests/test_parser.py::test_parse_node_with_parameters FAILED             [ 68%]
tests/test_parser.py::test_parse_node_with_qos FAILED                    [ 69%]
tests/test_parser.py::test_parse_cuda_kernels FAILED                     [ 70%]
tests/test_parser.py::test_parse_include FAILED                          [ 71%]
tests/test_parser.py::test_parse_complex_config FAILED                   [ 72%]
tests/test_parser.py::test_cross_reference_validation FAILED             [ 73%]
tests/test_qos_config.py::test_qos_config_parsing FAILED                 [ 74%]
tests/test_qos_config.py::test_qos_reliability_values FAILED             [ 75%]
tests/test_qos_config.py::test_qos_durability_values FAILED              [ 76%]
tests/test_qos_config.py::test_qos_history_values FAILED                 [ 77%]
tests/test_qos_config.py::test_qos_liveliness_values FAILED              [ 78%]
tests/test_qos_config.py::test_qos_multiple_settings FAILED              [ 79%]
tests/test_qos_config.py::test_qos_default_values FAILED                 [ 80%]
tests/test_qos_config.py::test_qos_invalid_values PASSED                 [ 81%]
tests/test_qos_config.py::test_qos_numeric_values FAILED                 [ 82%]
tests/test_subnodes.py::test_add_subnode_basic PASSED                    [ 83%]
tests/test_subnodes.py::test_add_nested_subnode PASSED                   [ 84%]
tests/test_subnodes.py::test_add_subnode_with_pubsub PASSED              [ 85%]
tests/test_subnodes.py::test_invalid_node_name PASSED                    [ 86%]
tests/test_validator.py::TestRoboDSLValidator::test_valid_content FAILED [ 87%]
tests/test_validator.py::TestRoboDSLValidator::test_parse_error FAILED   [ 88%]
tests/test_validator.py::TestRoboDSLValidator::test_semantic_error FAILED [ 89%]
tests/test_validator.py::TestRoboDSLValidator::test_style_validation FAILED [ 90%]
tests/test_validator.py::TestRoboDSLValidator::test_naming_conventions FAILED [ 91%]
tests/test_validator.py::TestRoboDSLValidator::test_best_practices FAILED [ 92%]
tests/test_validator.py::TestRoboDSLValidator::test_performance_validation FAILED [ 93%]
tests/test_validator.py::TestRoboDSLValidator::test_cuda_kernel_validation FAILED [ 94%]
tests/test_validator.py::TestRoboDSLLinter::test_format_string FAILED    [ 95%]
tests/test_validator.py::TestRoboDSLLinter::test_remove_trailing_whitespace FAILED [ 96%]
tests/test_validator.py::TestRoboDSLLinter::test_indentation_fixing FAILED [ 97%]
tests/test_validator.py::TestRoboDSLLinter::test_check_formatting FAILED [ 98%]
tests/test_validator.py::TestConvenienceFunctions::test_validate_robodsl_file FAILED [ 99%]
tests/test_validator.py::TestConvenienceFunctions::test_format_robodsl_file FAILED [100%]

=================================== FAILURES ===================================
______ TestComprehensiveNodeFeatures.test_complex_node_with_all_features _______

self = <test_comprehensive_features.TestComprehensiveNodeFeatures object at 0x10379c410>

    def test_complex_node_with_all_features(self):
        """Test a node with all possible features."""
        content = """
        include <ros/ros.h>
        include "custom_header.h"
    
        node complex_node {
            // Parameters with various types
            parameter int_rate: 30
            parameter float_tolerance: 0.001
            parameter string_frame_id: "base_link"
            parameter bool_debug: true
            parameter array_coords: [1.0, 2.0, 3.0]
            parameter dict_config: {
                max_velocity: 2.0
                min_distance: 0.5
                timeout: 5.0
            }
    
            // Lifecycle configuration
            lifecycle {
                autostart: true
                cleanup_on_shutdown: true
            }
    
            // Timers with settings
            timer main_timer: 0.1 {
                oneshot: false
                autostart: true
            }
            timer debug_timer: 1.0 {
                oneshot: true
                autostart: false
            }
    
            // ROS primitives with QoS
            publisher /cmd_vel : "geometry_msgs/Twist" {
                qos {
                    reliability: reliable
                    durability: transient_local
                    history: keep_last
                    depth: 10
                }
            }
    
            subscriber /scan : "sensor_msgs/LaserScan" {
                qos {
                    reliability: best_effort
                    durability: volatile
                    history: keep_last
                    depth: 5
                }
            }
    
            service /set_goal : "nav_msgs/SetGoal" {
                qos {
                    reliability: reliable
                    durability: volatile
                }
            }
    
            client /get_map : "nav_msgs/GetMap" {
                qos {
                    reliability: reliable
                    durability: volatile
                }
            }
    
            action /navigate : "nav2_msgs/NavigateToPose" {
                qos {
                    reliability: reliable
                    durability: transient_local
                }
            }
    
            // Remapping
            remap from: /cmd_vel to: /robot/cmd_vel
            remap /scan: /robot/scan
            remap from: /odom to: /robot/odom
    
            // Namespace
            namespace: /robot
    
            // Flags
            flag enable_debug: true
            flag use_sim_time: false
            flag enable_logging: true
    
            // C++ methods
            method process_data {
                input: int data_size
                input: float* input_data (data_size)
                output: float* result (data_size)
                code: "
                    for (int i = 0; i < data_size; i++) {
                        result[i] = input_data[i] * 2.0f;
                    }
                "
            }
    
            method validate_input {
                input: std::string input_string
                output: bool is_valid
                code: "
                    is_valid = !input_string.empty() && input_string.length() > 0;
                "
            }
    
            // CUDA kernels
            kernel vector_add {
                param in float* a (N)
                param in float* b (N)
                param out float* c (N)
                param in int N
                block_size: (256, 1, 1)
                grid_size: ((N + 255) / 256, 1, 1)
                shared_memory: 0
                use_thrust: false
                code: "
                    __global__ void vector_add(const float* a, const float* b, float* c, int n) {
                        int i = blockIdx.x * blockDim.x + threadIdx.x;
                        if (i < n) {
                            c[i] = a[i] + b[i];
                        }
                    }
                "
            }
    
            kernel matrix_multiply {
                param in float* A (M, N)
                param in float* B (N, K)
                param out float* C (M, K)
                param in int M
                param in int N
                param in int K
                block_size: (16, 16, 1)
                grid_size: ((M + 15) / 16, (K + 15) / 16, 1)
                shared_memory: 1024
                use_thrust: true
                code: "
                    __global__ void matrix_multiply(const float* A, const float* B, float* C, int M, int N, int K) {
                        __shared__ float sA[16][16];
                        __shared__ float sB[16][16];
    
                        int row = blockIdx.y * blockDim.y + threadIdx.y;
                        int col = blockIdx.x * blockDim.x + threadIdx.x;
    
                        float sum = 0.0f;
                        for (int k = 0; k < N; k += 16) {
                            if (row < M && k + threadIdx.x < N) {
                                sA[threadIdx.y][threadIdx.x] = A[row * N + k + threadIdx.x];
                            } else {
                                sA[threadIdx.y][threadIdx.x] = 0.0f;
                            }
    
                            if (k + threadIdx.y < N && col < K) {
                                sB[threadIdx.y][threadIdx.x] = B[(k + threadIdx.y) * K + col];
                            } else {
                                sB[threadIdx.y][threadIdx.x] = 0.0f;
                            }
    
                            __syncthreads();
    
                            for (int i = 0; i < 16; i++) {
                                sum += sA[threadIdx.y][i] * sB[i][threadIdx.x];
                            }
    
                            __syncthreads();
                        }
    
                        if (row < M && col < K) {
                            C[row * K + col] = sum;
                        }
                    }
                "
            }
        }
        """
    
>       ast = parse_robodsl(content)
              ^^^^^^^^^^^^^^^^^^^^^^

tests/test_comprehensive_features.py:196: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/robodsl/parser/lark_parser.py:115: in parse_robodsl
    _parser = RoboDSLParser()
              ^^^^^^^^^^^^^^^
src/robodsl/parser/lark_parser.py:27: in __init__
    self.parser = Lark(grammar_content, parser='lalr', start='start')
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:439: in __init__
    self.parser = self._build_parser()
                  ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:485: in _build_parser
    return _construct_parsing_frontend(
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:257: in _construct_parsing_frontend
    return ParsingFrontend(lexer_conf, parser_conf, options)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:61: in __init__
    self.parser = create_parser(lexer_conf, parser_conf, options)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:161: in create_lalr_parser
    return cls(parser_conf, debug=debug, strict=strict)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parsers/lalr_parser.py:20: in __init__
    analysis.compute_lalr()
.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:332: in compute_lalr
    self.compute_lalr1_states()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <lark.parsers.lalr_analysis.LALR_Analyzer object at 0x105440410>

    def compute_lalr1_states(self) -> None:
        m: Dict[LR0ItemSet, Dict[str, Tuple]] = {}
        reduce_reduce = []
        for itemset in self.lr0_itemsets:
            actions: Dict[Symbol, Tuple] = {la: (Shift, next_state.closure)
                                                      for la, next_state in itemset.transitions.items()}
            for la, rules in itemset.lookaheads.items():
                if len(rules) > 1:
                    # Try to resolve conflict based on priority
                    p = [(r.options.priority or 0, r) for r in rules]
                    p.sort(key=lambda r: r[0], reverse=True)
                    best, second_best = p[:2]
                    if best[0] > second_best[0]:
                        rules = {best[1]}
                    else:
                        reduce_reduce.append((itemset, la, rules))
                        continue
    
                rule ,= rules
                if la in actions:
                    if self.strict:
                        raise GrammarError(f"Shift/Reduce conflict for terminal {la.name}. [strict-mode]\n ")
                    elif self.debug:
                        logger.warning('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.warning(' * %s', rule)
                    else:
                        logger.debug('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.debug(' * %s', rule)
                else:
                    actions[la] = (Reduce, rule)
            m[itemset] = { k.name: v for k, v in actions.items() }
    
        if reduce_reduce:
            msgs = []
            for itemset, la, rules in reduce_reduce:
                msg = 'Reduce/Reduce collision in %s between the following rules: %s' % (la, ''.join([ '\n\t- ' + str(r) for r in rules ]))
                if self.debug:
                    msg += '\n    collision occurred in state: {%s\n    }' % ''.join(['\n\t' + str(x) for x in itemset.closure])
                msgs.append(msg)
>           raise GrammarError('\n\n'.join(msgs))
E           lark.exceptions.GrammarError: Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('NAME') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RBRACE') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>

.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:306: GrammarError
____________ TestAdvancedCppMethodFeatures.test_complex_cpp_methods ____________

self = <test_comprehensive_features.TestAdvancedCppMethodFeatures object at 0x10379c550>

    def test_complex_cpp_methods(self):
        """Test complex C++ methods with various parameter types."""
        content = """
        node test_node {
            method complex_processing {
                input: int data_size
                input: float* input_data (data_size)
                input: std::vector<float> weights (weights.size())
                input: std::string config_file
                input: bool enable_optimization
                output: float* result (data_size)
                output: std::vector<int> indices (data_size)
                output: bool success
                code: "
                    try {
                        success = true;
                        for (int i = 0; i < data_size; i++) {
                            float sum = 0.0f;
                            for (size_t j = 0; j < weights.size(); j++) {
                                sum += input_data[i] * weights[j];
                            }
                            result[i] = sum;
                            indices[i] = i;
                        }
                    } catch (const std::exception& e) {
                        success = false;
                    }
                "
            }
    
            method template_method {
                input: std::vector<int> input_vector (input_vector.size())
                output: std::vector<float> output_vector (input_vector.size())
                code: "
                    output_vector.resize(input_vector.size());
                    for (size_t i = 0; i < input_vector.size(); i++) {
                        output_vector[i] = static_cast<float>(input_vector[i]) * 1.5f;
                    }
                "
            }
        }
        """
    
>       ast = parse_robodsl(content)
              ^^^^^^^^^^^^^^^^^^^^^^

tests/test_comprehensive_features.py:309: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/robodsl/parser/lark_parser.py:115: in parse_robodsl
    _parser = RoboDSLParser()
              ^^^^^^^^^^^^^^^
src/robodsl/parser/lark_parser.py:27: in __init__
    self.parser = Lark(grammar_content, parser='lalr', start='start')
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:439: in __init__
    self.parser = self._build_parser()
                  ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:485: in _build_parser
    return _construct_parsing_frontend(
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:257: in _construct_parsing_frontend
    return ParsingFrontend(lexer_conf, parser_conf, options)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:61: in __init__
    self.parser = create_parser(lexer_conf, parser_conf, options)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:161: in create_lalr_parser
    return cls(parser_conf, debug=debug, strict=strict)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parsers/lalr_parser.py:20: in __init__
    analysis.compute_lalr()
.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:332: in compute_lalr
    self.compute_lalr1_states()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <lark.parsers.lalr_analysis.LALR_Analyzer object at 0x105441090>

    def compute_lalr1_states(self) -> None:
        m: Dict[LR0ItemSet, Dict[str, Tuple]] = {}
        reduce_reduce = []
        for itemset in self.lr0_itemsets:
            actions: Dict[Symbol, Tuple] = {la: (Shift, next_state.closure)
                                                      for la, next_state in itemset.transitions.items()}
            for la, rules in itemset.lookaheads.items():
                if len(rules) > 1:
                    # Try to resolve conflict based on priority
                    p = [(r.options.priority or 0, r) for r in rules]
                    p.sort(key=lambda r: r[0], reverse=True)
                    best, second_best = p[:2]
                    if best[0] > second_best[0]:
                        rules = {best[1]}
                    else:
                        reduce_reduce.append((itemset, la, rules))
                        continue
    
                rule ,= rules
                if la in actions:
                    if self.strict:
                        raise GrammarError(f"Shift/Reduce conflict for terminal {la.name}. [strict-mode]\n ")
                    elif self.debug:
                        logger.warning('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.warning(' * %s', rule)
                    else:
                        logger.debug('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.debug(' * %s', rule)
                else:
                    actions[la] = (Reduce, rule)
            m[itemset] = { k.name: v for k, v in actions.items() }
    
        if reduce_reduce:
            msgs = []
            for itemset, la, rules in reduce_reduce:
                msg = 'Reduce/Reduce collision in %s between the following rules: %s' % (la, ''.join([ '\n\t- ' + str(r) for r in rules ]))
                if self.debug:
                    msg += '\n    collision occurred in state: {%s\n    }' % ''.join(['\n\t' + str(x) for x in itemset.closure])
                msgs.append(msg)
>           raise GrammarError('\n\n'.join(msgs))
E           lark.exceptions.GrammarError: Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('NAME') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RBRACE') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>

.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:306: GrammarError
___________ TestAdvancedCudaKernelFeatures.test_complex_cuda_kernels ___________

self = <test_comprehensive_features.TestAdvancedCudaKernelFeatures object at 0x10379c690>

    def test_complex_cuda_kernels(self):
        """Test complex CUDA kernels with various configurations."""
        content = """
        cuda_kernels {
            kernel convolution_2d {
                param in float* input_image (width, height, channels)
                param in float* kernel (kernel_size, kernel_size)
                param out float* output_image (width, height, channels)
                param in int width
                param in int height
                param in int channels
                param in int kernel_size
                block_size: (32, 32, 1)
                grid_size: ((width + 31) / 32, (height + 31) / 32, 1)
                shared_memory: 4096
                use_thrust: false
                code: "
                    __global__ void convolution_2d(const float* input, const float* kernel, float* output,
                                                 int width, int height, int channels, int kernel_size) {
                        __shared__ float shared_input[34][34];  // 32 + 2 for padding
                        __shared__ float shared_kernel[5][5];   // Max kernel size
    
                        int x = blockIdx.x * blockDim.x + threadIdx.x;
                        int y = blockIdx.y * blockDim.y + threadIdx.y;
    
                        if (x < width && y < height) {
                            // Load input data to shared memory
                            for (int ky = 0; ky < kernel_size; ky++) {
                                for (int kx = 0; kx < kernel_size; kx++) {
                                    int sx = threadIdx.x + kx;
                                    int sy = threadIdx.y + ky;
                                    if (sx < 34 && sy < 34) {
                                        int ix = x + kx - kernel_size/2;
                                        int iy = y + ky - kernel_size/2;
                                        if (ix >= 0 && ix < width && iy >= 0 && iy < height) {
                                            shared_input[sy][sx] = input[iy * width + ix];
                                        } else {
                                            shared_input[sy][sx] = 0.0f;
                                        }
                                    }
                                }
                            }
    
                            // Load kernel to shared memory
                            if (threadIdx.x < kernel_size && threadIdx.y < kernel_size) {
                                shared_kernel[threadIdx.y][threadIdx.x] = kernel[threadIdx.y * kernel_size + threadIdx.x];
                            }
    
                            __syncthreads();
    
                            // Compute convolution
                            float sum = 0.0f;
                            for (int ky = 0; ky < kernel_size; ky++) {
                                for (int kx = 0; kx < kernel_size; kx++) {
                                    sum += shared_input[threadIdx.y + ky][threadIdx.x + kx] *
                                           shared_kernel[ky][kx];
                                }
                            }
    
                            output[y * width + x] = sum;
                        }
                    }
                "
            }
    
            kernel reduce_sum {
                param in float* input_data (N)
                param out float* result (1)
                param in int N
                block_size: (256, 1, 1)
                grid_size: (1, 1, 1)
                shared_memory: 1024
                use_thrust: true
                code: "
                    __global__ void reduce_sum(const float* input, float* result, int n) {
                        __shared__ float shared_data[256];
    
                        int tid = threadIdx.x;
                        int i = blockIdx.x * blockDim.x + threadIdx.x;
    
                        shared_data[tid] = (i < n) ? input[i] : 0.0f;
                        __syncthreads();
    
                        for (int stride = blockDim.x/2; stride > 0; stride >>= 1) {
                            if (tid < stride) {
                                shared_data[tid] += shared_data[tid + stride];
                            }
                            __syncthreads();
                        }
    
                        if (tid == 0) {
                            atomicAdd(result, shared_data[0]);
                        }
                    }
                "
            }
        }
        """
    
>       ast = parse_robodsl(content)
              ^^^^^^^^^^^^^^^^^^^^^^

tests/test_comprehensive_features.py:442: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/robodsl/parser/lark_parser.py:115: in parse_robodsl
    _parser = RoboDSLParser()
              ^^^^^^^^^^^^^^^
src/robodsl/parser/lark_parser.py:27: in __init__
    self.parser = Lark(grammar_content, parser='lalr', start='start')
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:439: in __init__
    self.parser = self._build_parser()
                  ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:485: in _build_parser
    return _construct_parsing_frontend(
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:257: in _construct_parsing_frontend
    return ParsingFrontend(lexer_conf, parser_conf, options)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:61: in __init__
    self.parser = create_parser(lexer_conf, parser_conf, options)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:161: in create_lalr_parser
    return cls(parser_conf, debug=debug, strict=strict)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parsers/lalr_parser.py:20: in __init__
    analysis.compute_lalr()
.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:332: in compute_lalr
    self.compute_lalr1_states()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <lark.parsers.lalr_analysis.LALR_Analyzer object at 0x10534cb00>

    def compute_lalr1_states(self) -> None:
        m: Dict[LR0ItemSet, Dict[str, Tuple]] = {}
        reduce_reduce = []
        for itemset in self.lr0_itemsets:
            actions: Dict[Symbol, Tuple] = {la: (Shift, next_state.closure)
                                                      for la, next_state in itemset.transitions.items()}
            for la, rules in itemset.lookaheads.items():
                if len(rules) > 1:
                    # Try to resolve conflict based on priority
                    p = [(r.options.priority or 0, r) for r in rules]
                    p.sort(key=lambda r: r[0], reverse=True)
                    best, second_best = p[:2]
                    if best[0] > second_best[0]:
                        rules = {best[1]}
                    else:
                        reduce_reduce.append((itemset, la, rules))
                        continue
    
                rule ,= rules
                if la in actions:
                    if self.strict:
                        raise GrammarError(f"Shift/Reduce conflict for terminal {la.name}. [strict-mode]\n ")
                    elif self.debug:
                        logger.warning('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.warning(' * %s', rule)
                    else:
                        logger.debug('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.debug(' * %s', rule)
                else:
                    actions[la] = (Reduce, rule)
            m[itemset] = { k.name: v for k, v in actions.items() }
    
        if reduce_reduce:
            msgs = []
            for itemset, la, rules in reduce_reduce:
                msg = 'Reduce/Reduce collision in %s between the following rules: %s' % (la, ''.join([ '\n\t- ' + str(r) for r in rules ]))
                if self.debug:
                    msg += '\n    collision occurred in state: {%s\n    }' % ''.join(['\n\t' + str(x) for x in itemset.closure])
                msgs.append(msg)
>           raise GrammarError('\n\n'.join(msgs))
E           lark.exceptions.GrammarError: Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('NAME') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RBRACE') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>

.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:306: GrammarError
____________ TestSemanticValidation.test_duplicate_parameter_names _____________

self = <test_comprehensive_features.TestSemanticValidation object at 0x10379c7d0>

    def test_duplicate_parameter_names(self):
        """Test detection of duplicate parameter names."""
        content = """
        node test_node {
            parameter test_param: 42
            parameter test_param: 43  // Duplicate name
        }
        """
    
        with pytest.raises(SemanticError) as exc_info:
>           parse_robodsl(content)

tests/test_comprehensive_features.py:476: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/robodsl/parser/lark_parser.py:115: in parse_robodsl
    _parser = RoboDSLParser()
              ^^^^^^^^^^^^^^^
src/robodsl/parser/lark_parser.py:27: in __init__
    self.parser = Lark(grammar_content, parser='lalr', start='start')
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:439: in __init__
    self.parser = self._build_parser()
                  ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:485: in _build_parser
    return _construct_parsing_frontend(
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:257: in _construct_parsing_frontend
    return ParsingFrontend(lexer_conf, parser_conf, options)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:61: in __init__
    self.parser = create_parser(lexer_conf, parser_conf, options)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:161: in create_lalr_parser
    return cls(parser_conf, debug=debug, strict=strict)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parsers/lalr_parser.py:20: in __init__
    analysis.compute_lalr()
.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:332: in compute_lalr
    self.compute_lalr1_states()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <lark.parsers.lalr_analysis.LALR_Analyzer object at 0x10534d810>

    def compute_lalr1_states(self) -> None:
        m: Dict[LR0ItemSet, Dict[str, Tuple]] = {}
        reduce_reduce = []
        for itemset in self.lr0_itemsets:
            actions: Dict[Symbol, Tuple] = {la: (Shift, next_state.closure)
                                                      for la, next_state in itemset.transitions.items()}
            for la, rules in itemset.lookaheads.items():
                if len(rules) > 1:
                    # Try to resolve conflict based on priority
                    p = [(r.options.priority or 0, r) for r in rules]
                    p.sort(key=lambda r: r[0], reverse=True)
                    best, second_best = p[:2]
                    if best[0] > second_best[0]:
                        rules = {best[1]}
                    else:
                        reduce_reduce.append((itemset, la, rules))
                        continue
    
                rule ,= rules
                if la in actions:
                    if self.strict:
                        raise GrammarError(f"Shift/Reduce conflict for terminal {la.name}. [strict-mode]\n ")
                    elif self.debug:
                        logger.warning('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.warning(' * %s', rule)
                    else:
                        logger.debug('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.debug(' * %s', rule)
                else:
                    actions[la] = (Reduce, rule)
            m[itemset] = { k.name: v for k, v in actions.items() }
    
        if reduce_reduce:
            msgs = []
            for itemset, la, rules in reduce_reduce:
                msg = 'Reduce/Reduce collision in %s between the following rules: %s' % (la, ''.join([ '\n\t- ' + str(r) for r in rules ]))
                if self.debug:
                    msg += '\n    collision occurred in state: {%s\n    }' % ''.join(['\n\t' + str(x) for x in itemset.closure])
                msgs.append(msg)
>           raise GrammarError('\n\n'.join(msgs))
E           lark.exceptions.GrammarError: Reduce/Reduce collision in Terminal('NAME') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RBRACE') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>

.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:306: GrammarError
______________ TestSemanticValidation.test_duplicate_timer_names _______________

self = <test_comprehensive_features.TestSemanticValidation object at 0x10379c910>

    def test_duplicate_timer_names(self):
        """Test detection of duplicate timer names."""
        content = """
        node test_node {
            timer my_timer: 1.0
            timer my_timer: 2.0  // Duplicate name
        }
        """
    
        with pytest.raises(SemanticError) as exc_info:
>           parse_robodsl(content)

tests/test_comprehensive_features.py:490: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/robodsl/parser/lark_parser.py:115: in parse_robodsl
    _parser = RoboDSLParser()
              ^^^^^^^^^^^^^^^
src/robodsl/parser/lark_parser.py:27: in __init__
    self.parser = Lark(grammar_content, parser='lalr', start='start')
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:439: in __init__
    self.parser = self._build_parser()
                  ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:485: in _build_parser
    return _construct_parsing_frontend(
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:257: in _construct_parsing_frontend
    return ParsingFrontend(lexer_conf, parser_conf, options)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:61: in __init__
    self.parser = create_parser(lexer_conf, parser_conf, options)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:161: in create_lalr_parser
    return cls(parser_conf, debug=debug, strict=strict)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parsers/lalr_parser.py:20: in __init__
    analysis.compute_lalr()
.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:332: in compute_lalr
    self.compute_lalr1_states()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <lark.parsers.lalr_analysis.LALR_Analyzer object at 0x105bbe0f0>

    def compute_lalr1_states(self) -> None:
        m: Dict[LR0ItemSet, Dict[str, Tuple]] = {}
        reduce_reduce = []
        for itemset in self.lr0_itemsets:
            actions: Dict[Symbol, Tuple] = {la: (Shift, next_state.closure)
                                                      for la, next_state in itemset.transitions.items()}
            for la, rules in itemset.lookaheads.items():
                if len(rules) > 1:
                    # Try to resolve conflict based on priority
                    p = [(r.options.priority or 0, r) for r in rules]
                    p.sort(key=lambda r: r[0], reverse=True)
                    best, second_best = p[:2]
                    if best[0] > second_best[0]:
                        rules = {best[1]}
                    else:
                        reduce_reduce.append((itemset, la, rules))
                        continue
    
                rule ,= rules
                if la in actions:
                    if self.strict:
                        raise GrammarError(f"Shift/Reduce conflict for terminal {la.name}. [strict-mode]\n ")
                    elif self.debug:
                        logger.warning('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.warning(' * %s', rule)
                    else:
                        logger.debug('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.debug(' * %s', rule)
                else:
                    actions[la] = (Reduce, rule)
            m[itemset] = { k.name: v for k, v in actions.items() }
    
        if reduce_reduce:
            msgs = []
            for itemset, la, rules in reduce_reduce:
                msg = 'Reduce/Reduce collision in %s between the following rules: %s' % (la, ''.join([ '\n\t- ' + str(r) for r in rules ]))
                if self.debug:
                    msg += '\n    collision occurred in state: {%s\n    }' % ''.join(['\n\t' + str(x) for x in itemset.closure])
                msgs.append(msg)
>           raise GrammarError('\n\n'.join(msgs))
E           lark.exceptions.GrammarError: Reduce/Reduce collision in Terminal('NAME') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RBRACE') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>

.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:306: GrammarError
____________ TestSemanticValidation.test_duplicate_publisher_topics ____________

self = <test_comprehensive_features.TestSemanticValidation object at 0x1034afce0>

    def test_duplicate_publisher_topics(self):
        """Test detection of duplicate publisher topics."""
        content = """
        node test_node {
            publisher /test_topic : "std_msgs/String"
            publisher /test_topic : "std_msgs/Int32"  // Duplicate topic
        }
        """
    
        with pytest.raises(SemanticError) as exc_info:
>           parse_robodsl(content)

tests/test_comprehensive_features.py:504: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/robodsl/parser/lark_parser.py:115: in parse_robodsl
    _parser = RoboDSLParser()
              ^^^^^^^^^^^^^^^
src/robodsl/parser/lark_parser.py:27: in __init__
    self.parser = Lark(grammar_content, parser='lalr', start='start')
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:439: in __init__
    self.parser = self._build_parser()
                  ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:485: in _build_parser
    return _construct_parsing_frontend(
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:257: in _construct_parsing_frontend
    return ParsingFrontend(lexer_conf, parser_conf, options)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:61: in __init__
    self.parser = create_parser(lexer_conf, parser_conf, options)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:161: in create_lalr_parser
    return cls(parser_conf, debug=debug, strict=strict)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parsers/lalr_parser.py:20: in __init__
    analysis.compute_lalr()
.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:332: in compute_lalr
    self.compute_lalr1_states()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <lark.parsers.lalr_analysis.LALR_Analyzer object at 0x105341ae0>

    def compute_lalr1_states(self) -> None:
        m: Dict[LR0ItemSet, Dict[str, Tuple]] = {}
        reduce_reduce = []
        for itemset in self.lr0_itemsets:
            actions: Dict[Symbol, Tuple] = {la: (Shift, next_state.closure)
                                                      for la, next_state in itemset.transitions.items()}
            for la, rules in itemset.lookaheads.items():
                if len(rules) > 1:
                    # Try to resolve conflict based on priority
                    p = [(r.options.priority or 0, r) for r in rules]
                    p.sort(key=lambda r: r[0], reverse=True)
                    best, second_best = p[:2]
                    if best[0] > second_best[0]:
                        rules = {best[1]}
                    else:
                        reduce_reduce.append((itemset, la, rules))
                        continue
    
                rule ,= rules
                if la in actions:
                    if self.strict:
                        raise GrammarError(f"Shift/Reduce conflict for terminal {la.name}. [strict-mode]\n ")
                    elif self.debug:
                        logger.warning('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.warning(' * %s', rule)
                    else:
                        logger.debug('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.debug(' * %s', rule)
                else:
                    actions[la] = (Reduce, rule)
            m[itemset] = { k.name: v for k, v in actions.items() }
    
        if reduce_reduce:
            msgs = []
            for itemset, la, rules in reduce_reduce:
                msg = 'Reduce/Reduce collision in %s between the following rules: %s' % (la, ''.join([ '\n\t- ' + str(r) for r in rules ]))
                if self.debug:
                    msg += '\n    collision occurred in state: {%s\n    }' % ''.join(['\n\t' + str(x) for x in itemset.closure])
                msgs.append(msg)
>           raise GrammarError('\n\n'.join(msgs))
E           lark.exceptions.GrammarError: Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('NAME') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RBRACE') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>

.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:306: GrammarError
___________ TestSemanticValidation.test_duplicate_subscriber_topics ____________

self = <test_comprehensive_features.TestSemanticValidation object at 0x1034afe10>

    def test_duplicate_subscriber_topics(self):
        """Test detection of duplicate subscriber topics."""
        content = """
        node test_node {
            subscriber /test_topic : "std_msgs/String"
            subscriber /test_topic : "std_msgs/Int32"  // Duplicate topic
        }
        """
    
        with pytest.raises(SemanticError) as exc_info:
>           parse_robodsl(content)

tests/test_comprehensive_features.py:518: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/robodsl/parser/lark_parser.py:115: in parse_robodsl
    _parser = RoboDSLParser()
              ^^^^^^^^^^^^^^^
src/robodsl/parser/lark_parser.py:27: in __init__
    self.parser = Lark(grammar_content, parser='lalr', start='start')
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:439: in __init__
    self.parser = self._build_parser()
                  ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:485: in _build_parser
    return _construct_parsing_frontend(
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:257: in _construct_parsing_frontend
    return ParsingFrontend(lexer_conf, parser_conf, options)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:61: in __init__
    self.parser = create_parser(lexer_conf, parser_conf, options)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:161: in create_lalr_parser
    return cls(parser_conf, debug=debug, strict=strict)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parsers/lalr_parser.py:20: in __init__
    analysis.compute_lalr()
.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:332: in compute_lalr
    self.compute_lalr1_states()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <lark.parsers.lalr_analysis.LALR_Analyzer object at 0x105341e10>

    def compute_lalr1_states(self) -> None:
        m: Dict[LR0ItemSet, Dict[str, Tuple]] = {}
        reduce_reduce = []
        for itemset in self.lr0_itemsets:
            actions: Dict[Symbol, Tuple] = {la: (Shift, next_state.closure)
                                                      for la, next_state in itemset.transitions.items()}
            for la, rules in itemset.lookaheads.items():
                if len(rules) > 1:
                    # Try to resolve conflict based on priority
                    p = [(r.options.priority or 0, r) for r in rules]
                    p.sort(key=lambda r: r[0], reverse=True)
                    best, second_best = p[:2]
                    if best[0] > second_best[0]:
                        rules = {best[1]}
                    else:
                        reduce_reduce.append((itemset, la, rules))
                        continue
    
                rule ,= rules
                if la in actions:
                    if self.strict:
                        raise GrammarError(f"Shift/Reduce conflict for terminal {la.name}. [strict-mode]\n ")
                    elif self.debug:
                        logger.warning('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.warning(' * %s', rule)
                    else:
                        logger.debug('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.debug(' * %s', rule)
                else:
                    actions[la] = (Reduce, rule)
            m[itemset] = { k.name: v for k, v in actions.items() }
    
        if reduce_reduce:
            msgs = []
            for itemset, la, rules in reduce_reduce:
                msg = 'Reduce/Reduce collision in %s between the following rules: %s' % (la, ''.join([ '\n\t- ' + str(r) for r in rules ]))
                if self.debug:
                    msg += '\n    collision occurred in state: {%s\n    }' % ''.join(['\n\t' + str(x) for x in itemset.closure])
                msgs.append(msg)
>           raise GrammarError('\n\n'.join(msgs))
E           lark.exceptions.GrammarError: Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('NAME') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RBRACE') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>

.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:306: GrammarError
_____________ TestSemanticValidation.test_duplicate_service_names ______________

self = <test_comprehensive_features.TestSemanticValidation object at 0x10375dc70>

    def test_duplicate_service_names(self):
        """Test detection of duplicate service names."""
        content = """
        node test_node {
            service /test_service : "std_srvs/Empty"
            service /test_service : "std_srvs/Trigger"  // Duplicate service
        }
        """
    
        with pytest.raises(SemanticError) as exc_info:
>           parse_robodsl(content)

tests/test_comprehensive_features.py:532: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/robodsl/parser/lark_parser.py:115: in parse_robodsl
    _parser = RoboDSLParser()
              ^^^^^^^^^^^^^^^
src/robodsl/parser/lark_parser.py:27: in __init__
    self.parser = Lark(grammar_content, parser='lalr', start='start')
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:439: in __init__
    self.parser = self._build_parser()
                  ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:485: in _build_parser
    return _construct_parsing_frontend(
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:257: in _construct_parsing_frontend
    return ParsingFrontend(lexer_conf, parser_conf, options)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:61: in __init__
    self.parser = create_parser(lexer_conf, parser_conf, options)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:161: in create_lalr_parser
    return cls(parser_conf, debug=debug, strict=strict)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parsers/lalr_parser.py:20: in __init__
    analysis.compute_lalr()
.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:332: in compute_lalr
    self.compute_lalr1_states()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <lark.parsers.lalr_analysis.LALR_Analyzer object at 0x10551b450>

    def compute_lalr1_states(self) -> None:
        m: Dict[LR0ItemSet, Dict[str, Tuple]] = {}
        reduce_reduce = []
        for itemset in self.lr0_itemsets:
            actions: Dict[Symbol, Tuple] = {la: (Shift, next_state.closure)
                                                      for la, next_state in itemset.transitions.items()}
            for la, rules in itemset.lookaheads.items():
                if len(rules) > 1:
                    # Try to resolve conflict based on priority
                    p = [(r.options.priority or 0, r) for r in rules]
                    p.sort(key=lambda r: r[0], reverse=True)
                    best, second_best = p[:2]
                    if best[0] > second_best[0]:
                        rules = {best[1]}
                    else:
                        reduce_reduce.append((itemset, la, rules))
                        continue
    
                rule ,= rules
                if la in actions:
                    if self.strict:
                        raise GrammarError(f"Shift/Reduce conflict for terminal {la.name}. [strict-mode]\n ")
                    elif self.debug:
                        logger.warning('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.warning(' * %s', rule)
                    else:
                        logger.debug('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.debug(' * %s', rule)
                else:
                    actions[la] = (Reduce, rule)
            m[itemset] = { k.name: v for k, v in actions.items() }
    
        if reduce_reduce:
            msgs = []
            for itemset, la, rules in reduce_reduce:
                msg = 'Reduce/Reduce collision in %s between the following rules: %s' % (la, ''.join([ '\n\t- ' + str(r) for r in rules ]))
                if self.debug:
                    msg += '\n    collision occurred in state: {%s\n    }' % ''.join(['\n\t' + str(x) for x in itemset.closure])
                msgs.append(msg)
>           raise GrammarError('\n\n'.join(msgs))
E           lark.exceptions.GrammarError: Reduce/Reduce collision in Terminal('NAME') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RBRACE') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>

.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:306: GrammarError
______________ TestSemanticValidation.test_duplicate_action_names ______________

self = <test_comprehensive_features.TestSemanticValidation object at 0x1035bef10>

    def test_duplicate_action_names(self):
        """Test detection of duplicate action names."""
        content = """
        node test_node {
            action /test_action : "test_msgs/TestAction"
            action /test_action : "test_msgs/TestAction2"  // Duplicate action
        }
        """
    
        with pytest.raises(SemanticError) as exc_info:
>           parse_robodsl(content)

tests/test_comprehensive_features.py:546: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/robodsl/parser/lark_parser.py:115: in parse_robodsl
    _parser = RoboDSLParser()
              ^^^^^^^^^^^^^^^
src/robodsl/parser/lark_parser.py:27: in __init__
    self.parser = Lark(grammar_content, parser='lalr', start='start')
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:439: in __init__
    self.parser = self._build_parser()
                  ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:485: in _build_parser
    return _construct_parsing_frontend(
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:257: in _construct_parsing_frontend
    return ParsingFrontend(lexer_conf, parser_conf, options)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:61: in __init__
    self.parser = create_parser(lexer_conf, parser_conf, options)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:161: in create_lalr_parser
    return cls(parser_conf, debug=debug, strict=strict)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parsers/lalr_parser.py:20: in __init__
    analysis.compute_lalr()
.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:332: in compute_lalr
    self.compute_lalr1_states()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <lark.parsers.lalr_analysis.LALR_Analyzer object at 0x10551ac50>

    def compute_lalr1_states(self) -> None:
        m: Dict[LR0ItemSet, Dict[str, Tuple]] = {}
        reduce_reduce = []
        for itemset in self.lr0_itemsets:
            actions: Dict[Symbol, Tuple] = {la: (Shift, next_state.closure)
                                                      for la, next_state in itemset.transitions.items()}
            for la, rules in itemset.lookaheads.items():
                if len(rules) > 1:
                    # Try to resolve conflict based on priority
                    p = [(r.options.priority or 0, r) for r in rules]
                    p.sort(key=lambda r: r[0], reverse=True)
                    best, second_best = p[:2]
                    if best[0] > second_best[0]:
                        rules = {best[1]}
                    else:
                        reduce_reduce.append((itemset, la, rules))
                        continue
    
                rule ,= rules
                if la in actions:
                    if self.strict:
                        raise GrammarError(f"Shift/Reduce conflict for terminal {la.name}. [strict-mode]\n ")
                    elif self.debug:
                        logger.warning('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.warning(' * %s', rule)
                    else:
                        logger.debug('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.debug(' * %s', rule)
                else:
                    actions[la] = (Reduce, rule)
            m[itemset] = { k.name: v for k, v in actions.items() }
    
        if reduce_reduce:
            msgs = []
            for itemset, la, rules in reduce_reduce:
                msg = 'Reduce/Reduce collision in %s between the following rules: %s' % (la, ''.join([ '\n\t- ' + str(r) for r in rules ]))
                if self.debug:
                    msg += '\n    collision occurred in state: {%s\n    }' % ''.join(['\n\t' + str(x) for x in itemset.closure])
                msgs.append(msg)
>           raise GrammarError('\n\n'.join(msgs))
E           lark.exceptions.GrammarError: Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('NAME') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RBRACE') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>

.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:306: GrammarError
______________ TestSemanticValidation.test_duplicate_client_names ______________

self = <test_comprehensive_features.TestSemanticValidation object at 0x1035bf020>

    def test_duplicate_client_names(self):
        """Test detection of duplicate client names."""
        content = """
        node test_node {
            client /test_client : "std_srvs/Empty"
            client /test_client : "std_srvs/Trigger"  // Duplicate client
        }
        """
    
        with pytest.raises(SemanticError) as exc_info:
>           parse_robodsl(content)

tests/test_comprehensive_features.py:560: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/robodsl/parser/lark_parser.py:115: in parse_robodsl
    _parser = RoboDSLParser()
              ^^^^^^^^^^^^^^^
src/robodsl/parser/lark_parser.py:27: in __init__
    self.parser = Lark(grammar_content, parser='lalr', start='start')
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:439: in __init__
    self.parser = self._build_parser()
                  ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:485: in _build_parser
    return _construct_parsing_frontend(
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:257: in _construct_parsing_frontend
    return ParsingFrontend(lexer_conf, parser_conf, options)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:61: in __init__
    self.parser = create_parser(lexer_conf, parser_conf, options)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:161: in create_lalr_parser
    return cls(parser_conf, debug=debug, strict=strict)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parsers/lalr_parser.py:20: in __init__
    analysis.compute_lalr()
.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:332: in compute_lalr
    self.compute_lalr1_states()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <lark.parsers.lalr_analysis.LALR_Analyzer object at 0x105b60e60>

    def compute_lalr1_states(self) -> None:
        m: Dict[LR0ItemSet, Dict[str, Tuple]] = {}
        reduce_reduce = []
        for itemset in self.lr0_itemsets:
            actions: Dict[Symbol, Tuple] = {la: (Shift, next_state.closure)
                                                      for la, next_state in itemset.transitions.items()}
            for la, rules in itemset.lookaheads.items():
                if len(rules) > 1:
                    # Try to resolve conflict based on priority
                    p = [(r.options.priority or 0, r) for r in rules]
                    p.sort(key=lambda r: r[0], reverse=True)
                    best, second_best = p[:2]
                    if best[0] > second_best[0]:
                        rules = {best[1]}
                    else:
                        reduce_reduce.append((itemset, la, rules))
                        continue
    
                rule ,= rules
                if la in actions:
                    if self.strict:
                        raise GrammarError(f"Shift/Reduce conflict for terminal {la.name}. [strict-mode]\n ")
                    elif self.debug:
                        logger.warning('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.warning(' * %s', rule)
                    else:
                        logger.debug('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.debug(' * %s', rule)
                else:
                    actions[la] = (Reduce, rule)
            m[itemset] = { k.name: v for k, v in actions.items() }
    
        if reduce_reduce:
            msgs = []
            for itemset, la, rules in reduce_reduce:
                msg = 'Reduce/Reduce collision in %s between the following rules: %s' % (la, ''.join([ '\n\t- ' + str(r) for r in rules ]))
                if self.debug:
                    msg += '\n    collision occurred in state: {%s\n    }' % ''.join(['\n\t' + str(x) for x in itemset.closure])
                msgs.append(msg)
>           raise GrammarError('\n\n'.join(msgs))
E           lark.exceptions.GrammarError: Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('NAME') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RBRACE') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>

.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:306: GrammarError
_______________ TestSemanticValidation.test_duplicate_flag_names _______________

self = <test_comprehensive_features.TestSemanticValidation object at 0x103724b50>

    def test_duplicate_flag_names(self):
        """Test detection of duplicate flag names."""
        content = """
        node test_node {
            flag test_flag: true
            flag test_flag: false  // Duplicate flag
        }
        """
    
        with pytest.raises(SemanticError) as exc_info:
>           parse_robodsl(content)

tests/test_comprehensive_features.py:574: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/robodsl/parser/lark_parser.py:115: in parse_robodsl
    _parser = RoboDSLParser()
              ^^^^^^^^^^^^^^^
src/robodsl/parser/lark_parser.py:27: in __init__
    self.parser = Lark(grammar_content, parser='lalr', start='start')
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:439: in __init__
    self.parser = self._build_parser()
                  ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:485: in _build_parser
    return _construct_parsing_frontend(
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:257: in _construct_parsing_frontend
    return ParsingFrontend(lexer_conf, parser_conf, options)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:61: in __init__
    self.parser = create_parser(lexer_conf, parser_conf, options)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:161: in create_lalr_parser
    return cls(parser_conf, debug=debug, strict=strict)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parsers/lalr_parser.py:20: in __init__
    analysis.compute_lalr()
.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:332: in compute_lalr
    self.compute_lalr1_states()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <lark.parsers.lalr_analysis.LALR_Analyzer object at 0x10524ac60>

    def compute_lalr1_states(self) -> None:
        m: Dict[LR0ItemSet, Dict[str, Tuple]] = {}
        reduce_reduce = []
        for itemset in self.lr0_itemsets:
            actions: Dict[Symbol, Tuple] = {la: (Shift, next_state.closure)
                                                      for la, next_state in itemset.transitions.items()}
            for la, rules in itemset.lookaheads.items():
                if len(rules) > 1:
                    # Try to resolve conflict based on priority
                    p = [(r.options.priority or 0, r) for r in rules]
                    p.sort(key=lambda r: r[0], reverse=True)
                    best, second_best = p[:2]
                    if best[0] > second_best[0]:
                        rules = {best[1]}
                    else:
                        reduce_reduce.append((itemset, la, rules))
                        continue
    
                rule ,= rules
                if la in actions:
                    if self.strict:
                        raise GrammarError(f"Shift/Reduce conflict for terminal {la.name}. [strict-mode]\n ")
                    elif self.debug:
                        logger.warning('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.warning(' * %s', rule)
                    else:
                        logger.debug('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.debug(' * %s', rule)
                else:
                    actions[la] = (Reduce, rule)
            m[itemset] = { k.name: v for k, v in actions.items() }
    
        if reduce_reduce:
            msgs = []
            for itemset, la, rules in reduce_reduce:
                msg = 'Reduce/Reduce collision in %s between the following rules: %s' % (la, ''.join([ '\n\t- ' + str(r) for r in rules ]))
                if self.debug:
                    msg += '\n    collision occurred in state: {%s\n    }' % ''.join(['\n\t' + str(x) for x in itemset.closure])
                msgs.append(msg)
>           raise GrammarError('\n\n'.join(msgs))
E           lark.exceptions.GrammarError: Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('NAME') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RBRACE') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>

.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:306: GrammarError
______________ TestSemanticValidation.test_duplicate_method_names ______________

self = <test_comprehensive_features.TestSemanticValidation object at 0x103725050>

    def test_duplicate_method_names(self):
        """Test detection of duplicate method names."""
        content = """
        node test_node {
            method test_method {
                input: int x
                code: "return x * 2;"
            }
            method test_method {
                input: float y
                code: "return y * 3;"
            }
        }
        """
    
        with pytest.raises(SemanticError) as exc_info:
>           parse_robodsl(content)

tests/test_comprehensive_features.py:594: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/robodsl/parser/lark_parser.py:115: in parse_robodsl
    _parser = RoboDSLParser()
              ^^^^^^^^^^^^^^^
src/robodsl/parser/lark_parser.py:27: in __init__
    self.parser = Lark(grammar_content, parser='lalr', start='start')
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:439: in __init__
    self.parser = self._build_parser()
                  ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:485: in _build_parser
    return _construct_parsing_frontend(
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:257: in _construct_parsing_frontend
    return ParsingFrontend(lexer_conf, parser_conf, options)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:61: in __init__
    self.parser = create_parser(lexer_conf, parser_conf, options)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:161: in create_lalr_parser
    return cls(parser_conf, debug=debug, strict=strict)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parsers/lalr_parser.py:20: in __init__
    analysis.compute_lalr()
.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:332: in compute_lalr
    self.compute_lalr1_states()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <lark.parsers.lalr_analysis.LALR_Analyzer object at 0x105ae09f0>

    def compute_lalr1_states(self) -> None:
        m: Dict[LR0ItemSet, Dict[str, Tuple]] = {}
        reduce_reduce = []
        for itemset in self.lr0_itemsets:
            actions: Dict[Symbol, Tuple] = {la: (Shift, next_state.closure)
                                                      for la, next_state in itemset.transitions.items()}
            for la, rules in itemset.lookaheads.items():
                if len(rules) > 1:
                    # Try to resolve conflict based on priority
                    p = [(r.options.priority or 0, r) for r in rules]
                    p.sort(key=lambda r: r[0], reverse=True)
                    best, second_best = p[:2]
                    if best[0] > second_best[0]:
                        rules = {best[1]}
                    else:
                        reduce_reduce.append((itemset, la, rules))
                        continue
    
                rule ,= rules
                if la in actions:
                    if self.strict:
                        raise GrammarError(f"Shift/Reduce conflict for terminal {la.name}. [strict-mode]\n ")
                    elif self.debug:
                        logger.warning('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.warning(' * %s', rule)
                    else:
                        logger.debug('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.debug(' * %s', rule)
                else:
                    actions[la] = (Reduce, rule)
            m[itemset] = { k.name: v for k, v in actions.items() }
    
        if reduce_reduce:
            msgs = []
            for itemset, la, rules in reduce_reduce:
                msg = 'Reduce/Reduce collision in %s between the following rules: %s' % (la, ''.join([ '\n\t- ' + str(r) for r in rules ]))
                if self.debug:
                    msg += '\n    collision occurred in state: {%s\n    }' % ''.join(['\n\t' + str(x) for x in itemset.closure])
                msgs.append(msg)
>           raise GrammarError('\n\n'.join(msgs))
E           lark.exceptions.GrammarError: Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('NAME') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RBRACE') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>

.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:306: GrammarError
______________ TestSemanticValidation.test_duplicate_kernel_names ______________

self = <test_comprehensive_features.TestSemanticValidation object at 0x1034cd310>

    def test_duplicate_kernel_names(self):
        """Test detection of duplicate kernel names."""
        content = """
        cuda_kernels {
            kernel test_kernel {
                param in float* input (N)
                param out float* output (N)
                code: "// kernel code"
            }
            kernel test_kernel {
                param in int* input (N)
                param out int* output (N)
                code: "// another kernel code"
            }
        }
        """
    
        with pytest.raises(SemanticError) as exc_info:
>           parse_robodsl(content)

tests/test_comprehensive_features.py:616: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/robodsl/parser/lark_parser.py:115: in parse_robodsl
    _parser = RoboDSLParser()
              ^^^^^^^^^^^^^^^
src/robodsl/parser/lark_parser.py:27: in __init__
    self.parser = Lark(grammar_content, parser='lalr', start='start')
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:439: in __init__
    self.parser = self._build_parser()
                  ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:485: in _build_parser
    return _construct_parsing_frontend(
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:257: in _construct_parsing_frontend
    return ParsingFrontend(lexer_conf, parser_conf, options)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:61: in __init__
    self.parser = create_parser(lexer_conf, parser_conf, options)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:161: in create_lalr_parser
    return cls(parser_conf, debug=debug, strict=strict)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parsers/lalr_parser.py:20: in __init__
    analysis.compute_lalr()
.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:332: in compute_lalr
    self.compute_lalr1_states()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <lark.parsers.lalr_analysis.LALR_Analyzer object at 0x1056758d0>

    def compute_lalr1_states(self) -> None:
        m: Dict[LR0ItemSet, Dict[str, Tuple]] = {}
        reduce_reduce = []
        for itemset in self.lr0_itemsets:
            actions: Dict[Symbol, Tuple] = {la: (Shift, next_state.closure)
                                                      for la, next_state in itemset.transitions.items()}
            for la, rules in itemset.lookaheads.items():
                if len(rules) > 1:
                    # Try to resolve conflict based on priority
                    p = [(r.options.priority or 0, r) for r in rules]
                    p.sort(key=lambda r: r[0], reverse=True)
                    best, second_best = p[:2]
                    if best[0] > second_best[0]:
                        rules = {best[1]}
                    else:
                        reduce_reduce.append((itemset, la, rules))
                        continue
    
                rule ,= rules
                if la in actions:
                    if self.strict:
                        raise GrammarError(f"Shift/Reduce conflict for terminal {la.name}. [strict-mode]\n ")
                    elif self.debug:
                        logger.warning('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.warning(' * %s', rule)
                    else:
                        logger.debug('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.debug(' * %s', rule)
                else:
                    actions[la] = (Reduce, rule)
            m[itemset] = { k.name: v for k, v in actions.items() }
    
        if reduce_reduce:
            msgs = []
            for itemset, la, rules in reduce_reduce:
                msg = 'Reduce/Reduce collision in %s between the following rules: %s' % (la, ''.join([ '\n\t- ' + str(r) for r in rules ]))
                if self.debug:
                    msg += '\n    collision occurred in state: {%s\n    }' % ''.join(['\n\t' + str(x) for x in itemset.closure])
                msgs.append(msg)
>           raise GrammarError('\n\n'.join(msgs))
E           lark.exceptions.GrammarError: Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('NAME') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RBRACE') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>

.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:306: GrammarError
________________ TestSemanticValidation.test_invalid_qos_values ________________

self = <test_comprehensive_features.TestSemanticValidation object at 0x1034cd220>

    def test_invalid_qos_values(self):
        """Test detection of invalid QoS values."""
        content = """
        node test_node {
            publisher /test_topic : "std_msgs/String" {
                qos {
                    reliability: invalid_value
                    durability: also_invalid
                }
            }
        }
        """
    
        with pytest.raises(SemanticError) as exc_info:
>           parse_robodsl(content)

tests/test_comprehensive_features.py:634: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/robodsl/parser/lark_parser.py:115: in parse_robodsl
    _parser = RoboDSLParser()
              ^^^^^^^^^^^^^^^
src/robodsl/parser/lark_parser.py:27: in __init__
    self.parser = Lark(grammar_content, parser='lalr', start='start')
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:439: in __init__
    self.parser = self._build_parser()
                  ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:485: in _build_parser
    return _construct_parsing_frontend(
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:257: in _construct_parsing_frontend
    return ParsingFrontend(lexer_conf, parser_conf, options)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:61: in __init__
    self.parser = create_parser(lexer_conf, parser_conf, options)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:161: in create_lalr_parser
    return cls(parser_conf, debug=debug, strict=strict)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parsers/lalr_parser.py:20: in __init__
    analysis.compute_lalr()
.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:332: in compute_lalr
    self.compute_lalr1_states()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <lark.parsers.lalr_analysis.LALR_Analyzer object at 0x105408050>

    def compute_lalr1_states(self) -> None:
        m: Dict[LR0ItemSet, Dict[str, Tuple]] = {}
        reduce_reduce = []
        for itemset in self.lr0_itemsets:
            actions: Dict[Symbol, Tuple] = {la: (Shift, next_state.closure)
                                                      for la, next_state in itemset.transitions.items()}
            for la, rules in itemset.lookaheads.items():
                if len(rules) > 1:
                    # Try to resolve conflict based on priority
                    p = [(r.options.priority or 0, r) for r in rules]
                    p.sort(key=lambda r: r[0], reverse=True)
                    best, second_best = p[:2]
                    if best[0] > second_best[0]:
                        rules = {best[1]}
                    else:
                        reduce_reduce.append((itemset, la, rules))
                        continue
    
                rule ,= rules
                if la in actions:
                    if self.strict:
                        raise GrammarError(f"Shift/Reduce conflict for terminal {la.name}. [strict-mode]\n ")
                    elif self.debug:
                        logger.warning('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.warning(' * %s', rule)
                    else:
                        logger.debug('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.debug(' * %s', rule)
                else:
                    actions[la] = (Reduce, rule)
            m[itemset] = { k.name: v for k, v in actions.items() }
    
        if reduce_reduce:
            msgs = []
            for itemset, la, rules in reduce_reduce:
                msg = 'Reduce/Reduce collision in %s between the following rules: %s' % (la, ''.join([ '\n\t- ' + str(r) for r in rules ]))
                if self.debug:
                    msg += '\n    collision occurred in state: {%s\n    }' % ''.join(['\n\t' + str(x) for x in itemset.closure])
                msgs.append(msg)
>           raise GrammarError('\n\n'.join(msgs))
E           lark.exceptions.GrammarError: Reduce/Reduce collision in Terminal('NAME') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RBRACE') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>

.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:306: GrammarError
_______________ TestSemanticValidation.test_invalid_timer_period _______________

self = <test_comprehensive_features.TestSemanticValidation object at 0x1037a2a50>

    def test_invalid_timer_period(self):
        """Test detection of invalid timer period."""
        content = """
        node test_node {
            timer my_timer: -1.0  // Invalid negative period
        }
        """
    
        with pytest.raises(SemanticError) as exc_info:
>           parse_robodsl(content)

tests/test_comprehensive_features.py:647: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/robodsl/parser/lark_parser.py:115: in parse_robodsl
    _parser = RoboDSLParser()
              ^^^^^^^^^^^^^^^
src/robodsl/parser/lark_parser.py:27: in __init__
    self.parser = Lark(grammar_content, parser='lalr', start='start')
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:439: in __init__
    self.parser = self._build_parser()
                  ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:485: in _build_parser
    return _construct_parsing_frontend(
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:257: in _construct_parsing_frontend
    return ParsingFrontend(lexer_conf, parser_conf, options)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:61: in __init__
    self.parser = create_parser(lexer_conf, parser_conf, options)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:161: in create_lalr_parser
    return cls(parser_conf, debug=debug, strict=strict)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parsers/lalr_parser.py:20: in __init__
    analysis.compute_lalr()
.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:332: in compute_lalr
    self.compute_lalr1_states()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <lark.parsers.lalr_analysis.LALR_Analyzer object at 0x105d98670>

    def compute_lalr1_states(self) -> None:
        m: Dict[LR0ItemSet, Dict[str, Tuple]] = {}
        reduce_reduce = []
        for itemset in self.lr0_itemsets:
            actions: Dict[Symbol, Tuple] = {la: (Shift, next_state.closure)
                                                      for la, next_state in itemset.transitions.items()}
            for la, rules in itemset.lookaheads.items():
                if len(rules) > 1:
                    # Try to resolve conflict based on priority
                    p = [(r.options.priority or 0, r) for r in rules]
                    p.sort(key=lambda r: r[0], reverse=True)
                    best, second_best = p[:2]
                    if best[0] > second_best[0]:
                        rules = {best[1]}
                    else:
                        reduce_reduce.append((itemset, la, rules))
                        continue
    
                rule ,= rules
                if la in actions:
                    if self.strict:
                        raise GrammarError(f"Shift/Reduce conflict for terminal {la.name}. [strict-mode]\n ")
                    elif self.debug:
                        logger.warning('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.warning(' * %s', rule)
                    else:
                        logger.debug('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.debug(' * %s', rule)
                else:
                    actions[la] = (Reduce, rule)
            m[itemset] = { k.name: v for k, v in actions.items() }
    
        if reduce_reduce:
            msgs = []
            for itemset, la, rules in reduce_reduce:
                msg = 'Reduce/Reduce collision in %s between the following rules: %s' % (la, ''.join([ '\n\t- ' + str(r) for r in rules ]))
                if self.debug:
                    msg += '\n    collision occurred in state: {%s\n    }' % ''.join(['\n\t' + str(x) for x in itemset.closure])
                msgs.append(msg)
>           raise GrammarError('\n\n'.join(msgs))
E           lark.exceptions.GrammarError: Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('NAME') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RBRACE') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>

.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:306: GrammarError
________________ TestSemanticValidation.test_invalid_block_size ________________

self = <test_comprehensive_features.TestSemanticValidation object at 0x1037a2cf0>

    def test_invalid_block_size(self):
        """Test detection of invalid CUDA block size."""
        content = """
        cuda_kernels {
            kernel test_kernel {
                param in float* input (N)
                param out float* output (N)
                block_size: (0, 1, 1)  // Invalid zero block size
                code: "// kernel code"
            }
        }
        """
    
        with pytest.raises(SemanticError) as exc_info:
>           parse_robodsl(content)

tests/test_comprehensive_features.py:665: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/robodsl/parser/lark_parser.py:115: in parse_robodsl
    _parser = RoboDSLParser()
              ^^^^^^^^^^^^^^^
src/robodsl/parser/lark_parser.py:27: in __init__
    self.parser = Lark(grammar_content, parser='lalr', start='start')
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:439: in __init__
    self.parser = self._build_parser()
                  ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:485: in _build_parser
    return _construct_parsing_frontend(
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:257: in _construct_parsing_frontend
    return ParsingFrontend(lexer_conf, parser_conf, options)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:61: in __init__
    self.parser = create_parser(lexer_conf, parser_conf, options)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:161: in create_lalr_parser
    return cls(parser_conf, debug=debug, strict=strict)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parsers/lalr_parser.py:20: in __init__
    analysis.compute_lalr()
.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:332: in compute_lalr
    self.compute_lalr1_states()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <lark.parsers.lalr_analysis.LALR_Analyzer object at 0x1055202f0>

    def compute_lalr1_states(self) -> None:
        m: Dict[LR0ItemSet, Dict[str, Tuple]] = {}
        reduce_reduce = []
        for itemset in self.lr0_itemsets:
            actions: Dict[Symbol, Tuple] = {la: (Shift, next_state.closure)
                                                      for la, next_state in itemset.transitions.items()}
            for la, rules in itemset.lookaheads.items():
                if len(rules) > 1:
                    # Try to resolve conflict based on priority
                    p = [(r.options.priority or 0, r) for r in rules]
                    p.sort(key=lambda r: r[0], reverse=True)
                    best, second_best = p[:2]
                    if best[0] > second_best[0]:
                        rules = {best[1]}
                    else:
                        reduce_reduce.append((itemset, la, rules))
                        continue
    
                rule ,= rules
                if la in actions:
                    if self.strict:
                        raise GrammarError(f"Shift/Reduce conflict for terminal {la.name}. [strict-mode]\n ")
                    elif self.debug:
                        logger.warning('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.warning(' * %s', rule)
                    else:
                        logger.debug('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.debug(' * %s', rule)
                else:
                    actions[la] = (Reduce, rule)
            m[itemset] = { k.name: v for k, v in actions.items() }
    
        if reduce_reduce:
            msgs = []
            for itemset, la, rules in reduce_reduce:
                msg = 'Reduce/Reduce collision in %s between the following rules: %s' % (la, ''.join([ '\n\t- ' + str(r) for r in rules ]))
                if self.debug:
                    msg += '\n    collision occurred in state: {%s\n    }' % ''.join(['\n\t' + str(x) for x in itemset.closure])
                msgs.append(msg)
>           raise GrammarError('\n\n'.join(msgs))
E           lark.exceptions.GrammarError: Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('NAME') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RBRACE') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>

.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:306: GrammarError
________________________ TestEdgeCases.test_empty_node _________________________

self = <test_comprehensive_features.TestEdgeCases object at 0x10379ca50>

    def test_empty_node(self):
        """Test parsing of an empty node."""
        content = """
        node empty_node {
        }
        """
    
>       ast = parse_robodsl(content)
              ^^^^^^^^^^^^^^^^^^^^^^

tests/test_comprehensive_features.py:680: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/robodsl/parser/lark_parser.py:115: in parse_robodsl
    _parser = RoboDSLParser()
              ^^^^^^^^^^^^^^^
src/robodsl/parser/lark_parser.py:27: in __init__
    self.parser = Lark(grammar_content, parser='lalr', start='start')
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:439: in __init__
    self.parser = self._build_parser()
                  ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:485: in _build_parser
    return _construct_parsing_frontend(
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:257: in _construct_parsing_frontend
    return ParsingFrontend(lexer_conf, parser_conf, options)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:61: in __init__
    self.parser = create_parser(lexer_conf, parser_conf, options)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:161: in create_lalr_parser
    return cls(parser_conf, debug=debug, strict=strict)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parsers/lalr_parser.py:20: in __init__
    analysis.compute_lalr()
.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:332: in compute_lalr
    self.compute_lalr1_states()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <lark.parsers.lalr_analysis.LALR_Analyzer object at 0x1058d1ef0>

    def compute_lalr1_states(self) -> None:
        m: Dict[LR0ItemSet, Dict[str, Tuple]] = {}
        reduce_reduce = []
        for itemset in self.lr0_itemsets:
            actions: Dict[Symbol, Tuple] = {la: (Shift, next_state.closure)
                                                      for la, next_state in itemset.transitions.items()}
            for la, rules in itemset.lookaheads.items():
                if len(rules) > 1:
                    # Try to resolve conflict based on priority
                    p = [(r.options.priority or 0, r) for r in rules]
                    p.sort(key=lambda r: r[0], reverse=True)
                    best, second_best = p[:2]
                    if best[0] > second_best[0]:
                        rules = {best[1]}
                    else:
                        reduce_reduce.append((itemset, la, rules))
                        continue
    
                rule ,= rules
                if la in actions:
                    if self.strict:
                        raise GrammarError(f"Shift/Reduce conflict for terminal {la.name}. [strict-mode]\n ")
                    elif self.debug:
                        logger.warning('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.warning(' * %s', rule)
                    else:
                        logger.debug('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.debug(' * %s', rule)
                else:
                    actions[la] = (Reduce, rule)
            m[itemset] = { k.name: v for k, v in actions.items() }
    
        if reduce_reduce:
            msgs = []
            for itemset, la, rules in reduce_reduce:
                msg = 'Reduce/Reduce collision in %s between the following rules: %s' % (la, ''.join([ '\n\t- ' + str(r) for r in rules ]))
                if self.debug:
                    msg += '\n    collision occurred in state: {%s\n    }' % ''.join(['\n\t' + str(x) for x in itemset.closure])
                msgs.append(msg)
>           raise GrammarError('\n\n'.join(msgs))
E           lark.exceptions.GrammarError: Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('NAME') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RBRACE') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>

.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:306: GrammarError
__________________ TestEdgeCases.test_node_with_only_comments __________________

self = <test_comprehensive_features.TestEdgeCases object at 0x10379cb90>

    def test_node_with_only_comments(self):
        """Test parsing of a node with only comments."""
        content = """
        node comment_node {
            // This is a comment
            // Another comment
            /* Block comment */
        }
        """
    
>       ast = parse_robodsl(content)
              ^^^^^^^^^^^^^^^^^^^^^^

tests/test_comprehensive_features.py:698: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/robodsl/parser/lark_parser.py:115: in parse_robodsl
    _parser = RoboDSLParser()
              ^^^^^^^^^^^^^^^
src/robodsl/parser/lark_parser.py:27: in __init__
    self.parser = Lark(grammar_content, parser='lalr', start='start')
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:439: in __init__
    self.parser = self._build_parser()
                  ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:485: in _build_parser
    return _construct_parsing_frontend(
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:257: in _construct_parsing_frontend
    return ParsingFrontend(lexer_conf, parser_conf, options)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:61: in __init__
    self.parser = create_parser(lexer_conf, parser_conf, options)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:161: in create_lalr_parser
    return cls(parser_conf, debug=debug, strict=strict)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parsers/lalr_parser.py:20: in __init__
    analysis.compute_lalr()
.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:332: in compute_lalr
    self.compute_lalr1_states()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <lark.parsers.lalr_analysis.LALR_Analyzer object at 0x105b79630>

    def compute_lalr1_states(self) -> None:
        m: Dict[LR0ItemSet, Dict[str, Tuple]] = {}
        reduce_reduce = []
        for itemset in self.lr0_itemsets:
            actions: Dict[Symbol, Tuple] = {la: (Shift, next_state.closure)
                                                      for la, next_state in itemset.transitions.items()}
            for la, rules in itemset.lookaheads.items():
                if len(rules) > 1:
                    # Try to resolve conflict based on priority
                    p = [(r.options.priority or 0, r) for r in rules]
                    p.sort(key=lambda r: r[0], reverse=True)
                    best, second_best = p[:2]
                    if best[0] > second_best[0]:
                        rules = {best[1]}
                    else:
                        reduce_reduce.append((itemset, la, rules))
                        continue
    
                rule ,= rules
                if la in actions:
                    if self.strict:
                        raise GrammarError(f"Shift/Reduce conflict for terminal {la.name}. [strict-mode]\n ")
                    elif self.debug:
                        logger.warning('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.warning(' * %s', rule)
                    else:
                        logger.debug('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.debug(' * %s', rule)
                else:
                    actions[la] = (Reduce, rule)
            m[itemset] = { k.name: v for k, v in actions.items() }
    
        if reduce_reduce:
            msgs = []
            for itemset, la, rules in reduce_reduce:
                msg = 'Reduce/Reduce collision in %s between the following rules: %s' % (la, ''.join([ '\n\t- ' + str(r) for r in rules ]))
                if self.debug:
                    msg += '\n    collision occurred in state: {%s\n    }' % ''.join(['\n\t' + str(x) for x in itemset.closure])
                msgs.append(msg)
>           raise GrammarError('\n\n'.join(msgs))
E           lark.exceptions.GrammarError: Reduce/Reduce collision in Terminal('NAME') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RBRACE') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>

.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:306: GrammarError
_____________________ TestEdgeCases.test_very_large_values _____________________

self = <test_comprehensive_features.TestEdgeCases object at 0x1035676f0>

    def test_very_large_values(self):
        """Test parsing of very large numeric values."""
        content = """
        node large_values_node {
            parameter large_int: 999999999999999999
            parameter large_float: 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679
            parameter small_float: 0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001
        }
        """
    
>       ast = parse_robodsl(content)
              ^^^^^^^^^^^^^^^^^^^^^^

tests/test_comprehensive_features.py:714: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/robodsl/parser/lark_parser.py:115: in parse_robodsl
    _parser = RoboDSLParser()
              ^^^^^^^^^^^^^^^
src/robodsl/parser/lark_parser.py:27: in __init__
    self.parser = Lark(grammar_content, parser='lalr', start='start')
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:439: in __init__
    self.parser = self._build_parser()
                  ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:485: in _build_parser
    return _construct_parsing_frontend(
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:257: in _construct_parsing_frontend
    return ParsingFrontend(lexer_conf, parser_conf, options)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:61: in __init__
    self.parser = create_parser(lexer_conf, parser_conf, options)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:161: in create_lalr_parser
    return cls(parser_conf, debug=debug, strict=strict)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parsers/lalr_parser.py:20: in __init__
    analysis.compute_lalr()
.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:332: in compute_lalr
    self.compute_lalr1_states()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <lark.parsers.lalr_analysis.LALR_Analyzer object at 0x105b0fd90>

    def compute_lalr1_states(self) -> None:
        m: Dict[LR0ItemSet, Dict[str, Tuple]] = {}
        reduce_reduce = []
        for itemset in self.lr0_itemsets:
            actions: Dict[Symbol, Tuple] = {la: (Shift, next_state.closure)
                                                      for la, next_state in itemset.transitions.items()}
            for la, rules in itemset.lookaheads.items():
                if len(rules) > 1:
                    # Try to resolve conflict based on priority
                    p = [(r.options.priority or 0, r) for r in rules]
                    p.sort(key=lambda r: r[0], reverse=True)
                    best, second_best = p[:2]
                    if best[0] > second_best[0]:
                        rules = {best[1]}
                    else:
                        reduce_reduce.append((itemset, la, rules))
                        continue
    
                rule ,= rules
                if la in actions:
                    if self.strict:
                        raise GrammarError(f"Shift/Reduce conflict for terminal {la.name}. [strict-mode]\n ")
                    elif self.debug:
                        logger.warning('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.warning(' * %s', rule)
                    else:
                        logger.debug('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.debug(' * %s', rule)
                else:
                    actions[la] = (Reduce, rule)
            m[itemset] = { k.name: v for k, v in actions.items() }
    
        if reduce_reduce:
            msgs = []
            for itemset, la, rules in reduce_reduce:
                msg = 'Reduce/Reduce collision in %s between the following rules: %s' % (la, ''.join([ '\n\t- ' + str(r) for r in rules ]))
                if self.debug:
                    msg += '\n    collision occurred in state: {%s\n    }' % ''.join(['\n\t' + str(x) for x in itemset.closure])
                msgs.append(msg)
>           raise GrammarError('\n\n'.join(msgs))
E           lark.exceptions.GrammarError: Reduce/Reduce collision in Terminal('NAME') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RBRACE') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>

.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:306: GrammarError
______________________ TestEdgeCases.test_unicode_strings ______________________

self = <test_comprehensive_features.TestEdgeCases object at 0x103567bb0>

    def test_unicode_strings(self):
        """Test parsing of Unicode strings."""
        content = """
        node unicode_node {
            parameter japanese: "こんにちは世界"
            parameter chinese: "你好世界"
            parameter emoji: "🚀🤖💻"
            parameter special_chars: "áéíóúñü¿¡"
        }
        """
    
>       ast = parse_robodsl(content)
              ^^^^^^^^^^^^^^^^^^^^^^

tests/test_comprehensive_features.py:730: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/robodsl/parser/lark_parser.py:115: in parse_robodsl
    _parser = RoboDSLParser()
              ^^^^^^^^^^^^^^^
src/robodsl/parser/lark_parser.py:27: in __init__
    self.parser = Lark(grammar_content, parser='lalr', start='start')
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:439: in __init__
    self.parser = self._build_parser()
                  ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:485: in _build_parser
    return _construct_parsing_frontend(
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:257: in _construct_parsing_frontend
    return ParsingFrontend(lexer_conf, parser_conf, options)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:61: in __init__
    self.parser = create_parser(lexer_conf, parser_conf, options)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:161: in create_lalr_parser
    return cls(parser_conf, debug=debug, strict=strict)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parsers/lalr_parser.py:20: in __init__
    analysis.compute_lalr()
.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:332: in compute_lalr
    self.compute_lalr1_states()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <lark.parsers.lalr_analysis.LALR_Analyzer object at 0x10537c590>

    def compute_lalr1_states(self) -> None:
        m: Dict[LR0ItemSet, Dict[str, Tuple]] = {}
        reduce_reduce = []
        for itemset in self.lr0_itemsets:
            actions: Dict[Symbol, Tuple] = {la: (Shift, next_state.closure)
                                                      for la, next_state in itemset.transitions.items()}
            for la, rules in itemset.lookaheads.items():
                if len(rules) > 1:
                    # Try to resolve conflict based on priority
                    p = [(r.options.priority or 0, r) for r in rules]
                    p.sort(key=lambda r: r[0], reverse=True)
                    best, second_best = p[:2]
                    if best[0] > second_best[0]:
                        rules = {best[1]}
                    else:
                        reduce_reduce.append((itemset, la, rules))
                        continue
    
                rule ,= rules
                if la in actions:
                    if self.strict:
                        raise GrammarError(f"Shift/Reduce conflict for terminal {la.name}. [strict-mode]\n ")
                    elif self.debug:
                        logger.warning('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.warning(' * %s', rule)
                    else:
                        logger.debug('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.debug(' * %s', rule)
                else:
                    actions[la] = (Reduce, rule)
            m[itemset] = { k.name: v for k, v in actions.items() }
    
        if reduce_reduce:
            msgs = []
            for itemset, la, rules in reduce_reduce:
                msg = 'Reduce/Reduce collision in %s between the following rules: %s' % (la, ''.join([ '\n\t- ' + str(r) for r in rules ]))
                if self.debug:
                    msg += '\n    collision occurred in state: {%s\n    }' % ''.join(['\n\t' + str(x) for x in itemset.closure])
                msgs.append(msg)
>           raise GrammarError('\n\n'.join(msgs))
E           lark.exceptions.GrammarError: Reduce/Reduce collision in Terminal('NAME') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RBRACE') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>

.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:306: GrammarError
__________________ TestEdgeCases.test_nested_arrays_and_dicts __________________

self = <test_comprehensive_features.TestEdgeCases object at 0x10375fad0>

    def test_nested_arrays_and_dicts(self):
        """Test parsing of deeply nested arrays and dictionaries."""
        content = """
        node nested_node {
            parameter nested_array: [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
            parameter nested_dict: {
                level1: {
                    level2: {
                        level3: {
                            value: 42
                            array: [1, 2, 3, 4, 5]
                        }
                    }
                }
            }
            parameter mixed: [{
                name: "item1"
                values: [1, 2, 3]
                config: {
                    enabled: true
                    timeout: 5.0
                }
            }, {
                name: "item2"
                values: [4, 5, 6]
                config: {
                    enabled: false
                    timeout: 10.0
                }
            }]
        }
        """
    
>       ast = parse_robodsl(content)
              ^^^^^^^^^^^^^^^^^^^^^^

tests/test_comprehensive_features.py:768: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/robodsl/parser/lark_parser.py:115: in parse_robodsl
    _parser = RoboDSLParser()
              ^^^^^^^^^^^^^^^
src/robodsl/parser/lark_parser.py:27: in __init__
    self.parser = Lark(grammar_content, parser='lalr', start='start')
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:439: in __init__
    self.parser = self._build_parser()
                  ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:485: in _build_parser
    return _construct_parsing_frontend(
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:257: in _construct_parsing_frontend
    return ParsingFrontend(lexer_conf, parser_conf, options)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:61: in __init__
    self.parser = create_parser(lexer_conf, parser_conf, options)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:161: in create_lalr_parser
    return cls(parser_conf, debug=debug, strict=strict)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parsers/lalr_parser.py:20: in __init__
    analysis.compute_lalr()
.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:332: in compute_lalr
    self.compute_lalr1_states()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <lark.parsers.lalr_analysis.LALR_Analyzer object at 0x103416b30>

    def compute_lalr1_states(self) -> None:
        m: Dict[LR0ItemSet, Dict[str, Tuple]] = {}
        reduce_reduce = []
        for itemset in self.lr0_itemsets:
            actions: Dict[Symbol, Tuple] = {la: (Shift, next_state.closure)
                                                      for la, next_state in itemset.transitions.items()}
            for la, rules in itemset.lookaheads.items():
                if len(rules) > 1:
                    # Try to resolve conflict based on priority
                    p = [(r.options.priority or 0, r) for r in rules]
                    p.sort(key=lambda r: r[0], reverse=True)
                    best, second_best = p[:2]
                    if best[0] > second_best[0]:
                        rules = {best[1]}
                    else:
                        reduce_reduce.append((itemset, la, rules))
                        continue
    
                rule ,= rules
                if la in actions:
                    if self.strict:
                        raise GrammarError(f"Shift/Reduce conflict for terminal {la.name}. [strict-mode]\n ")
                    elif self.debug:
                        logger.warning('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.warning(' * %s', rule)
                    else:
                        logger.debug('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.debug(' * %s', rule)
                else:
                    actions[la] = (Reduce, rule)
            m[itemset] = { k.name: v for k, v in actions.items() }
    
        if reduce_reduce:
            msgs = []
            for itemset, la, rules in reduce_reduce:
                msg = 'Reduce/Reduce collision in %s between the following rules: %s' % (la, ''.join([ '\n\t- ' + str(r) for r in rules ]))
                if self.debug:
                    msg += '\n    collision occurred in state: {%s\n    }' % ''.join(['\n\t' + str(x) for x in itemset.closure])
                msgs.append(msg)
>           raise GrammarError('\n\n'.join(msgs))
E           lark.exceptions.GrammarError: Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('NAME') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RBRACE') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>

.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:306: GrammarError
_________________ TestEdgeCases.test_method_with_no_parameters _________________

self = <test_comprehensive_features.TestEdgeCases object at 0x1035bf350>

    def test_method_with_no_parameters(self):
        """Test parsing of a method with no input/output parameters."""
        content = """
        node test_node {
            method no_params {
                code: "
                    std::cout << \"Hello, World!\" << std::endl;
                "
            }
        }
        """
    
>       ast = parse_robodsl(content)
              ^^^^^^^^^^^^^^^^^^^^^^

tests/test_comprehensive_features.py:785: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/robodsl/parser/lark_parser.py:115: in parse_robodsl
    _parser = RoboDSLParser()
              ^^^^^^^^^^^^^^^
src/robodsl/parser/lark_parser.py:27: in __init__
    self.parser = Lark(grammar_content, parser='lalr', start='start')
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:439: in __init__
    self.parser = self._build_parser()
                  ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:485: in _build_parser
    return _construct_parsing_frontend(
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:257: in _construct_parsing_frontend
    return ParsingFrontend(lexer_conf, parser_conf, options)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:61: in __init__
    self.parser = create_parser(lexer_conf, parser_conf, options)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:161: in create_lalr_parser
    return cls(parser_conf, debug=debug, strict=strict)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parsers/lalr_parser.py:20: in __init__
    analysis.compute_lalr()
.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:332: in compute_lalr
    self.compute_lalr1_states()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <lark.parsers.lalr_analysis.LALR_Analyzer object at 0x105b8c910>

    def compute_lalr1_states(self) -> None:
        m: Dict[LR0ItemSet, Dict[str, Tuple]] = {}
        reduce_reduce = []
        for itemset in self.lr0_itemsets:
            actions: Dict[Symbol, Tuple] = {la: (Shift, next_state.closure)
                                                      for la, next_state in itemset.transitions.items()}
            for la, rules in itemset.lookaheads.items():
                if len(rules) > 1:
                    # Try to resolve conflict based on priority
                    p = [(r.options.priority or 0, r) for r in rules]
                    p.sort(key=lambda r: r[0], reverse=True)
                    best, second_best = p[:2]
                    if best[0] > second_best[0]:
                        rules = {best[1]}
                    else:
                        reduce_reduce.append((itemset, la, rules))
                        continue
    
                rule ,= rules
                if la in actions:
                    if self.strict:
                        raise GrammarError(f"Shift/Reduce conflict for terminal {la.name}. [strict-mode]\n ")
                    elif self.debug:
                        logger.warning('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.warning(' * %s', rule)
                    else:
                        logger.debug('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.debug(' * %s', rule)
                else:
                    actions[la] = (Reduce, rule)
            m[itemset] = { k.name: v for k, v in actions.items() }
    
        if reduce_reduce:
            msgs = []
            for itemset, la, rules in reduce_reduce:
                msg = 'Reduce/Reduce collision in %s between the following rules: %s' % (la, ''.join([ '\n\t- ' + str(r) for r in rules ]))
                if self.debug:
                    msg += '\n    collision occurred in state: {%s\n    }' % ''.join(['\n\t' + str(x) for x in itemset.closure])
                msgs.append(msg)
>           raise GrammarError('\n\n'.join(msgs))
E           lark.exceptions.GrammarError: Reduce/Reduce collision in Terminal('NAME') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RBRACE') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>

.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:306: GrammarError
_________________ TestEdgeCases.test_kernel_with_no_parameters _________________

self = <test_comprehensive_features.TestEdgeCases object at 0x1035bf460>

    def test_kernel_with_no_parameters(self):
        """Test parsing of a kernel with no parameters."""
        content = """
        cuda_kernels {
            kernel no_params {
                block_size: (256, 1, 1)
                code: "
                    __global__ void no_params() {
                        printf(\"Hello from GPU!\\n\");
                    }
                "
            }
        }
        """
    
>       ast = parse_robodsl(content)
              ^^^^^^^^^^^^^^^^^^^^^^

tests/test_comprehensive_features.py:808: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/robodsl/parser/lark_parser.py:115: in parse_robodsl
    _parser = RoboDSLParser()
              ^^^^^^^^^^^^^^^
src/robodsl/parser/lark_parser.py:27: in __init__
    self.parser = Lark(grammar_content, parser='lalr', start='start')
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:439: in __init__
    self.parser = self._build_parser()
                  ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:485: in _build_parser
    return _construct_parsing_frontend(
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:257: in _construct_parsing_frontend
    return ParsingFrontend(lexer_conf, parser_conf, options)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:61: in __init__
    self.parser = create_parser(lexer_conf, parser_conf, options)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:161: in create_lalr_parser
    return cls(parser_conf, debug=debug, strict=strict)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parsers/lalr_parser.py:20: in __init__
    analysis.compute_lalr()
.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:332: in compute_lalr
    self.compute_lalr1_states()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <lark.parsers.lalr_analysis.LALR_Analyzer object at 0x1057e3a10>

    def compute_lalr1_states(self) -> None:
        m: Dict[LR0ItemSet, Dict[str, Tuple]] = {}
        reduce_reduce = []
        for itemset in self.lr0_itemsets:
            actions: Dict[Symbol, Tuple] = {la: (Shift, next_state.closure)
                                                      for la, next_state in itemset.transitions.items()}
            for la, rules in itemset.lookaheads.items():
                if len(rules) > 1:
                    # Try to resolve conflict based on priority
                    p = [(r.options.priority or 0, r) for r in rules]
                    p.sort(key=lambda r: r[0], reverse=True)
                    best, second_best = p[:2]
                    if best[0] > second_best[0]:
                        rules = {best[1]}
                    else:
                        reduce_reduce.append((itemset, la, rules))
                        continue
    
                rule ,= rules
                if la in actions:
                    if self.strict:
                        raise GrammarError(f"Shift/Reduce conflict for terminal {la.name}. [strict-mode]\n ")
                    elif self.debug:
                        logger.warning('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.warning(' * %s', rule)
                    else:
                        logger.debug('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.debug(' * %s', rule)
                else:
                    actions[la] = (Reduce, rule)
            m[itemset] = { k.name: v for k, v in actions.items() }
    
        if reduce_reduce:
            msgs = []
            for itemset, la, rules in reduce_reduce:
                msg = 'Reduce/Reduce collision in %s between the following rules: %s' % (la, ''.join([ '\n\t- ' + str(r) for r in rules ]))
                if self.debug:
                    msg += '\n    collision occurred in state: {%s\n    }' % ''.join(['\n\t' + str(x) for x in itemset.closure])
                msgs.append(msg)
>           raise GrammarError('\n\n'.join(msgs))
E           lark.exceptions.GrammarError: Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('NAME') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RBRACE') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>

.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:306: GrammarError
____________ TestErrorRecovery.test_multiple_nodes_with_one_invalid ____________

self = <test_comprehensive_features.TestErrorRecovery object at 0x10379ccd0>

    def test_multiple_nodes_with_one_invalid(self):
        """Test that valid nodes are still parsed even if one is invalid."""
        content = """
        node valid_node1 {
            parameter test: 42
        }
    
        node invalid_node {
            parameter test: 42
            parameter test: 43  // Duplicate - should cause error
        }
    
        node valid_node2 {
            parameter test: 42
        }
        """
    
        with pytest.raises(SemanticError) as exc_info:
>           parse_robodsl(content)

tests/test_comprehensive_features.py:836: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/robodsl/parser/lark_parser.py:115: in parse_robodsl
    _parser = RoboDSLParser()
              ^^^^^^^^^^^^^^^
src/robodsl/parser/lark_parser.py:27: in __init__
    self.parser = Lark(grammar_content, parser='lalr', start='start')
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:439: in __init__
    self.parser = self._build_parser()
                  ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:485: in _build_parser
    return _construct_parsing_frontend(
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:257: in _construct_parsing_frontend
    return ParsingFrontend(lexer_conf, parser_conf, options)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:61: in __init__
    self.parser = create_parser(lexer_conf, parser_conf, options)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:161: in create_lalr_parser
    return cls(parser_conf, debug=debug, strict=strict)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parsers/lalr_parser.py:20: in __init__
    analysis.compute_lalr()
.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:332: in compute_lalr
    self.compute_lalr1_states()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <lark.parsers.lalr_analysis.LALR_Analyzer object at 0x1056d7e70>

    def compute_lalr1_states(self) -> None:
        m: Dict[LR0ItemSet, Dict[str, Tuple]] = {}
        reduce_reduce = []
        for itemset in self.lr0_itemsets:
            actions: Dict[Symbol, Tuple] = {la: (Shift, next_state.closure)
                                                      for la, next_state in itemset.transitions.items()}
            for la, rules in itemset.lookaheads.items():
                if len(rules) > 1:
                    # Try to resolve conflict based on priority
                    p = [(r.options.priority or 0, r) for r in rules]
                    p.sort(key=lambda r: r[0], reverse=True)
                    best, second_best = p[:2]
                    if best[0] > second_best[0]:
                        rules = {best[1]}
                    else:
                        reduce_reduce.append((itemset, la, rules))
                        continue
    
                rule ,= rules
                if la in actions:
                    if self.strict:
                        raise GrammarError(f"Shift/Reduce conflict for terminal {la.name}. [strict-mode]\n ")
                    elif self.debug:
                        logger.warning('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.warning(' * %s', rule)
                    else:
                        logger.debug('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.debug(' * %s', rule)
                else:
                    actions[la] = (Reduce, rule)
            m[itemset] = { k.name: v for k, v in actions.items() }
    
        if reduce_reduce:
            msgs = []
            for itemset, la, rules in reduce_reduce:
                msg = 'Reduce/Reduce collision in %s between the following rules: %s' % (la, ''.join([ '\n\t- ' + str(r) for r in rules ]))
                if self.debug:
                    msg += '\n    collision occurred in state: {%s\n    }' % ''.join(['\n\t' + str(x) for x in itemset.closure])
                msgs.append(msg)
>           raise GrammarError('\n\n'.join(msgs))
E           lark.exceptions.GrammarError: Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('NAME') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RBRACE') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>

.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:306: GrammarError
______________ TestErrorRecovery.test_invalid_syntax_in_comments _______________

self = <test_comprehensive_features.TestErrorRecovery object at 0x10379ce10>

    def test_invalid_syntax_in_comments(self):
        """Test that invalid syntax in comments doesn't cause parsing errors."""
        content = """
        node test_node {
            // This comment has invalid syntax: node invalid { parameter x: y }
            parameter valid_param: 42
            /* Another comment with invalid syntax:
               publisher /topic "invalid"
               subscriber /topic "also invalid"
            */
        }
        """
    
>       ast = parse_robodsl(content)
              ^^^^^^^^^^^^^^^^^^^^^^

tests/test_comprehensive_features.py:854: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/robodsl/parser/lark_parser.py:115: in parse_robodsl
    _parser = RoboDSLParser()
              ^^^^^^^^^^^^^^^
src/robodsl/parser/lark_parser.py:27: in __init__
    self.parser = Lark(grammar_content, parser='lalr', start='start')
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:439: in __init__
    self.parser = self._build_parser()
                  ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:485: in _build_parser
    return _construct_parsing_frontend(
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:257: in _construct_parsing_frontend
    return ParsingFrontend(lexer_conf, parser_conf, options)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:61: in __init__
    self.parser = create_parser(lexer_conf, parser_conf, options)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:161: in create_lalr_parser
    return cls(parser_conf, debug=debug, strict=strict)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parsers/lalr_parser.py:20: in __init__
    analysis.compute_lalr()
.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:332: in compute_lalr
    self.compute_lalr1_states()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <lark.parsers.lalr_analysis.LALR_Analyzer object at 0x10555bd90>

    def compute_lalr1_states(self) -> None:
        m: Dict[LR0ItemSet, Dict[str, Tuple]] = {}
        reduce_reduce = []
        for itemset in self.lr0_itemsets:
            actions: Dict[Symbol, Tuple] = {la: (Shift, next_state.closure)
                                                      for la, next_state in itemset.transitions.items()}
            for la, rules in itemset.lookaheads.items():
                if len(rules) > 1:
                    # Try to resolve conflict based on priority
                    p = [(r.options.priority or 0, r) for r in rules]
                    p.sort(key=lambda r: r[0], reverse=True)
                    best, second_best = p[:2]
                    if best[0] > second_best[0]:
                        rules = {best[1]}
                    else:
                        reduce_reduce.append((itemset, la, rules))
                        continue
    
                rule ,= rules
                if la in actions:
                    if self.strict:
                        raise GrammarError(f"Shift/Reduce conflict for terminal {la.name}. [strict-mode]\n ")
                    elif self.debug:
                        logger.warning('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.warning(' * %s', rule)
                    else:
                        logger.debug('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.debug(' * %s', rule)
                else:
                    actions[la] = (Reduce, rule)
            m[itemset] = { k.name: v for k, v in actions.items() }
    
        if reduce_reduce:
            msgs = []
            for itemset, la, rules in reduce_reduce:
                msg = 'Reduce/Reduce collision in %s between the following rules: %s' % (la, ''.join([ '\n\t- ' + str(r) for r in rules ]))
                if self.debug:
                    msg += '\n    collision occurred in state: {%s\n    }' % ''.join(['\n\t' + str(x) for x in itemset.closure])
                msgs.append(msg)
>           raise GrammarError('\n\n'.join(msgs))
E           lark.exceptions.GrammarError: Reduce/Reduce collision in Terminal('NAME') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RBRACE') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>

.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:306: GrammarError
_______________ TestPerformance.test_large_number_of_parameters ________________

self = <test_comprehensive_features.TestPerformance object at 0x10379cf50>

    def test_large_number_of_parameters(self):
        """Test parsing with a large number of parameters."""
        content = "node large_node {\n"
        for i in range(1000):
            content += f"    parameter param_{i}: {i}\n"
        content += "}\n"
    
>       ast = parse_robodsl(content)
              ^^^^^^^^^^^^^^^^^^^^^^

tests/test_comprehensive_features.py:871: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/robodsl/parser/lark_parser.py:115: in parse_robodsl
    _parser = RoboDSLParser()
              ^^^^^^^^^^^^^^^
src/robodsl/parser/lark_parser.py:27: in __init__
    self.parser = Lark(grammar_content, parser='lalr', start='start')
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:439: in __init__
    self.parser = self._build_parser()
                  ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:485: in _build_parser
    return _construct_parsing_frontend(
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:257: in _construct_parsing_frontend
    return ParsingFrontend(lexer_conf, parser_conf, options)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:61: in __init__
    self.parser = create_parser(lexer_conf, parser_conf, options)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:161: in create_lalr_parser
    return cls(parser_conf, debug=debug, strict=strict)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parsers/lalr_parser.py:20: in __init__
    analysis.compute_lalr()
.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:332: in compute_lalr
    self.compute_lalr1_states()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <lark.parsers.lalr_analysis.LALR_Analyzer object at 0x105cd0050>

    def compute_lalr1_states(self) -> None:
        m: Dict[LR0ItemSet, Dict[str, Tuple]] = {}
        reduce_reduce = []
        for itemset in self.lr0_itemsets:
            actions: Dict[Symbol, Tuple] = {la: (Shift, next_state.closure)
                                                      for la, next_state in itemset.transitions.items()}
            for la, rules in itemset.lookaheads.items():
                if len(rules) > 1:
                    # Try to resolve conflict based on priority
                    p = [(r.options.priority or 0, r) for r in rules]
                    p.sort(key=lambda r: r[0], reverse=True)
                    best, second_best = p[:2]
                    if best[0] > second_best[0]:
                        rules = {best[1]}
                    else:
                        reduce_reduce.append((itemset, la, rules))
                        continue
    
                rule ,= rules
                if la in actions:
                    if self.strict:
                        raise GrammarError(f"Shift/Reduce conflict for terminal {la.name}. [strict-mode]\n ")
                    elif self.debug:
                        logger.warning('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.warning(' * %s', rule)
                    else:
                        logger.debug('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.debug(' * %s', rule)
                else:
                    actions[la] = (Reduce, rule)
            m[itemset] = { k.name: v for k, v in actions.items() }
    
        if reduce_reduce:
            msgs = []
            for itemset, la, rules in reduce_reduce:
                msg = 'Reduce/Reduce collision in %s between the following rules: %s' % (la, ''.join([ '\n\t- ' + str(r) for r in rules ]))
                if self.debug:
                    msg += '\n    collision occurred in state: {%s\n    }' % ''.join(['\n\t' + str(x) for x in itemset.closure])
                msgs.append(msg)
>           raise GrammarError('\n\n'.join(msgs))
E           lark.exceptions.GrammarError: Reduce/Reduce collision in Terminal('NAME') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RBRACE') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>

.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:306: GrammarError
_______________ TestPerformance.test_large_number_of_publishers ________________

self = <test_comprehensive_features.TestPerformance object at 0x10379d090>

    def test_large_number_of_publishers(self):
        """Test parsing with a large number of publishers."""
        content = "node large_node {\n"
        for i in range(100):
            content += f'    publisher /topic_{i} : "std_msgs/String"\n'
        content += "}\n"
    
>       ast = parse_robodsl(content)
              ^^^^^^^^^^^^^^^^^^^^^^

tests/test_comprehensive_features.py:883: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/robodsl/parser/lark_parser.py:115: in parse_robodsl
    _parser = RoboDSLParser()
              ^^^^^^^^^^^^^^^
src/robodsl/parser/lark_parser.py:27: in __init__
    self.parser = Lark(grammar_content, parser='lalr', start='start')
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:439: in __init__
    self.parser = self._build_parser()
                  ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:485: in _build_parser
    return _construct_parsing_frontend(
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:257: in _construct_parsing_frontend
    return ParsingFrontend(lexer_conf, parser_conf, options)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:61: in __init__
    self.parser = create_parser(lexer_conf, parser_conf, options)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:161: in create_lalr_parser
    return cls(parser_conf, debug=debug, strict=strict)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parsers/lalr_parser.py:20: in __init__
    analysis.compute_lalr()
.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:332: in compute_lalr
    self.compute_lalr1_states()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <lark.parsers.lalr_analysis.LALR_Analyzer object at 0x1058fdb70>

    def compute_lalr1_states(self) -> None:
        m: Dict[LR0ItemSet, Dict[str, Tuple]] = {}
        reduce_reduce = []
        for itemset in self.lr0_itemsets:
            actions: Dict[Symbol, Tuple] = {la: (Shift, next_state.closure)
                                                      for la, next_state in itemset.transitions.items()}
            for la, rules in itemset.lookaheads.items():
                if len(rules) > 1:
                    # Try to resolve conflict based on priority
                    p = [(r.options.priority or 0, r) for r in rules]
                    p.sort(key=lambda r: r[0], reverse=True)
                    best, second_best = p[:2]
                    if best[0] > second_best[0]:
                        rules = {best[1]}
                    else:
                        reduce_reduce.append((itemset, la, rules))
                        continue
    
                rule ,= rules
                if la in actions:
                    if self.strict:
                        raise GrammarError(f"Shift/Reduce conflict for terminal {la.name}. [strict-mode]\n ")
                    elif self.debug:
                        logger.warning('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.warning(' * %s', rule)
                    else:
                        logger.debug('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.debug(' * %s', rule)
                else:
                    actions[la] = (Reduce, rule)
            m[itemset] = { k.name: v for k, v in actions.items() }
    
        if reduce_reduce:
            msgs = []
            for itemset, la, rules in reduce_reduce:
                msg = 'Reduce/Reduce collision in %s between the following rules: %s' % (la, ''.join([ '\n\t- ' + str(r) for r in rules ]))
                if self.debug:
                    msg += '\n    collision occurred in state: {%s\n    }' % ''.join(['\n\t' + str(x) for x in itemset.closure])
                msgs.append(msg)
>           raise GrammarError('\n\n'.join(msgs))
E           lark.exceptions.GrammarError: Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('NAME') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RBRACE') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>

.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:306: GrammarError
____________________ TestPerformance.test_large_code_blocks ____________________

self = <test_comprehensive_features.TestPerformance object at 0x103567a80>

    def test_large_code_blocks(self):
        """Test parsing with large code blocks."""
        large_code = '"' + "int x = 0;\\n" * 1000 + '"'
        content = f"""
        node test_node {{
            method large_method {{
                input: int size
                code: {large_code}
            }}
        }}
        """
    
>       ast = parse_robodsl(content)
              ^^^^^^^^^^^^^^^^^^^^^^

tests/test_comprehensive_features.py:900: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/robodsl/parser/lark_parser.py:115: in parse_robodsl
    _parser = RoboDSLParser()
              ^^^^^^^^^^^^^^^
src/robodsl/parser/lark_parser.py:27: in __init__
    self.parser = Lark(grammar_content, parser='lalr', start='start')
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:439: in __init__
    self.parser = self._build_parser()
                  ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:485: in _build_parser
    return _construct_parsing_frontend(
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:257: in _construct_parsing_frontend
    return ParsingFrontend(lexer_conf, parser_conf, options)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:61: in __init__
    self.parser = create_parser(lexer_conf, parser_conf, options)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:161: in create_lalr_parser
    return cls(parser_conf, debug=debug, strict=strict)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parsers/lalr_parser.py:20: in __init__
    analysis.compute_lalr()
.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:332: in compute_lalr
    self.compute_lalr1_states()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <lark.parsers.lalr_analysis.LALR_Analyzer object at 0x105d65630>

    def compute_lalr1_states(self) -> None:
        m: Dict[LR0ItemSet, Dict[str, Tuple]] = {}
        reduce_reduce = []
        for itemset in self.lr0_itemsets:
            actions: Dict[Symbol, Tuple] = {la: (Shift, next_state.closure)
                                                      for la, next_state in itemset.transitions.items()}
            for la, rules in itemset.lookaheads.items():
                if len(rules) > 1:
                    # Try to resolve conflict based on priority
                    p = [(r.options.priority or 0, r) for r in rules]
                    p.sort(key=lambda r: r[0], reverse=True)
                    best, second_best = p[:2]
                    if best[0] > second_best[0]:
                        rules = {best[1]}
                    else:
                        reduce_reduce.append((itemset, la, rules))
                        continue
    
                rule ,= rules
                if la in actions:
                    if self.strict:
                        raise GrammarError(f"Shift/Reduce conflict for terminal {la.name}. [strict-mode]\n ")
                    elif self.debug:
                        logger.warning('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.warning(' * %s', rule)
                    else:
                        logger.debug('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.debug(' * %s', rule)
                else:
                    actions[la] = (Reduce, rule)
            m[itemset] = { k.name: v for k, v in actions.items() }
    
        if reduce_reduce:
            msgs = []
            for itemset, la, rules in reduce_reduce:
                msg = 'Reduce/Reduce collision in %s between the following rules: %s' % (la, ''.join([ '\n\t- ' + str(r) for r in rules ]))
                if self.debug:
                    msg += '\n    collision occurred in state: {%s\n    }' % ''.join(['\n\t' + str(x) for x in itemset.closure])
                msgs.append(msg)
>           raise GrammarError('\n\n'.join(msgs))
E           lark.exceptions.GrammarError: Reduce/Reduce collision in Terminal('NAME') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RBRACE') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>

.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:306: GrammarError
___________________________ test_basic_node_parsing ____________________________

    def test_basic_node_parsing():
        """Test basic node parsing with the new Lark parser."""
        content = """
        node test_node {
            parameter test_param: 42
            publisher /test_topic : "std_msgs/String"
            subscriber /input_topic : "std_msgs/String"
        }
        """
    
>       ast = parse_robodsl(content)
              ^^^^^^^^^^^^^^^^^^^^^^

tests/test_lark_parser.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/robodsl/parser/lark_parser.py:115: in parse_robodsl
    _parser = RoboDSLParser()
              ^^^^^^^^^^^^^^^
src/robodsl/parser/lark_parser.py:27: in __init__
    self.parser = Lark(grammar_content, parser='lalr', start='start')
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:439: in __init__
    self.parser = self._build_parser()
                  ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:485: in _build_parser
    return _construct_parsing_frontend(
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:257: in _construct_parsing_frontend
    return ParsingFrontend(lexer_conf, parser_conf, options)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:61: in __init__
    self.parser = create_parser(lexer_conf, parser_conf, options)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:161: in create_lalr_parser
    return cls(parser_conf, debug=debug, strict=strict)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parsers/lalr_parser.py:20: in __init__
    analysis.compute_lalr()
.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:332: in compute_lalr
    self.compute_lalr1_states()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <lark.parsers.lalr_analysis.LALR_Analyzer object at 0x105df9e10>

    def compute_lalr1_states(self) -> None:
        m: Dict[LR0ItemSet, Dict[str, Tuple]] = {}
        reduce_reduce = []
        for itemset in self.lr0_itemsets:
            actions: Dict[Symbol, Tuple] = {la: (Shift, next_state.closure)
                                                      for la, next_state in itemset.transitions.items()}
            for la, rules in itemset.lookaheads.items():
                if len(rules) > 1:
                    # Try to resolve conflict based on priority
                    p = [(r.options.priority or 0, r) for r in rules]
                    p.sort(key=lambda r: r[0], reverse=True)
                    best, second_best = p[:2]
                    if best[0] > second_best[0]:
                        rules = {best[1]}
                    else:
                        reduce_reduce.append((itemset, la, rules))
                        continue
    
                rule ,= rules
                if la in actions:
                    if self.strict:
                        raise GrammarError(f"Shift/Reduce conflict for terminal {la.name}. [strict-mode]\n ")
                    elif self.debug:
                        logger.warning('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.warning(' * %s', rule)
                    else:
                        logger.debug('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.debug(' * %s', rule)
                else:
                    actions[la] = (Reduce, rule)
            m[itemset] = { k.name: v for k, v in actions.items() }
    
        if reduce_reduce:
            msgs = []
            for itemset, la, rules in reduce_reduce:
                msg = 'Reduce/Reduce collision in %s between the following rules: %s' % (la, ''.join([ '\n\t- ' + str(r) for r in rules ]))
                if self.debug:
                    msg += '\n    collision occurred in state: {%s\n    }' % ''.join(['\n\t' + str(x) for x in itemset.closure])
                msgs.append(msg)
>           raise GrammarError('\n\n'.join(msgs))
E           lark.exceptions.GrammarError: Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('NAME') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RBRACE') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>

.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:306: GrammarError
___________________________ test_cuda_kernel_parsing ___________________________

    def test_cuda_kernel_parsing():
        """Test CUDA kernel parsing with the new Lark parser."""
        content = """
        cuda_kernels {
            kernel test_kernel {
                param in float* input_data (N)
                param out float* output_data (N)
                block_size: (256, 1, 1)
                code: "int idx = blockIdx.x * blockDim.x + threadIdx.x;\nif (idx < N) {\n    output_data[idx] = input_data[idx] * 2.0f;\n}"
            }
        }
        """
    
>       ast = parse_robodsl(content)
              ^^^^^^^^^^^^^^^^^^^^^^

tests/test_lark_parser.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/robodsl/parser/lark_parser.py:115: in parse_robodsl
    _parser = RoboDSLParser()
              ^^^^^^^^^^^^^^^
src/robodsl/parser/lark_parser.py:27: in __init__
    self.parser = Lark(grammar_content, parser='lalr', start='start')
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:439: in __init__
    self.parser = self._build_parser()
                  ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:485: in _build_parser
    return _construct_parsing_frontend(
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:257: in _construct_parsing_frontend
    return ParsingFrontend(lexer_conf, parser_conf, options)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:61: in __init__
    self.parser = create_parser(lexer_conf, parser_conf, options)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:161: in create_lalr_parser
    return cls(parser_conf, debug=debug, strict=strict)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parsers/lalr_parser.py:20: in __init__
    analysis.compute_lalr()
.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:332: in compute_lalr
    self.compute_lalr1_states()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <lark.parsers.lalr_analysis.LALR_Analyzer object at 0x1056317f0>

    def compute_lalr1_states(self) -> None:
        m: Dict[LR0ItemSet, Dict[str, Tuple]] = {}
        reduce_reduce = []
        for itemset in self.lr0_itemsets:
            actions: Dict[Symbol, Tuple] = {la: (Shift, next_state.closure)
                                                      for la, next_state in itemset.transitions.items()}
            for la, rules in itemset.lookaheads.items():
                if len(rules) > 1:
                    # Try to resolve conflict based on priority
                    p = [(r.options.priority or 0, r) for r in rules]
                    p.sort(key=lambda r: r[0], reverse=True)
                    best, second_best = p[:2]
                    if best[0] > second_best[0]:
                        rules = {best[1]}
                    else:
                        reduce_reduce.append((itemset, la, rules))
                        continue
    
                rule ,= rules
                if la in actions:
                    if self.strict:
                        raise GrammarError(f"Shift/Reduce conflict for terminal {la.name}. [strict-mode]\n ")
                    elif self.debug:
                        logger.warning('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.warning(' * %s', rule)
                    else:
                        logger.debug('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.debug(' * %s', rule)
                else:
                    actions[la] = (Reduce, rule)
            m[itemset] = { k.name: v for k, v in actions.items() }
    
        if reduce_reduce:
            msgs = []
            for itemset, la, rules in reduce_reduce:
                msg = 'Reduce/Reduce collision in %s between the following rules: %s' % (la, ''.join([ '\n\t- ' + str(r) for r in rules ]))
                if self.debug:
                    msg += '\n    collision occurred in state: {%s\n    }' % ''.join(['\n\t' + str(x) for x in itemset.closure])
                msgs.append(msg)
>           raise GrammarError('\n\n'.join(msgs))
E           lark.exceptions.GrammarError: Reduce/Reduce collision in Terminal('NAME') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RBRACE') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>

.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:306: GrammarError
____________________________ test_qos_configuration ____________________________

    def test_qos_configuration():
        """Test QoS configuration parsing."""
        content = """
        node test_node {
            publisher /test_topic : "std_msgs/String" {
                qos {
                    reliability: reliable
                    durability: transient_local
                    history: keep_last
                    depth: 10
                }
            }
        }
        """
    
>       ast = parse_robodsl(content)
              ^^^^^^^^^^^^^^^^^^^^^^

tests/test_lark_parser.py:71: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/robodsl/parser/lark_parser.py:115: in parse_robodsl
    _parser = RoboDSLParser()
              ^^^^^^^^^^^^^^^
src/robodsl/parser/lark_parser.py:27: in __init__
    self.parser = Lark(grammar_content, parser='lalr', start='start')
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:439: in __init__
    self.parser = self._build_parser()
                  ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:485: in _build_parser
    return _construct_parsing_frontend(
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:257: in _construct_parsing_frontend
    return ParsingFrontend(lexer_conf, parser_conf, options)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:61: in __init__
    self.parser = create_parser(lexer_conf, parser_conf, options)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:161: in create_lalr_parser
    return cls(parser_conf, debug=debug, strict=strict)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parsers/lalr_parser.py:20: in __init__
    analysis.compute_lalr()
.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:332: in compute_lalr
    self.compute_lalr1_states()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <lark.parsers.lalr_analysis.LALR_Analyzer object at 0x105d10050>

    def compute_lalr1_states(self) -> None:
        m: Dict[LR0ItemSet, Dict[str, Tuple]] = {}
        reduce_reduce = []
        for itemset in self.lr0_itemsets:
            actions: Dict[Symbol, Tuple] = {la: (Shift, next_state.closure)
                                                      for la, next_state in itemset.transitions.items()}
            for la, rules in itemset.lookaheads.items():
                if len(rules) > 1:
                    # Try to resolve conflict based on priority
                    p = [(r.options.priority or 0, r) for r in rules]
                    p.sort(key=lambda r: r[0], reverse=True)
                    best, second_best = p[:2]
                    if best[0] > second_best[0]:
                        rules = {best[1]}
                    else:
                        reduce_reduce.append((itemset, la, rules))
                        continue
    
                rule ,= rules
                if la in actions:
                    if self.strict:
                        raise GrammarError(f"Shift/Reduce conflict for terminal {la.name}. [strict-mode]\n ")
                    elif self.debug:
                        logger.warning('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.warning(' * %s', rule)
                    else:
                        logger.debug('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.debug(' * %s', rule)
                else:
                    actions[la] = (Reduce, rule)
            m[itemset] = { k.name: v for k, v in actions.items() }
    
        if reduce_reduce:
            msgs = []
            for itemset, la, rules in reduce_reduce:
                msg = 'Reduce/Reduce collision in %s between the following rules: %s' % (la, ''.join([ '\n\t- ' + str(r) for r in rules ]))
                if self.debug:
                    msg += '\n    collision occurred in state: {%s\n    }' % ''.join(['\n\t' + str(x) for x in itemset.closure])
                msgs.append(msg)
>           raise GrammarError('\n\n'.join(msgs))
E           lark.exceptions.GrammarError: Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('NAME') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RBRACE') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>

.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:306: GrammarError
_________________________ test_lifecycle_configuration _________________________

    def test_lifecycle_configuration():
        """Test lifecycle configuration parsing."""
        content = """
        node test_node {
            lifecycle {
                autostart: true
                cleanup_on_shutdown: false
            }
        }
        """
    
>       ast = parse_robodsl(content)
              ^^^^^^^^^^^^^^^^^^^^^^

tests/test_lark_parser.py:99: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/robodsl/parser/lark_parser.py:115: in parse_robodsl
    _parser = RoboDSLParser()
              ^^^^^^^^^^^^^^^
src/robodsl/parser/lark_parser.py:27: in __init__
    self.parser = Lark(grammar_content, parser='lalr', start='start')
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:439: in __init__
    self.parser = self._build_parser()
                  ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:485: in _build_parser
    return _construct_parsing_frontend(
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:257: in _construct_parsing_frontend
    return ParsingFrontend(lexer_conf, parser_conf, options)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:61: in __init__
    self.parser = create_parser(lexer_conf, parser_conf, options)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:161: in create_lalr_parser
    return cls(parser_conf, debug=debug, strict=strict)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parsers/lalr_parser.py:20: in __init__
    analysis.compute_lalr()
.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:332: in compute_lalr
    self.compute_lalr1_states()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <lark.parsers.lalr_analysis.LALR_Analyzer object at 0x1058f3d90>

    def compute_lalr1_states(self) -> None:
        m: Dict[LR0ItemSet, Dict[str, Tuple]] = {}
        reduce_reduce = []
        for itemset in self.lr0_itemsets:
            actions: Dict[Symbol, Tuple] = {la: (Shift, next_state.closure)
                                                      for la, next_state in itemset.transitions.items()}
            for la, rules in itemset.lookaheads.items():
                if len(rules) > 1:
                    # Try to resolve conflict based on priority
                    p = [(r.options.priority or 0, r) for r in rules]
                    p.sort(key=lambda r: r[0], reverse=True)
                    best, second_best = p[:2]
                    if best[0] > second_best[0]:
                        rules = {best[1]}
                    else:
                        reduce_reduce.append((itemset, la, rules))
                        continue
    
                rule ,= rules
                if la in actions:
                    if self.strict:
                        raise GrammarError(f"Shift/Reduce conflict for terminal {la.name}. [strict-mode]\n ")
                    elif self.debug:
                        logger.warning('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.warning(' * %s', rule)
                    else:
                        logger.debug('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.debug(' * %s', rule)
                else:
                    actions[la] = (Reduce, rule)
            m[itemset] = { k.name: v for k, v in actions.items() }
    
        if reduce_reduce:
            msgs = []
            for itemset, la, rules in reduce_reduce:
                msg = 'Reduce/Reduce collision in %s between the following rules: %s' % (la, ''.join([ '\n\t- ' + str(r) for r in rules ]))
                if self.debug:
                    msg += '\n    collision occurred in state: {%s\n    }' % ''.join(['\n\t' + str(x) for x in itemset.closure])
                msgs.append(msg)
>           raise GrammarError('\n\n'.join(msgs))
E           lark.exceptions.GrammarError: Reduce/Reduce collision in Terminal('NAME') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RBRACE') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>

.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:306: GrammarError
___________________________ test_timer_configuration ___________________________

    def test_timer_configuration():
        """Test timer configuration parsing."""
        content = """
        node test_node {
            timer timer_callback: 1.0 {
                oneshot: true
                autostart: false
            }
        }
        """
    
>       ast = parse_robodsl(content)
              ^^^^^^^^^^^^^^^^^^^^^^

tests/test_lark_parser.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/robodsl/parser/lark_parser.py:115: in parse_robodsl
    _parser = RoboDSLParser()
              ^^^^^^^^^^^^^^^
src/robodsl/parser/lark_parser.py:27: in __init__
    self.parser = Lark(grammar_content, parser='lalr', start='start')
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:439: in __init__
    self.parser = self._build_parser()
                  ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:485: in _build_parser
    return _construct_parsing_frontend(
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:257: in _construct_parsing_frontend
    return ParsingFrontend(lexer_conf, parser_conf, options)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:61: in __init__
    self.parser = create_parser(lexer_conf, parser_conf, options)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:161: in create_lalr_parser
    return cls(parser_conf, debug=debug, strict=strict)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parsers/lalr_parser.py:20: in __init__
    analysis.compute_lalr()
.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:332: in compute_lalr
    self.compute_lalr1_states()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <lark.parsers.lalr_analysis.LALR_Analyzer object at 0x105c57e70>

    def compute_lalr1_states(self) -> None:
        m: Dict[LR0ItemSet, Dict[str, Tuple]] = {}
        reduce_reduce = []
        for itemset in self.lr0_itemsets:
            actions: Dict[Symbol, Tuple] = {la: (Shift, next_state.closure)
                                                      for la, next_state in itemset.transitions.items()}
            for la, rules in itemset.lookaheads.items():
                if len(rules) > 1:
                    # Try to resolve conflict based on priority
                    p = [(r.options.priority or 0, r) for r in rules]
                    p.sort(key=lambda r: r[0], reverse=True)
                    best, second_best = p[:2]
                    if best[0] > second_best[0]:
                        rules = {best[1]}
                    else:
                        reduce_reduce.append((itemset, la, rules))
                        continue
    
                rule ,= rules
                if la in actions:
                    if self.strict:
                        raise GrammarError(f"Shift/Reduce conflict for terminal {la.name}. [strict-mode]\n ")
                    elif self.debug:
                        logger.warning('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.warning(' * %s', rule)
                    else:
                        logger.debug('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.debug(' * %s', rule)
                else:
                    actions[la] = (Reduce, rule)
            m[itemset] = { k.name: v for k, v in actions.items() }
    
        if reduce_reduce:
            msgs = []
            for itemset, la, rules in reduce_reduce:
                msg = 'Reduce/Reduce collision in %s between the following rules: %s' % (la, ''.join([ '\n\t- ' + str(r) for r in rules ]))
                if self.debug:
                    msg += '\n    collision occurred in state: {%s\n    }' % ''.join(['\n\t' + str(x) for x in itemset.closure])
                msgs.append(msg)
>           raise GrammarError('\n\n'.join(msgs))
E           lark.exceptions.GrammarError: Reduce/Reduce collision in Terminal('NAME') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RBRACE') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>

.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:306: GrammarError
___________________________ test_include_statements ____________________________

    def test_include_statements():
        """Test include statement parsing."""
        content = """
        include <ros/ros.h>
        include "custom_header.h"
    
        node test_node {
            parameter test_param: 42
        }
        """
    
>       ast = parse_robodsl(content)
              ^^^^^^^^^^^^^^^^^^^^^^

tests/test_lark_parser.py:156: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/robodsl/parser/lark_parser.py:115: in parse_robodsl
    _parser = RoboDSLParser()
              ^^^^^^^^^^^^^^^
src/robodsl/parser/lark_parser.py:27: in __init__
    self.parser = Lark(grammar_content, parser='lalr', start='start')
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:439: in __init__
    self.parser = self._build_parser()
                  ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:485: in _build_parser
    return _construct_parsing_frontend(
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:257: in _construct_parsing_frontend
    return ParsingFrontend(lexer_conf, parser_conf, options)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:61: in __init__
    self.parser = create_parser(lexer_conf, parser_conf, options)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:161: in create_lalr_parser
    return cls(parser_conf, debug=debug, strict=strict)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parsers/lalr_parser.py:20: in __init__
    analysis.compute_lalr()
.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:332: in compute_lalr
    self.compute_lalr1_states()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <lark.parsers.lalr_analysis.LALR_Analyzer object at 0x1058c4d70>

    def compute_lalr1_states(self) -> None:
        m: Dict[LR0ItemSet, Dict[str, Tuple]] = {}
        reduce_reduce = []
        for itemset in self.lr0_itemsets:
            actions: Dict[Symbol, Tuple] = {la: (Shift, next_state.closure)
                                                      for la, next_state in itemset.transitions.items()}
            for la, rules in itemset.lookaheads.items():
                if len(rules) > 1:
                    # Try to resolve conflict based on priority
                    p = [(r.options.priority or 0, r) for r in rules]
                    p.sort(key=lambda r: r[0], reverse=True)
                    best, second_best = p[:2]
                    if best[0] > second_best[0]:
                        rules = {best[1]}
                    else:
                        reduce_reduce.append((itemset, la, rules))
                        continue
    
                rule ,= rules
                if la in actions:
                    if self.strict:
                        raise GrammarError(f"Shift/Reduce conflict for terminal {la.name}. [strict-mode]\n ")
                    elif self.debug:
                        logger.warning('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.warning(' * %s', rule)
                    else:
                        logger.debug('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.debug(' * %s', rule)
                else:
                    actions[la] = (Reduce, rule)
            m[itemset] = { k.name: v for k, v in actions.items() }
    
        if reduce_reduce:
            msgs = []
            for itemset, la, rules in reduce_reduce:
                msg = 'Reduce/Reduce collision in %s between the following rules: %s' % (la, ''.join([ '\n\t- ' + str(r) for r in rules ]))
                if self.debug:
                    msg += '\n    collision occurred in state: {%s\n    }' % ''.join(['\n\t' + str(x) for x in itemset.closure])
                msgs.append(msg)
>           raise GrammarError('\n\n'.join(msgs))
E           lark.exceptions.GrammarError: Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('NAME') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RBRACE') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>

.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:306: GrammarError
________________________________ test_comments _________________________________

    def test_comments():
        """Test comment handling."""
        content = """
        // This is a comment
        node test_node {
            parameter test_param: 42  // Another comment
            // publisher "/test_topic" "std_msgs/String"  // Commented out
        }
        """
    
>       ast = parse_robodsl(content)
              ^^^^^^^^^^^^^^^^^^^^^^

tests/test_lark_parser.py:175: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/robodsl/parser/lark_parser.py:115: in parse_robodsl
    _parser = RoboDSLParser()
              ^^^^^^^^^^^^^^^
src/robodsl/parser/lark_parser.py:27: in __init__
    self.parser = Lark(grammar_content, parser='lalr', start='start')
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:439: in __init__
    self.parser = self._build_parser()
                  ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:485: in _build_parser
    return _construct_parsing_frontend(
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:257: in _construct_parsing_frontend
    return ParsingFrontend(lexer_conf, parser_conf, options)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:61: in __init__
    self.parser = create_parser(lexer_conf, parser_conf, options)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:161: in create_lalr_parser
    return cls(parser_conf, debug=debug, strict=strict)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parsers/lalr_parser.py:20: in __init__
    analysis.compute_lalr()
.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:332: in compute_lalr
    self.compute_lalr1_states()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <lark.parsers.lalr_analysis.LALR_Analyzer object at 0x1057b4050>

    def compute_lalr1_states(self) -> None:
        m: Dict[LR0ItemSet, Dict[str, Tuple]] = {}
        reduce_reduce = []
        for itemset in self.lr0_itemsets:
            actions: Dict[Symbol, Tuple] = {la: (Shift, next_state.closure)
                                                      for la, next_state in itemset.transitions.items()}
            for la, rules in itemset.lookaheads.items():
                if len(rules) > 1:
                    # Try to resolve conflict based on priority
                    p = [(r.options.priority or 0, r) for r in rules]
                    p.sort(key=lambda r: r[0], reverse=True)
                    best, second_best = p[:2]
                    if best[0] > second_best[0]:
                        rules = {best[1]}
                    else:
                        reduce_reduce.append((itemset, la, rules))
                        continue
    
                rule ,= rules
                if la in actions:
                    if self.strict:
                        raise GrammarError(f"Shift/Reduce conflict for terminal {la.name}. [strict-mode]\n ")
                    elif self.debug:
                        logger.warning('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.warning(' * %s', rule)
                    else:
                        logger.debug('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.debug(' * %s', rule)
                else:
                    actions[la] = (Reduce, rule)
            m[itemset] = { k.name: v for k, v in actions.items() }
    
        if reduce_reduce:
            msgs = []
            for itemset, la, rules in reduce_reduce:
                msg = 'Reduce/Reduce collision in %s between the following rules: %s' % (la, ''.join([ '\n\t- ' + str(r) for r in rules ]))
                if self.debug:
                    msg += '\n    collision occurred in state: {%s\n    }' % ''.join(['\n\t' + str(x) for x in itemset.closure])
                msgs.append(msg)
>           raise GrammarError('\n\n'.join(msgs))
E           lark.exceptions.GrammarError: Reduce/Reduce collision in Terminal('NAME') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RBRACE') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>

.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:306: GrammarError
_____________________________ test_semantic_errors _____________________________

    def test_semantic_errors():
        """Test semantic error detection."""
        content = """
        node test_node {
            parameter test_param: 42
            parameter test_param: 43  // Duplicate parameter name
        }
        """
    
        with pytest.raises(SemanticError) as exc_info:
>           parse_robodsl(content)

tests/test_lark_parser.py:193: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/robodsl/parser/lark_parser.py:115: in parse_robodsl
    _parser = RoboDSLParser()
              ^^^^^^^^^^^^^^^
src/robodsl/parser/lark_parser.py:27: in __init__
    self.parser = Lark(grammar_content, parser='lalr', start='start')
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:439: in __init__
    self.parser = self._build_parser()
                  ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:485: in _build_parser
    return _construct_parsing_frontend(
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:257: in _construct_parsing_frontend
    return ParsingFrontend(lexer_conf, parser_conf, options)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:61: in __init__
    self.parser = create_parser(lexer_conf, parser_conf, options)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:161: in create_lalr_parser
    return cls(parser_conf, debug=debug, strict=strict)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parsers/lalr_parser.py:20: in __init__
    analysis.compute_lalr()
.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:332: in compute_lalr
    self.compute_lalr1_states()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <lark.parsers.lalr_analysis.LALR_Analyzer object at 0x105b09c50>

    def compute_lalr1_states(self) -> None:
        m: Dict[LR0ItemSet, Dict[str, Tuple]] = {}
        reduce_reduce = []
        for itemset in self.lr0_itemsets:
            actions: Dict[Symbol, Tuple] = {la: (Shift, next_state.closure)
                                                      for la, next_state in itemset.transitions.items()}
            for la, rules in itemset.lookaheads.items():
                if len(rules) > 1:
                    # Try to resolve conflict based on priority
                    p = [(r.options.priority or 0, r) for r in rules]
                    p.sort(key=lambda r: r[0], reverse=True)
                    best, second_best = p[:2]
                    if best[0] > second_best[0]:
                        rules = {best[1]}
                    else:
                        reduce_reduce.append((itemset, la, rules))
                        continue
    
                rule ,= rules
                if la in actions:
                    if self.strict:
                        raise GrammarError(f"Shift/Reduce conflict for terminal {la.name}. [strict-mode]\n ")
                    elif self.debug:
                        logger.warning('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.warning(' * %s', rule)
                    else:
                        logger.debug('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.debug(' * %s', rule)
                else:
                    actions[la] = (Reduce, rule)
            m[itemset] = { k.name: v for k, v in actions.items() }
    
        if reduce_reduce:
            msgs = []
            for itemset, la, rules in reduce_reduce:
                msg = 'Reduce/Reduce collision in %s between the following rules: %s' % (la, ''.join([ '\n\t- ' + str(r) for r in rules ]))
                if self.debug:
                    msg += '\n    collision occurred in state: {%s\n    }' % ''.join(['\n\t' + str(x) for x in itemset.closure])
                msgs.append(msg)
>           raise GrammarError('\n\n'.join(msgs))
E           lark.exceptions.GrammarError: Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('NAME') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RBRACE') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>

.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:306: GrammarError
______________________________ test_parse_errors _______________________________

    def test_parse_errors():
        """Test parse error handling."""
        content = """
        node test_node {
            parameter test_param: 42
            invalid_syntax_here
        }
        """
    
        with pytest.raises(ParseError):
>           parse_robodsl(content)

tests/test_lark_parser.py:208: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/robodsl/parser/lark_parser.py:115: in parse_robodsl
    _parser = RoboDSLParser()
              ^^^^^^^^^^^^^^^
src/robodsl/parser/lark_parser.py:27: in __init__
    self.parser = Lark(grammar_content, parser='lalr', start='start')
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:439: in __init__
    self.parser = self._build_parser()
                  ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:485: in _build_parser
    return _construct_parsing_frontend(
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:257: in _construct_parsing_frontend
    return ParsingFrontend(lexer_conf, parser_conf, options)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:61: in __init__
    self.parser = create_parser(lexer_conf, parser_conf, options)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:161: in create_lalr_parser
    return cls(parser_conf, debug=debug, strict=strict)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parsers/lalr_parser.py:20: in __init__
    analysis.compute_lalr()
.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:332: in compute_lalr
    self.compute_lalr1_states()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <lark.parsers.lalr_analysis.LALR_Analyzer object at 0x10558c4b0>

    def compute_lalr1_states(self) -> None:
        m: Dict[LR0ItemSet, Dict[str, Tuple]] = {}
        reduce_reduce = []
        for itemset in self.lr0_itemsets:
            actions: Dict[Symbol, Tuple] = {la: (Shift, next_state.closure)
                                                      for la, next_state in itemset.transitions.items()}
            for la, rules in itemset.lookaheads.items():
                if len(rules) > 1:
                    # Try to resolve conflict based on priority
                    p = [(r.options.priority or 0, r) for r in rules]
                    p.sort(key=lambda r: r[0], reverse=True)
                    best, second_best = p[:2]
                    if best[0] > second_best[0]:
                        rules = {best[1]}
                    else:
                        reduce_reduce.append((itemset, la, rules))
                        continue
    
                rule ,= rules
                if la in actions:
                    if self.strict:
                        raise GrammarError(f"Shift/Reduce conflict for terminal {la.name}. [strict-mode]\n ")
                    elif self.debug:
                        logger.warning('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.warning(' * %s', rule)
                    else:
                        logger.debug('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.debug(' * %s', rule)
                else:
                    actions[la] = (Reduce, rule)
            m[itemset] = { k.name: v for k, v in actions.items() }
    
        if reduce_reduce:
            msgs = []
            for itemset, la, rules in reduce_reduce:
                msg = 'Reduce/Reduce collision in %s between the following rules: %s' % (la, ''.join([ '\n\t- ' + str(r) for r in rules ]))
                if self.debug:
                    msg += '\n    collision occurred in state: {%s\n    }' % ''.join(['\n\t' + str(x) for x in itemset.closure])
                msgs.append(msg)
>           raise GrammarError('\n\n'.join(msgs))
E           lark.exceptions.GrammarError: Reduce/Reduce collision in Terminal('NAME') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RBRACE') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>

.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:306: GrammarError
___________________________ test_complex_value_types ___________________________

    def test_complex_value_types():
        """Test complex value types (arrays, nested dicts)."""
        content = """
        node test_node {
            parameter int_array: [1, 2, 3, 4, 5]
            parameter float_array: [1.0, 2.5, 3.14]
            parameter string_array: ["hello", "world"]
            parameter nested_dict: {
                key1: "value1",
                key2: 42,
                key3: true
            }
        }
        """
    
>       ast = parse_robodsl(content)
              ^^^^^^^^^^^^^^^^^^^^^^

tests/test_lark_parser.py:226: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/robodsl/parser/lark_parser.py:115: in parse_robodsl
    _parser = RoboDSLParser()
              ^^^^^^^^^^^^^^^
src/robodsl/parser/lark_parser.py:27: in __init__
    self.parser = Lark(grammar_content, parser='lalr', start='start')
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:439: in __init__
    self.parser = self._build_parser()
                  ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:485: in _build_parser
    return _construct_parsing_frontend(
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:257: in _construct_parsing_frontend
    return ParsingFrontend(lexer_conf, parser_conf, options)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:61: in __init__
    self.parser = create_parser(lexer_conf, parser_conf, options)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:161: in create_lalr_parser
    return cls(parser_conf, debug=debug, strict=strict)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parsers/lalr_parser.py:20: in __init__
    analysis.compute_lalr()
.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:332: in compute_lalr
    self.compute_lalr1_states()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <lark.parsers.lalr_analysis.LALR_Analyzer object at 0x1058f9710>

    def compute_lalr1_states(self) -> None:
        m: Dict[LR0ItemSet, Dict[str, Tuple]] = {}
        reduce_reduce = []
        for itemset in self.lr0_itemsets:
            actions: Dict[Symbol, Tuple] = {la: (Shift, next_state.closure)
                                                      for la, next_state in itemset.transitions.items()}
            for la, rules in itemset.lookaheads.items():
                if len(rules) > 1:
                    # Try to resolve conflict based on priority
                    p = [(r.options.priority or 0, r) for r in rules]
                    p.sort(key=lambda r: r[0], reverse=True)
                    best, second_best = p[:2]
                    if best[0] > second_best[0]:
                        rules = {best[1]}
                    else:
                        reduce_reduce.append((itemset, la, rules))
                        continue
    
                rule ,= rules
                if la in actions:
                    if self.strict:
                        raise GrammarError(f"Shift/Reduce conflict for terminal {la.name}. [strict-mode]\n ")
                    elif self.debug:
                        logger.warning('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.warning(' * %s', rule)
                    else:
                        logger.debug('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.debug(' * %s', rule)
                else:
                    actions[la] = (Reduce, rule)
            m[itemset] = { k.name: v for k, v in actions.items() }
    
        if reduce_reduce:
            msgs = []
            for itemset, la, rules in reduce_reduce:
                msg = 'Reduce/Reduce collision in %s between the following rules: %s' % (la, ''.join([ '\n\t- ' + str(r) for r in rules ]))
                if self.debug:
                    msg += '\n    collision occurred in state: {%s\n    }' % ''.join(['\n\t' + str(x) for x in itemset.closure])
                msgs.append(msg)
>           raise GrammarError('\n\n'.join(msgs))
E           lark.exceptions.GrammarError: Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('NAME') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RBRACE') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>

.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:306: GrammarError
________________________________ test_remapping ________________________________

    def test_remapping():
        """Test topic remapping."""
        content = """
        node test_node {
            remap from: /original_topic to: /new_topic
            subscriber /original_topic : "std_msgs/String"
        }
        """
    
>       ast = parse_robodsl(content)
              ^^^^^^^^^^^^^^^^^^^^^^

tests/test_lark_parser.py:252: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/robodsl/parser/lark_parser.py:115: in parse_robodsl
    _parser = RoboDSLParser()
              ^^^^^^^^^^^^^^^
src/robodsl/parser/lark_parser.py:27: in __init__
    self.parser = Lark(grammar_content, parser='lalr', start='start')
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:439: in __init__
    self.parser = self._build_parser()
                  ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:485: in _build_parser
    return _construct_parsing_frontend(
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:257: in _construct_parsing_frontend
    return ParsingFrontend(lexer_conf, parser_conf, options)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:61: in __init__
    self.parser = create_parser(lexer_conf, parser_conf, options)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:161: in create_lalr_parser
    return cls(parser_conf, debug=debug, strict=strict)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parsers/lalr_parser.py:20: in __init__
    analysis.compute_lalr()
.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:332: in compute_lalr
    self.compute_lalr1_states()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <lark.parsers.lalr_analysis.LALR_Analyzer object at 0x1037a3d90>

    def compute_lalr1_states(self) -> None:
        m: Dict[LR0ItemSet, Dict[str, Tuple]] = {}
        reduce_reduce = []
        for itemset in self.lr0_itemsets:
            actions: Dict[Symbol, Tuple] = {la: (Shift, next_state.closure)
                                                      for la, next_state in itemset.transitions.items()}
            for la, rules in itemset.lookaheads.items():
                if len(rules) > 1:
                    # Try to resolve conflict based on priority
                    p = [(r.options.priority or 0, r) for r in rules]
                    p.sort(key=lambda r: r[0], reverse=True)
                    best, second_best = p[:2]
                    if best[0] > second_best[0]:
                        rules = {best[1]}
                    else:
                        reduce_reduce.append((itemset, la, rules))
                        continue
    
                rule ,= rules
                if la in actions:
                    if self.strict:
                        raise GrammarError(f"Shift/Reduce conflict for terminal {la.name}. [strict-mode]\n ")
                    elif self.debug:
                        logger.warning('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.warning(' * %s', rule)
                    else:
                        logger.debug('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.debug(' * %s', rule)
                else:
                    actions[la] = (Reduce, rule)
            m[itemset] = { k.name: v for k, v in actions.items() }
    
        if reduce_reduce:
            msgs = []
            for itemset, la, rules in reduce_reduce:
                msg = 'Reduce/Reduce collision in %s between the following rules: %s' % (la, ''.join([ '\n\t- ' + str(r) for r in rules ]))
                if self.debug:
                    msg += '\n    collision occurred in state: {%s\n    }' % ''.join(['\n\t' + str(x) for x in itemset.closure])
                msgs.append(msg)
>           raise GrammarError('\n\n'.join(msgs))
E           lark.exceptions.GrammarError: Reduce/Reduce collision in Terminal('NAME') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RBRACE') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>

.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:306: GrammarError
________________________________ test_namespace ________________________________

    def test_namespace():
        """Test namespace configuration."""
        content = """
        node test_node {
            namespace : /my/namespace
            parameter test_param: 42
        }
        """
    
>       ast = parse_robodsl(content)
              ^^^^^^^^^^^^^^^^^^^^^^

tests/test_lark_parser.py:271: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/robodsl/parser/lark_parser.py:115: in parse_robodsl
    _parser = RoboDSLParser()
              ^^^^^^^^^^^^^^^
src/robodsl/parser/lark_parser.py:27: in __init__
    self.parser = Lark(grammar_content, parser='lalr', start='start')
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:439: in __init__
    self.parser = self._build_parser()
                  ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:485: in _build_parser
    return _construct_parsing_frontend(
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:257: in _construct_parsing_frontend
    return ParsingFrontend(lexer_conf, parser_conf, options)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:61: in __init__
    self.parser = create_parser(lexer_conf, parser_conf, options)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:161: in create_lalr_parser
    return cls(parser_conf, debug=debug, strict=strict)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parsers/lalr_parser.py:20: in __init__
    analysis.compute_lalr()
.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:332: in compute_lalr
    self.compute_lalr1_states()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <lark.parsers.lalr_analysis.LALR_Analyzer object at 0x105c57a10>

    def compute_lalr1_states(self) -> None:
        m: Dict[LR0ItemSet, Dict[str, Tuple]] = {}
        reduce_reduce = []
        for itemset in self.lr0_itemsets:
            actions: Dict[Symbol, Tuple] = {la: (Shift, next_state.closure)
                                                      for la, next_state in itemset.transitions.items()}
            for la, rules in itemset.lookaheads.items():
                if len(rules) > 1:
                    # Try to resolve conflict based on priority
                    p = [(r.options.priority or 0, r) for r in rules]
                    p.sort(key=lambda r: r[0], reverse=True)
                    best, second_best = p[:2]
                    if best[0] > second_best[0]:
                        rules = {best[1]}
                    else:
                        reduce_reduce.append((itemset, la, rules))
                        continue
    
                rule ,= rules
                if la in actions:
                    if self.strict:
                        raise GrammarError(f"Shift/Reduce conflict for terminal {la.name}. [strict-mode]\n ")
                    elif self.debug:
                        logger.warning('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.warning(' * %s', rule)
                    else:
                        logger.debug('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.debug(' * %s', rule)
                else:
                    actions[la] = (Reduce, rule)
            m[itemset] = { k.name: v for k, v in actions.items() }
    
        if reduce_reduce:
            msgs = []
            for itemset, la, rules in reduce_reduce:
                msg = 'Reduce/Reduce collision in %s between the following rules: %s' % (la, ''.join([ '\n\t- ' + str(r) for r in rules ]))
                if self.debug:
                    msg += '\n    collision occurred in state: {%s\n    }' % ''.join(['\n\t' + str(x) for x in itemset.closure])
                msgs.append(msg)
>           raise GrammarError('\n\n'.join(msgs))
E           lark.exceptions.GrammarError: Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('NAME') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RBRACE') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>

.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:306: GrammarError
___________________________ test_cpp_method_parsing ____________________________

    def test_cpp_method_parsing():
        """Test basic C++ method parsing (legacy syntax)."""
        content = """
    node test_node {
        method do_something {
            code: "int x = 42;\nstd::cout << x << std::endl;"
        }
    }
    """
    
>       ast = parse_robodsl(content)
              ^^^^^^^^^^^^^^^^^^^^^^

tests/test_lark_parser.py:289: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/robodsl/parser/lark_parser.py:115: in parse_robodsl
    _parser = RoboDSLParser()
              ^^^^^^^^^^^^^^^
src/robodsl/parser/lark_parser.py:27: in __init__
    self.parser = Lark(grammar_content, parser='lalr', start='start')
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:439: in __init__
    self.parser = self._build_parser()
                  ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:485: in _build_parser
    return _construct_parsing_frontend(
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:257: in _construct_parsing_frontend
    return ParsingFrontend(lexer_conf, parser_conf, options)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:61: in __init__
    self.parser = create_parser(lexer_conf, parser_conf, options)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:161: in create_lalr_parser
    return cls(parser_conf, debug=debug, strict=strict)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parsers/lalr_parser.py:20: in __init__
    analysis.compute_lalr()
.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:332: in compute_lalr
    self.compute_lalr1_states()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <lark.parsers.lalr_analysis.LALR_Analyzer object at 0x105dfb3f0>

    def compute_lalr1_states(self) -> None:
        m: Dict[LR0ItemSet, Dict[str, Tuple]] = {}
        reduce_reduce = []
        for itemset in self.lr0_itemsets:
            actions: Dict[Symbol, Tuple] = {la: (Shift, next_state.closure)
                                                      for la, next_state in itemset.transitions.items()}
            for la, rules in itemset.lookaheads.items():
                if len(rules) > 1:
                    # Try to resolve conflict based on priority
                    p = [(r.options.priority or 0, r) for r in rules]
                    p.sort(key=lambda r: r[0], reverse=True)
                    best, second_best = p[:2]
                    if best[0] > second_best[0]:
                        rules = {best[1]}
                    else:
                        reduce_reduce.append((itemset, la, rules))
                        continue
    
                rule ,= rules
                if la in actions:
                    if self.strict:
                        raise GrammarError(f"Shift/Reduce conflict for terminal {la.name}. [strict-mode]\n ")
                    elif self.debug:
                        logger.warning('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.warning(' * %s', rule)
                    else:
                        logger.debug('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.debug(' * %s', rule)
                else:
                    actions[la] = (Reduce, rule)
            m[itemset] = { k.name: v for k, v in actions.items() }
    
        if reduce_reduce:
            msgs = []
            for itemset, la, rules in reduce_reduce:
                msg = 'Reduce/Reduce collision in %s between the following rules: %s' % (la, ''.join([ '\n\t- ' + str(r) for r in rules ]))
                if self.debug:
                    msg += '\n    collision occurred in state: {%s\n    }' % ''.join(['\n\t' + str(x) for x in itemset.closure])
                msgs.append(msg)
>           raise GrammarError('\n\n'.join(msgs))
E           lark.exceptions.GrammarError: Reduce/Reduce collision in Terminal('NAME') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RBRACE') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>

.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:306: GrammarError
_________________________ test_node_with_cuda_kernels __________________________

    def test_node_with_cuda_kernels():
        """Test parsing a node with CUDA kernels inside it."""
        content = """
        node processing_node {
            parameter input_size: 1024
            parameter output_size: 1024
    
            publisher /processed_data : "std_msgs/msg/Float32MultiArray"
            subscriber /raw_data : "std_msgs/msg/Float32MultiArray"
    
            kernel process_kernel {
                block_size: (256, 1, 1)
                grid_size: (4, 1, 1)
                shared_memory: 1024
                use_thrust: true
                param in float input_data (size)
                param out float output_data (size)
            }
    
            kernel filter_kernel {
                block_size: (128, 1, 1)
                grid_size: (8, 1, 1)
                shared_memory: 512
                use_thrust: false
                param in float data (width, height)
                param out float filtered_data (width, height)
            }
        }
        """
    
>       ast = parse_robodsl(content)
              ^^^^^^^^^^^^^^^^^^^^^^

tests/test_lark_parser.py:332: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/robodsl/parser/lark_parser.py:115: in parse_robodsl
    _parser = RoboDSLParser()
              ^^^^^^^^^^^^^^^
src/robodsl/parser/lark_parser.py:27: in __init__
    self.parser = Lark(grammar_content, parser='lalr', start='start')
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:439: in __init__
    self.parser = self._build_parser()
                  ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:485: in _build_parser
    return _construct_parsing_frontend(
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:257: in _construct_parsing_frontend
    return ParsingFrontend(lexer_conf, parser_conf, options)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:61: in __init__
    self.parser = create_parser(lexer_conf, parser_conf, options)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:161: in create_lalr_parser
    return cls(parser_conf, debug=debug, strict=strict)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parsers/lalr_parser.py:20: in __init__
    analysis.compute_lalr()
.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:332: in compute_lalr
    self.compute_lalr1_states()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <lark.parsers.lalr_analysis.LALR_Analyzer object at 0x1053c0050>

    def compute_lalr1_states(self) -> None:
        m: Dict[LR0ItemSet, Dict[str, Tuple]] = {}
        reduce_reduce = []
        for itemset in self.lr0_itemsets:
            actions: Dict[Symbol, Tuple] = {la: (Shift, next_state.closure)
                                                      for la, next_state in itemset.transitions.items()}
            for la, rules in itemset.lookaheads.items():
                if len(rules) > 1:
                    # Try to resolve conflict based on priority
                    p = [(r.options.priority or 0, r) for r in rules]
                    p.sort(key=lambda r: r[0], reverse=True)
                    best, second_best = p[:2]
                    if best[0] > second_best[0]:
                        rules = {best[1]}
                    else:
                        reduce_reduce.append((itemset, la, rules))
                        continue
    
                rule ,= rules
                if la in actions:
                    if self.strict:
                        raise GrammarError(f"Shift/Reduce conflict for terminal {la.name}. [strict-mode]\n ")
                    elif self.debug:
                        logger.warning('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.warning(' * %s', rule)
                    else:
                        logger.debug('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.debug(' * %s', rule)
                else:
                    actions[la] = (Reduce, rule)
            m[itemset] = { k.name: v for k, v in actions.items() }
    
        if reduce_reduce:
            msgs = []
            for itemset, la, rules in reduce_reduce:
                msg = 'Reduce/Reduce collision in %s between the following rules: %s' % (la, ''.join([ '\n\t- ' + str(r) for r in rules ]))
                if self.debug:
                    msg += '\n    collision occurred in state: {%s\n    }' % ''.join(['\n\t' + str(x) for x in itemset.closure])
                msgs.append(msg)
>           raise GrammarError('\n\n'.join(msgs))
E           lark.exceptions.GrammarError: Reduce/Reduce collision in Terminal('NAME') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RBRACE') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>

.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:306: GrammarError
_______________________ test_enhanced_cpp_method_parsing _______________________

    def test_enhanced_cpp_method_parsing():
        """Test enhanced C++ method parsing with input/output parameters.
        NOTE: Pointer types must be written with a space, e.g., 'float * input_data', not 'float* input_data'.
        """
        config = """
    node test_node {
        method process_data {
            input: int data_size
            input: float * input_data (data_size)
            output: float * output_data (data_size)
            code: "for (int i = 0; i < data_size; i++) { output_data[i] = input_data[i] * 2.0f; }"
        }
    
        method calculate_stats {
            input: std::vector<float> values
            output: float mean
            output: float variance
            code: "float sum = 0.0f; for (auto v : values) sum += v; mean = sum / values.size();"
        }
    }
    """
    
>       ast = parse_robodsl(config)
              ^^^^^^^^^^^^^^^^^^^^^

tests/test_lark_parser.py:387: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/robodsl/parser/lark_parser.py:115: in parse_robodsl
    _parser = RoboDSLParser()
              ^^^^^^^^^^^^^^^
src/robodsl/parser/lark_parser.py:27: in __init__
    self.parser = Lark(grammar_content, parser='lalr', start='start')
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:439: in __init__
    self.parser = self._build_parser()
                  ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:485: in _build_parser
    return _construct_parsing_frontend(
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:257: in _construct_parsing_frontend
    return ParsingFrontend(lexer_conf, parser_conf, options)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:61: in __init__
    self.parser = create_parser(lexer_conf, parser_conf, options)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:161: in create_lalr_parser
    return cls(parser_conf, debug=debug, strict=strict)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parsers/lalr_parser.py:20: in __init__
    analysis.compute_lalr()
.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:332: in compute_lalr
    self.compute_lalr1_states()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <lark.parsers.lalr_analysis.LALR_Analyzer object at 0x105d5bd90>

    def compute_lalr1_states(self) -> None:
        m: Dict[LR0ItemSet, Dict[str, Tuple]] = {}
        reduce_reduce = []
        for itemset in self.lr0_itemsets:
            actions: Dict[Symbol, Tuple] = {la: (Shift, next_state.closure)
                                                      for la, next_state in itemset.transitions.items()}
            for la, rules in itemset.lookaheads.items():
                if len(rules) > 1:
                    # Try to resolve conflict based on priority
                    p = [(r.options.priority or 0, r) for r in rules]
                    p.sort(key=lambda r: r[0], reverse=True)
                    best, second_best = p[:2]
                    if best[0] > second_best[0]:
                        rules = {best[1]}
                    else:
                        reduce_reduce.append((itemset, la, rules))
                        continue
    
                rule ,= rules
                if la in actions:
                    if self.strict:
                        raise GrammarError(f"Shift/Reduce conflict for terminal {la.name}. [strict-mode]\n ")
                    elif self.debug:
                        logger.warning('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.warning(' * %s', rule)
                    else:
                        logger.debug('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.debug(' * %s', rule)
                else:
                    actions[la] = (Reduce, rule)
            m[itemset] = { k.name: v for k, v in actions.items() }
    
        if reduce_reduce:
            msgs = []
            for itemset, la, rules in reduce_reduce:
                msg = 'Reduce/Reduce collision in %s between the following rules: %s' % (la, ''.join([ '\n\t- ' + str(r) for r in rules ]))
                if self.debug:
                    msg += '\n    collision occurred in state: {%s\n    }' % ''.join(['\n\t' + str(x) for x in itemset.closure])
                msgs.append(msg)
>           raise GrammarError('\n\n'.join(msgs))
E           lark.exceptions.GrammarError: Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('NAME') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RBRACE') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>

.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:306: GrammarError
_________________ test_enhanced_cpp_method_semantic_validation _________________

    def test_enhanced_cpp_method_semantic_validation():
        """Test semantic validation of enhanced C++ methods."""
        config = """
    node test_node {
        method valid_method {
            input: int data_size
            output: float result
            code: "result = data_size * 2.0f;"
        }
    
        method duplicate_input {
            input: int data_size
            input: int data_size  // Duplicate name
            output: float result
            code: "result = data_size * 2.0f;"
        }
    
        method input_output_conflict {
            input: int data_size
            output: int data_size  // Conflict with input
            code: "data_size = 42;"
        }
    }
    """
    
>       ast = parse_robodsl(config)
              ^^^^^^^^^^^^^^^^^^^^^

tests/test_lark_parser.py:468: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/robodsl/parser/lark_parser.py:115: in parse_robodsl
    _parser = RoboDSLParser()
              ^^^^^^^^^^^^^^^
src/robodsl/parser/lark_parser.py:27: in __init__
    self.parser = Lark(grammar_content, parser='lalr', start='start')
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:439: in __init__
    self.parser = self._build_parser()
                  ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:485: in _build_parser
    return _construct_parsing_frontend(
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:257: in _construct_parsing_frontend
    return ParsingFrontend(lexer_conf, parser_conf, options)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:61: in __init__
    self.parser = create_parser(lexer_conf, parser_conf, options)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:161: in create_lalr_parser
    return cls(parser_conf, debug=debug, strict=strict)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parsers/lalr_parser.py:20: in __init__
    analysis.compute_lalr()
.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:332: in compute_lalr
    self.compute_lalr1_states()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <lark.parsers.lalr_analysis.LALR_Analyzer object at 0x105b0fe70>

    def compute_lalr1_states(self) -> None:
        m: Dict[LR0ItemSet, Dict[str, Tuple]] = {}
        reduce_reduce = []
        for itemset in self.lr0_itemsets:
            actions: Dict[Symbol, Tuple] = {la: (Shift, next_state.closure)
                                                      for la, next_state in itemset.transitions.items()}
            for la, rules in itemset.lookaheads.items():
                if len(rules) > 1:
                    # Try to resolve conflict based on priority
                    p = [(r.options.priority or 0, r) for r in rules]
                    p.sort(key=lambda r: r[0], reverse=True)
                    best, second_best = p[:2]
                    if best[0] > second_best[0]:
                        rules = {best[1]}
                    else:
                        reduce_reduce.append((itemset, la, rules))
                        continue
    
                rule ,= rules
                if la in actions:
                    if self.strict:
                        raise GrammarError(f"Shift/Reduce conflict for terminal {la.name}. [strict-mode]\n ")
                    elif self.debug:
                        logger.warning('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.warning(' * %s', rule)
                    else:
                        logger.debug('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.debug(' * %s', rule)
                else:
                    actions[la] = (Reduce, rule)
            m[itemset] = { k.name: v for k, v in actions.items() }
    
        if reduce_reduce:
            msgs = []
            for itemset, la, rules in reduce_reduce:
                msg = 'Reduce/Reduce collision in %s between the following rules: %s' % (la, ''.join([ '\n\t- ' + str(r) for r in rules ]))
                if self.debug:
                    msg += '\n    collision occurred in state: {%s\n    }' % ''.join(['\n\t' + str(x) for x in itemset.closure])
                msgs.append(msg)
>           raise GrammarError('\n\n'.join(msgs))
E           lark.exceptions.GrammarError: Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('NAME') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RBRACE') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>

.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:306: GrammarError
___________________________ test_parse_empty_config ____________________________

    def test_parse_empty_config():
        """Test parsing an empty configuration."""
>       ast = parse_robodsl("")
              ^^^^^^^^^^^^^^^^^

tests/test_parser.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/robodsl/parser/lark_parser.py:115: in parse_robodsl
    _parser = RoboDSLParser()
              ^^^^^^^^^^^^^^^
src/robodsl/parser/lark_parser.py:27: in __init__
    self.parser = Lark(grammar_content, parser='lalr', start='start')
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:439: in __init__
    self.parser = self._build_parser()
                  ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:485: in _build_parser
    return _construct_parsing_frontend(
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:257: in _construct_parsing_frontend
    return ParsingFrontend(lexer_conf, parser_conf, options)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:61: in __init__
    self.parser = create_parser(lexer_conf, parser_conf, options)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:161: in create_lalr_parser
    return cls(parser_conf, debug=debug, strict=strict)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parsers/lalr_parser.py:20: in __init__
    analysis.compute_lalr()
.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:332: in compute_lalr
    self.compute_lalr1_states()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <lark.parsers.lalr_analysis.LALR_Analyzer object at 0x10544eeb0>

    def compute_lalr1_states(self) -> None:
        m: Dict[LR0ItemSet, Dict[str, Tuple]] = {}
        reduce_reduce = []
        for itemset in self.lr0_itemsets:
            actions: Dict[Symbol, Tuple] = {la: (Shift, next_state.closure)
                                                      for la, next_state in itemset.transitions.items()}
            for la, rules in itemset.lookaheads.items():
                if len(rules) > 1:
                    # Try to resolve conflict based on priority
                    p = [(r.options.priority or 0, r) for r in rules]
                    p.sort(key=lambda r: r[0], reverse=True)
                    best, second_best = p[:2]
                    if best[0] > second_best[0]:
                        rules = {best[1]}
                    else:
                        reduce_reduce.append((itemset, la, rules))
                        continue
    
                rule ,= rules
                if la in actions:
                    if self.strict:
                        raise GrammarError(f"Shift/Reduce conflict for terminal {la.name}. [strict-mode]\n ")
                    elif self.debug:
                        logger.warning('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.warning(' * %s', rule)
                    else:
                        logger.debug('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.debug(' * %s', rule)
                else:
                    actions[la] = (Reduce, rule)
            m[itemset] = { k.name: v for k, v in actions.items() }
    
        if reduce_reduce:
            msgs = []
            for itemset, la, rules in reduce_reduce:
                msg = 'Reduce/Reduce collision in %s between the following rules: %s' % (la, ''.join([ '\n\t- ' + str(r) for r in rules ]))
                if self.debug:
                    msg += '\n    collision occurred in state: {%s\n    }' % ''.join(['\n\t' + str(x) for x in itemset.closure])
                msgs.append(msg)
>           raise GrammarError('\n\n'.join(msgs))
E           lark.exceptions.GrammarError: Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('NAME') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RBRACE') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>

.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:306: GrammarError
________________________ test_parse_node_with_publisher ________________________

    def test_parse_node_with_publisher():
        """Test parsing a node with a publisher."""
>       ast = parse_robodsl("""
        node test_node {
            publisher /camera/image_raw: "sensor_msgs/msg/Image"
        }
        """)

tests/test_parser.py:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/robodsl/parser/lark_parser.py:115: in parse_robodsl
    _parser = RoboDSLParser()
              ^^^^^^^^^^^^^^^
src/robodsl/parser/lark_parser.py:27: in __init__
    self.parser = Lark(grammar_content, parser='lalr', start='start')
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:439: in __init__
    self.parser = self._build_parser()
                  ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:485: in _build_parser
    return _construct_parsing_frontend(
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:257: in _construct_parsing_frontend
    return ParsingFrontend(lexer_conf, parser_conf, options)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:61: in __init__
    self.parser = create_parser(lexer_conf, parser_conf, options)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:161: in create_lalr_parser
    return cls(parser_conf, debug=debug, strict=strict)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parsers/lalr_parser.py:20: in __init__
    analysis.compute_lalr()
.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:332: in compute_lalr
    self.compute_lalr1_states()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <lark.parsers.lalr_analysis.LALR_Analyzer object at 0x105708050>

    def compute_lalr1_states(self) -> None:
        m: Dict[LR0ItemSet, Dict[str, Tuple]] = {}
        reduce_reduce = []
        for itemset in self.lr0_itemsets:
            actions: Dict[Symbol, Tuple] = {la: (Shift, next_state.closure)
                                                      for la, next_state in itemset.transitions.items()}
            for la, rules in itemset.lookaheads.items():
                if len(rules) > 1:
                    # Try to resolve conflict based on priority
                    p = [(r.options.priority or 0, r) for r in rules]
                    p.sort(key=lambda r: r[0], reverse=True)
                    best, second_best = p[:2]
                    if best[0] > second_best[0]:
                        rules = {best[1]}
                    else:
                        reduce_reduce.append((itemset, la, rules))
                        continue
    
                rule ,= rules
                if la in actions:
                    if self.strict:
                        raise GrammarError(f"Shift/Reduce conflict for terminal {la.name}. [strict-mode]\n ")
                    elif self.debug:
                        logger.warning('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.warning(' * %s', rule)
                    else:
                        logger.debug('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.debug(' * %s', rule)
                else:
                    actions[la] = (Reduce, rule)
            m[itemset] = { k.name: v for k, v in actions.items() }
    
        if reduce_reduce:
            msgs = []
            for itemset, la, rules in reduce_reduce:
                msg = 'Reduce/Reduce collision in %s between the following rules: %s' % (la, ''.join([ '\n\t- ' + str(r) for r in rules ]))
                if self.debug:
                    msg += '\n    collision occurred in state: {%s\n    }' % ''.join(['\n\t' + str(x) for x in itemset.closure])
                msgs.append(msg)
>           raise GrammarError('\n\n'.join(msgs))
E           lark.exceptions.GrammarError: Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('NAME') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RBRACE') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>

.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:306: GrammarError
_______________________ test_parse_node_with_subscriber ________________________

    def test_parse_node_with_subscriber():
        """Test parsing a node with a subscriber."""
>       ast = parse_robodsl("""
        node test_node {
            subscriber /camera/image_raw: "sensor_msgs/msg/Image"
        }
        """)

tests/test_parser.py:37: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/robodsl/parser/lark_parser.py:115: in parse_robodsl
    _parser = RoboDSLParser()
              ^^^^^^^^^^^^^^^
src/robodsl/parser/lark_parser.py:27: in __init__
    self.parser = Lark(grammar_content, parser='lalr', start='start')
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:439: in __init__
    self.parser = self._build_parser()
                  ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:485: in _build_parser
    return _construct_parsing_frontend(
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:257: in _construct_parsing_frontend
    return ParsingFrontend(lexer_conf, parser_conf, options)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:61: in __init__
    self.parser = create_parser(lexer_conf, parser_conf, options)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:161: in create_lalr_parser
    return cls(parser_conf, debug=debug, strict=strict)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parsers/lalr_parser.py:20: in __init__
    analysis.compute_lalr()
.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:332: in compute_lalr
    self.compute_lalr1_states()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <lark.parsers.lalr_analysis.LALR_Analyzer object at 0x1056804b0>

    def compute_lalr1_states(self) -> None:
        m: Dict[LR0ItemSet, Dict[str, Tuple]] = {}
        reduce_reduce = []
        for itemset in self.lr0_itemsets:
            actions: Dict[Symbol, Tuple] = {la: (Shift, next_state.closure)
                                                      for la, next_state in itemset.transitions.items()}
            for la, rules in itemset.lookaheads.items():
                if len(rules) > 1:
                    # Try to resolve conflict based on priority
                    p = [(r.options.priority or 0, r) for r in rules]
                    p.sort(key=lambda r: r[0], reverse=True)
                    best, second_best = p[:2]
                    if best[0] > second_best[0]:
                        rules = {best[1]}
                    else:
                        reduce_reduce.append((itemset, la, rules))
                        continue
    
                rule ,= rules
                if la in actions:
                    if self.strict:
                        raise GrammarError(f"Shift/Reduce conflict for terminal {la.name}. [strict-mode]\n ")
                    elif self.debug:
                        logger.warning('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.warning(' * %s', rule)
                    else:
                        logger.debug('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.debug(' * %s', rule)
                else:
                    actions[la] = (Reduce, rule)
            m[itemset] = { k.name: v for k, v in actions.items() }
    
        if reduce_reduce:
            msgs = []
            for itemset, la, rules in reduce_reduce:
                msg = 'Reduce/Reduce collision in %s between the following rules: %s' % (la, ''.join([ '\n\t- ' + str(r) for r in rules ]))
                if self.debug:
                    msg += '\n    collision occurred in state: {%s\n    }' % ''.join(['\n\t' + str(x) for x in itemset.closure])
                msgs.append(msg)
>           raise GrammarError('\n\n'.join(msgs))
E           lark.exceptions.GrammarError: Reduce/Reduce collision in Terminal('NAME') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RBRACE') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>

.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:306: GrammarError
_________________________ test_parse_node_with_service _________________________

    def test_parse_node_with_service():
        """Test parsing a node with a service."""
>       ast = parse_robodsl("""
        node test_node {
            service /get_status: "std_srvs/srv/Trigger"
        }
        """)

tests/test_parser.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/robodsl/parser/lark_parser.py:115: in parse_robodsl
    _parser = RoboDSLParser()
              ^^^^^^^^^^^^^^^
src/robodsl/parser/lark_parser.py:27: in __init__
    self.parser = Lark(grammar_content, parser='lalr', start='start')
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:439: in __init__
    self.parser = self._build_parser()
                  ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:485: in _build_parser
    return _construct_parsing_frontend(
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:257: in _construct_parsing_frontend
    return ParsingFrontend(lexer_conf, parser_conf, options)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:61: in __init__
    self.parser = create_parser(lexer_conf, parser_conf, options)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:161: in create_lalr_parser
    return cls(parser_conf, debug=debug, strict=strict)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parsers/lalr_parser.py:20: in __init__
    analysis.compute_lalr()
.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:332: in compute_lalr
    self.compute_lalr1_states()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <lark.parsers.lalr_analysis.LALR_Analyzer object at 0x105b297f0>

    def compute_lalr1_states(self) -> None:
        m: Dict[LR0ItemSet, Dict[str, Tuple]] = {}
        reduce_reduce = []
        for itemset in self.lr0_itemsets:
            actions: Dict[Symbol, Tuple] = {la: (Shift, next_state.closure)
                                                      for la, next_state in itemset.transitions.items()}
            for la, rules in itemset.lookaheads.items():
                if len(rules) > 1:
                    # Try to resolve conflict based on priority
                    p = [(r.options.priority or 0, r) for r in rules]
                    p.sort(key=lambda r: r[0], reverse=True)
                    best, second_best = p[:2]
                    if best[0] > second_best[0]:
                        rules = {best[1]}
                    else:
                        reduce_reduce.append((itemset, la, rules))
                        continue
    
                rule ,= rules
                if la in actions:
                    if self.strict:
                        raise GrammarError(f"Shift/Reduce conflict for terminal {la.name}. [strict-mode]\n ")
                    elif self.debug:
                        logger.warning('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.warning(' * %s', rule)
                    else:
                        logger.debug('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.debug(' * %s', rule)
                else:
                    actions[la] = (Reduce, rule)
            m[itemset] = { k.name: v for k, v in actions.items() }
    
        if reduce_reduce:
            msgs = []
            for itemset, la, rules in reduce_reduce:
                msg = 'Reduce/Reduce collision in %s between the following rules: %s' % (la, ''.join([ '\n\t- ' + str(r) for r in rules ]))
                if self.debug:
                    msg += '\n    collision occurred in state: {%s\n    }' % ''.join(['\n\t' + str(x) for x in itemset.closure])
                msgs.append(msg)
>           raise GrammarError('\n\n'.join(msgs))
E           lark.exceptions.GrammarError: Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('NAME') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RBRACE') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>

.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:306: GrammarError
_______________________ test_parse_node_with_parameters ________________________

    def test_parse_node_with_parameters():
        """Test parsing a node with parameters."""
>       ast = parse_robodsl("""
        node test_node {
            parameter camera_fps: 30
            parameter camera_resolution: "640x480"
            parameter enable_debug: true
        }
        """)

tests/test_parser.py:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/robodsl/parser/lark_parser.py:115: in parse_robodsl
    _parser = RoboDSLParser()
              ^^^^^^^^^^^^^^^
src/robodsl/parser/lark_parser.py:27: in __init__
    self.parser = Lark(grammar_content, parser='lalr', start='start')
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:439: in __init__
    self.parser = self._build_parser()
                  ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:485: in _build_parser
    return _construct_parsing_frontend(
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:257: in _construct_parsing_frontend
    return ParsingFrontend(lexer_conf, parser_conf, options)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:61: in __init__
    self.parser = create_parser(lexer_conf, parser_conf, options)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:161: in create_lalr_parser
    return cls(parser_conf, debug=debug, strict=strict)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parsers/lalr_parser.py:20: in __init__
    analysis.compute_lalr()
.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:332: in compute_lalr
    self.compute_lalr1_states()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <lark.parsers.lalr_analysis.LALR_Analyzer object at 0x1037a3d90>

    def compute_lalr1_states(self) -> None:
        m: Dict[LR0ItemSet, Dict[str, Tuple]] = {}
        reduce_reduce = []
        for itemset in self.lr0_itemsets:
            actions: Dict[Symbol, Tuple] = {la: (Shift, next_state.closure)
                                                      for la, next_state in itemset.transitions.items()}
            for la, rules in itemset.lookaheads.items():
                if len(rules) > 1:
                    # Try to resolve conflict based on priority
                    p = [(r.options.priority or 0, r) for r in rules]
                    p.sort(key=lambda r: r[0], reverse=True)
                    best, second_best = p[:2]
                    if best[0] > second_best[0]:
                        rules = {best[1]}
                    else:
                        reduce_reduce.append((itemset, la, rules))
                        continue
    
                rule ,= rules
                if la in actions:
                    if self.strict:
                        raise GrammarError(f"Shift/Reduce conflict for terminal {la.name}. [strict-mode]\n ")
                    elif self.debug:
                        logger.warning('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.warning(' * %s', rule)
                    else:
                        logger.debug('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.debug(' * %s', rule)
                else:
                    actions[la] = (Reduce, rule)
            m[itemset] = { k.name: v for k, v in actions.items() }
    
        if reduce_reduce:
            msgs = []
            for itemset, la, rules in reduce_reduce:
                msg = 'Reduce/Reduce collision in %s between the following rules: %s' % (la, ''.join([ '\n\t- ' + str(r) for r in rules ]))
                if self.debug:
                    msg += '\n    collision occurred in state: {%s\n    }' % ''.join(['\n\t' + str(x) for x in itemset.closure])
                msgs.append(msg)
>           raise GrammarError('\n\n'.join(msgs))
E           lark.exceptions.GrammarError: Reduce/Reduce collision in Terminal('NAME') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RBRACE') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>

.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:306: GrammarError
___________________________ test_parse_node_with_qos ___________________________

    def test_parse_node_with_qos():
        """Test parsing a node with QoS configuration."""
>       ast = parse_robodsl("""
        node test_node {
            publisher /test_topic: "std_msgs/msg/String" {
                qos {
                    reliability: reliable
                    depth: 10
                }
            }
        }
        """)

tests/test_parser.py:96: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/robodsl/parser/lark_parser.py:115: in parse_robodsl
    _parser = RoboDSLParser()
              ^^^^^^^^^^^^^^^
src/robodsl/parser/lark_parser.py:27: in __init__
    self.parser = Lark(grammar_content, parser='lalr', start='start')
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:439: in __init__
    self.parser = self._build_parser()
                  ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:485: in _build_parser
    return _construct_parsing_frontend(
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:257: in _construct_parsing_frontend
    return ParsingFrontend(lexer_conf, parser_conf, options)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:61: in __init__
    self.parser = create_parser(lexer_conf, parser_conf, options)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:161: in create_lalr_parser
    return cls(parser_conf, debug=debug, strict=strict)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parsers/lalr_parser.py:20: in __init__
    analysis.compute_lalr()
.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:332: in compute_lalr
    self.compute_lalr1_states()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <lark.parsers.lalr_analysis.LALR_Analyzer object at 0x105b03cb0>

    def compute_lalr1_states(self) -> None:
        m: Dict[LR0ItemSet, Dict[str, Tuple]] = {}
        reduce_reduce = []
        for itemset in self.lr0_itemsets:
            actions: Dict[Symbol, Tuple] = {la: (Shift, next_state.closure)
                                                      for la, next_state in itemset.transitions.items()}
            for la, rules in itemset.lookaheads.items():
                if len(rules) > 1:
                    # Try to resolve conflict based on priority
                    p = [(r.options.priority or 0, r) for r in rules]
                    p.sort(key=lambda r: r[0], reverse=True)
                    best, second_best = p[:2]
                    if best[0] > second_best[0]:
                        rules = {best[1]}
                    else:
                        reduce_reduce.append((itemset, la, rules))
                        continue
    
                rule ,= rules
                if la in actions:
                    if self.strict:
                        raise GrammarError(f"Shift/Reduce conflict for terminal {la.name}. [strict-mode]\n ")
                    elif self.debug:
                        logger.warning('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.warning(' * %s', rule)
                    else:
                        logger.debug('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.debug(' * %s', rule)
                else:
                    actions[la] = (Reduce, rule)
            m[itemset] = { k.name: v for k, v in actions.items() }
    
        if reduce_reduce:
            msgs = []
            for itemset, la, rules in reduce_reduce:
                msg = 'Reduce/Reduce collision in %s between the following rules: %s' % (la, ''.join([ '\n\t- ' + str(r) for r in rules ]))
                if self.debug:
                    msg += '\n    collision occurred in state: {%s\n    }' % ''.join(['\n\t' + str(x) for x in itemset.closure])
                msgs.append(msg)
>           raise GrammarError('\n\n'.join(msgs))
E           lark.exceptions.GrammarError: Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('NAME') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RBRACE') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>

.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:306: GrammarError
___________________________ test_parse_cuda_kernels ____________________________

    def test_parse_cuda_kernels():
        """Test parsing CUDA kernels."""
>       ast = parse_robodsl("""
        cuda_kernels {
            kernel image_processor {
                param in Image input (width)
                param out Image output (width)
                block_size: (256, 1, 1)
                grid_size: (1, 1, 1)
            }
        }
        """)

tests/test_parser.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/robodsl/parser/lark_parser.py:115: in parse_robodsl
    _parser = RoboDSLParser()
              ^^^^^^^^^^^^^^^
src/robodsl/parser/lark_parser.py:27: in __init__
    self.parser = Lark(grammar_content, parser='lalr', start='start')
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:439: in __init__
    self.parser = self._build_parser()
                  ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:485: in _build_parser
    return _construct_parsing_frontend(
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:257: in _construct_parsing_frontend
    return ParsingFrontend(lexer_conf, parser_conf, options)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:61: in __init__
    self.parser = create_parser(lexer_conf, parser_conf, options)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:161: in create_lalr_parser
    return cls(parser_conf, debug=debug, strict=strict)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parsers/lalr_parser.py:20: in __init__
    analysis.compute_lalr()
.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:332: in compute_lalr
    self.compute_lalr1_states()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <lark.parsers.lalr_analysis.LALR_Analyzer object at 0x1037a3d90>

    def compute_lalr1_states(self) -> None:
        m: Dict[LR0ItemSet, Dict[str, Tuple]] = {}
        reduce_reduce = []
        for itemset in self.lr0_itemsets:
            actions: Dict[Symbol, Tuple] = {la: (Shift, next_state.closure)
                                                      for la, next_state in itemset.transitions.items()}
            for la, rules in itemset.lookaheads.items():
                if len(rules) > 1:
                    # Try to resolve conflict based on priority
                    p = [(r.options.priority or 0, r) for r in rules]
                    p.sort(key=lambda r: r[0], reverse=True)
                    best, second_best = p[:2]
                    if best[0] > second_best[0]:
                        rules = {best[1]}
                    else:
                        reduce_reduce.append((itemset, la, rules))
                        continue
    
                rule ,= rules
                if la in actions:
                    if self.strict:
                        raise GrammarError(f"Shift/Reduce conflict for terminal {la.name}. [strict-mode]\n ")
                    elif self.debug:
                        logger.warning('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.warning(' * %s', rule)
                    else:
                        logger.debug('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.debug(' * %s', rule)
                else:
                    actions[la] = (Reduce, rule)
            m[itemset] = { k.name: v for k, v in actions.items() }
    
        if reduce_reduce:
            msgs = []
            for itemset, la, rules in reduce_reduce:
                msg = 'Reduce/Reduce collision in %s between the following rules: %s' % (la, ''.join([ '\n\t- ' + str(r) for r in rules ]))
                if self.debug:
                    msg += '\n    collision occurred in state: {%s\n    }' % ''.join(['\n\t' + str(x) for x in itemset.closure])
                msgs.append(msg)
>           raise GrammarError('\n\n'.join(msgs))
E           lark.exceptions.GrammarError: Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('NAME') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RBRACE') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>

.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:306: GrammarError
______________________________ test_parse_include ______________________________

    def test_parse_include():
        """Test parsing include statements."""
>       ast = parse_robodsl("""
        include "common_config.robodsl"
        include <system_header.h>
    
        node test_node {
            publisher /test: "std_msgs/msg/String"
        }
        """)

tests/test_parser.py:159: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/robodsl/parser/lark_parser.py:115: in parse_robodsl
    _parser = RoboDSLParser()
              ^^^^^^^^^^^^^^^
src/robodsl/parser/lark_parser.py:27: in __init__
    self.parser = Lark(grammar_content, parser='lalr', start='start')
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:439: in __init__
    self.parser = self._build_parser()
                  ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:485: in _build_parser
    return _construct_parsing_frontend(
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:257: in _construct_parsing_frontend
    return ParsingFrontend(lexer_conf, parser_conf, options)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:61: in __init__
    self.parser = create_parser(lexer_conf, parser_conf, options)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:161: in create_lalr_parser
    return cls(parser_conf, debug=debug, strict=strict)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parsers/lalr_parser.py:20: in __init__
    analysis.compute_lalr()
.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:332: in compute_lalr
    self.compute_lalr1_states()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <lark.parsers.lalr_analysis.LALR_Analyzer object at 0x105b0c050>

    def compute_lalr1_states(self) -> None:
        m: Dict[LR0ItemSet, Dict[str, Tuple]] = {}
        reduce_reduce = []
        for itemset in self.lr0_itemsets:
            actions: Dict[Symbol, Tuple] = {la: (Shift, next_state.closure)
                                                      for la, next_state in itemset.transitions.items()}
            for la, rules in itemset.lookaheads.items():
                if len(rules) > 1:
                    # Try to resolve conflict based on priority
                    p = [(r.options.priority or 0, r) for r in rules]
                    p.sort(key=lambda r: r[0], reverse=True)
                    best, second_best = p[:2]
                    if best[0] > second_best[0]:
                        rules = {best[1]}
                    else:
                        reduce_reduce.append((itemset, la, rules))
                        continue
    
                rule ,= rules
                if la in actions:
                    if self.strict:
                        raise GrammarError(f"Shift/Reduce conflict for terminal {la.name}. [strict-mode]\n ")
                    elif self.debug:
                        logger.warning('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.warning(' * %s', rule)
                    else:
                        logger.debug('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.debug(' * %s', rule)
                else:
                    actions[la] = (Reduce, rule)
            m[itemset] = { k.name: v for k, v in actions.items() }
    
        if reduce_reduce:
            msgs = []
            for itemset, la, rules in reduce_reduce:
                msg = 'Reduce/Reduce collision in %s between the following rules: %s' % (la, ''.join([ '\n\t- ' + str(r) for r in rules ]))
                if self.debug:
                    msg += '\n    collision occurred in state: {%s\n    }' % ''.join(['\n\t' + str(x) for x in itemset.closure])
                msgs.append(msg)
>           raise GrammarError('\n\n'.join(msgs))
E           lark.exceptions.GrammarError: Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('NAME') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RBRACE') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>

.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:306: GrammarError
__________________________ test_parse_complex_config ___________________________

    def test_parse_complex_config():
        """Test parsing a complex configuration with multiple nodes and features."""
>       ast = parse_robodsl("""
        include "common.robodsl"
    
        node camera_node {
            publisher /camera/image_raw: "sensor_msgs/msg/Image" {
                qos {
                    reliability: reliable
                    depth: 5
                }
            }
            parameter fps: 30
            parameter resolution: "1920x1080"
        }
    
        node processor_node {
            subscriber /camera/image_raw: "sensor_msgs/msg/Image"
            publisher /processed/image: "sensor_msgs/msg/Image"
            service /process_image: "image_processing/srv/ProcessImage"
            parameter algorithm: "gaussian_blur"
        }
    
        cuda_kernels {
            kernel image_filter {
                param in Image input (width)
                param out Image output (width)
                param in float kernel_size
                block_size: (256, 1, 1)
                grid_size: (1, 1, 1)
            }
        }
        """)

tests/test_parser.py:176: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/robodsl/parser/lark_parser.py:115: in parse_robodsl
    _parser = RoboDSLParser()
              ^^^^^^^^^^^^^^^
src/robodsl/parser/lark_parser.py:27: in __init__
    self.parser = Lark(grammar_content, parser='lalr', start='start')
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:439: in __init__
    self.parser = self._build_parser()
                  ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:485: in _build_parser
    return _construct_parsing_frontend(
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:257: in _construct_parsing_frontend
    return ParsingFrontend(lexer_conf, parser_conf, options)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:61: in __init__
    self.parser = create_parser(lexer_conf, parser_conf, options)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:161: in create_lalr_parser
    return cls(parser_conf, debug=debug, strict=strict)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parsers/lalr_parser.py:20: in __init__
    analysis.compute_lalr()
.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:332: in compute_lalr
    self.compute_lalr1_states()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <lark.parsers.lalr_analysis.LALR_Analyzer object at 0x105503e70>

    def compute_lalr1_states(self) -> None:
        m: Dict[LR0ItemSet, Dict[str, Tuple]] = {}
        reduce_reduce = []
        for itemset in self.lr0_itemsets:
            actions: Dict[Symbol, Tuple] = {la: (Shift, next_state.closure)
                                                      for la, next_state in itemset.transitions.items()}
            for la, rules in itemset.lookaheads.items():
                if len(rules) > 1:
                    # Try to resolve conflict based on priority
                    p = [(r.options.priority or 0, r) for r in rules]
                    p.sort(key=lambda r: r[0], reverse=True)
                    best, second_best = p[:2]
                    if best[0] > second_best[0]:
                        rules = {best[1]}
                    else:
                        reduce_reduce.append((itemset, la, rules))
                        continue
    
                rule ,= rules
                if la in actions:
                    if self.strict:
                        raise GrammarError(f"Shift/Reduce conflict for terminal {la.name}. [strict-mode]\n ")
                    elif self.debug:
                        logger.warning('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.warning(' * %s', rule)
                    else:
                        logger.debug('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.debug(' * %s', rule)
                else:
                    actions[la] = (Reduce, rule)
            m[itemset] = { k.name: v for k, v in actions.items() }
    
        if reduce_reduce:
            msgs = []
            for itemset, la, rules in reduce_reduce:
                msg = 'Reduce/Reduce collision in %s between the following rules: %s' % (la, ''.join([ '\n\t- ' + str(r) for r in rules ]))
                if self.debug:
                    msg += '\n    collision occurred in state: {%s\n    }' % ''.join(['\n\t' + str(x) for x in itemset.closure])
                msgs.append(msg)
>           raise GrammarError('\n\n'.join(msgs))
E           lark.exceptions.GrammarError: Reduce/Reduce collision in Terminal('NAME') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RBRACE') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>

.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:306: GrammarError
_______________________ test_cross_reference_validation ________________________

    def test_cross_reference_validation():
        """Test cross-reference validation with various scenarios."""
>       from src.robodsl.parser.semantic_analyzer import SemanticAnalyzer, SemanticError
E       ModuleNotFoundError: No module named 'src'

tests/test_parser.py:233: ModuleNotFoundError
___________________________ test_qos_config_parsing ____________________________

    def test_qos_config_parsing():
        """Test parsing of QoS configurations for different entities."""
        dsl_content = """
        node test_node {
            publisher /test_topic: "std_msgs/msg/String" {
                qos {
                    reliability: reliable
                    depth: 10
                }
            }
            subscriber /test_sub: "std_msgs/msg/String" {
                qos {
                    reliability: best_effort
                }
            }
            service /test_srv: "std_srvs/srv/Trigger" {
                qos {
                    reliability: reliable
                }
            }
            action /test_action: "test_msgs/action/Fibonacci" {
                qos {
                    reliability: reliable
                    depth: 5
                }
            }
        }
        """
    
>       ast = parse_robodsl(dsl_content)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_qos_config.py:35: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/robodsl/parser/lark_parser.py:115: in parse_robodsl
    _parser = RoboDSLParser()
              ^^^^^^^^^^^^^^^
src/robodsl/parser/lark_parser.py:27: in __init__
    self.parser = Lark(grammar_content, parser='lalr', start='start')
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:439: in __init__
    self.parser = self._build_parser()
                  ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:485: in _build_parser
    return _construct_parsing_frontend(
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:257: in _construct_parsing_frontend
    return ParsingFrontend(lexer_conf, parser_conf, options)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:61: in __init__
    self.parser = create_parser(lexer_conf, parser_conf, options)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:161: in create_lalr_parser
    return cls(parser_conf, debug=debug, strict=strict)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parsers/lalr_parser.py:20: in __init__
    analysis.compute_lalr()
.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:332: in compute_lalr
    self.compute_lalr1_states()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <lark.parsers.lalr_analysis.LALR_Analyzer object at 0x105d90050>

    def compute_lalr1_states(self) -> None:
        m: Dict[LR0ItemSet, Dict[str, Tuple]] = {}
        reduce_reduce = []
        for itemset in self.lr0_itemsets:
            actions: Dict[Symbol, Tuple] = {la: (Shift, next_state.closure)
                                                      for la, next_state in itemset.transitions.items()}
            for la, rules in itemset.lookaheads.items():
                if len(rules) > 1:
                    # Try to resolve conflict based on priority
                    p = [(r.options.priority or 0, r) for r in rules]
                    p.sort(key=lambda r: r[0], reverse=True)
                    best, second_best = p[:2]
                    if best[0] > second_best[0]:
                        rules = {best[1]}
                    else:
                        reduce_reduce.append((itemset, la, rules))
                        continue
    
                rule ,= rules
                if la in actions:
                    if self.strict:
                        raise GrammarError(f"Shift/Reduce conflict for terminal {la.name}. [strict-mode]\n ")
                    elif self.debug:
                        logger.warning('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.warning(' * %s', rule)
                    else:
                        logger.debug('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.debug(' * %s', rule)
                else:
                    actions[la] = (Reduce, rule)
            m[itemset] = { k.name: v for k, v in actions.items() }
    
        if reduce_reduce:
            msgs = []
            for itemset, la, rules in reduce_reduce:
                msg = 'Reduce/Reduce collision in %s between the following rules: %s' % (la, ''.join([ '\n\t- ' + str(r) for r in rules ]))
                if self.debug:
                    msg += '\n    collision occurred in state: {%s\n    }' % ''.join(['\n\t' + str(x) for x in itemset.closure])
                msgs.append(msg)
>           raise GrammarError('\n\n'.join(msgs))
E           lark.exceptions.GrammarError: Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('NAME') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RBRACE') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>

.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:306: GrammarError
_________________________ test_qos_reliability_values __________________________

    def test_qos_reliability_values():
        """Test different QoS reliability values."""
        dsl_content = """
        node test_node {
            publisher /topic1: "std_msgs/msg/String" {
                qos {
                    reliability: reliable
                }
            }
            publisher /topic2: "std_msgs/msg/String" {
                qos {
                    reliability: best_effort
                }
            }
        }
        """
    
>       ast = parse_robodsl(dsl_content)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_qos_config.py:84: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/robodsl/parser/lark_parser.py:115: in parse_robodsl
    _parser = RoboDSLParser()
              ^^^^^^^^^^^^^^^
src/robodsl/parser/lark_parser.py:27: in __init__
    self.parser = Lark(grammar_content, parser='lalr', start='start')
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:439: in __init__
    self.parser = self._build_parser()
                  ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:485: in _build_parser
    return _construct_parsing_frontend(
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:257: in _construct_parsing_frontend
    return ParsingFrontend(lexer_conf, parser_conf, options)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:61: in __init__
    self.parser = create_parser(lexer_conf, parser_conf, options)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:161: in create_lalr_parser
    return cls(parser_conf, debug=debug, strict=strict)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parsers/lalr_parser.py:20: in __init__
    analysis.compute_lalr()
.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:332: in compute_lalr
    self.compute_lalr1_states()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <lark.parsers.lalr_analysis.LALR_Analyzer object at 0x105ef4830>

    def compute_lalr1_states(self) -> None:
        m: Dict[LR0ItemSet, Dict[str, Tuple]] = {}
        reduce_reduce = []
        for itemset in self.lr0_itemsets:
            actions: Dict[Symbol, Tuple] = {la: (Shift, next_state.closure)
                                                      for la, next_state in itemset.transitions.items()}
            for la, rules in itemset.lookaheads.items():
                if len(rules) > 1:
                    # Try to resolve conflict based on priority
                    p = [(r.options.priority or 0, r) for r in rules]
                    p.sort(key=lambda r: r[0], reverse=True)
                    best, second_best = p[:2]
                    if best[0] > second_best[0]:
                        rules = {best[1]}
                    else:
                        reduce_reduce.append((itemset, la, rules))
                        continue
    
                rule ,= rules
                if la in actions:
                    if self.strict:
                        raise GrammarError(f"Shift/Reduce conflict for terminal {la.name}. [strict-mode]\n ")
                    elif self.debug:
                        logger.warning('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.warning(' * %s', rule)
                    else:
                        logger.debug('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.debug(' * %s', rule)
                else:
                    actions[la] = (Reduce, rule)
            m[itemset] = { k.name: v for k, v in actions.items() }
    
        if reduce_reduce:
            msgs = []
            for itemset, la, rules in reduce_reduce:
                msg = 'Reduce/Reduce collision in %s between the following rules: %s' % (la, ''.join([ '\n\t- ' + str(r) for r in rules ]))
                if self.debug:
                    msg += '\n    collision occurred in state: {%s\n    }' % ''.join(['\n\t' + str(x) for x in itemset.closure])
                msgs.append(msg)
>           raise GrammarError('\n\n'.join(msgs))
E           lark.exceptions.GrammarError: Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('NAME') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RBRACE') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>

.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:306: GrammarError
__________________________ test_qos_durability_values __________________________

    def test_qos_durability_values():
        """Test different QoS durability values."""
        dsl_content = """
        node test_node {
            publisher /topic1: "std_msgs/msg/String" {
                qos {
                    durability: volatile
                }
            }
            publisher /topic2: "std_msgs/msg/String" {
                qos {
                    durability: transient_local
                }
            }
        }
        """
    
>       ast = parse_robodsl(dsl_content)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_qos_config.py:110: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/robodsl/parser/lark_parser.py:115: in parse_robodsl
    _parser = RoboDSLParser()
              ^^^^^^^^^^^^^^^
src/robodsl/parser/lark_parser.py:27: in __init__
    self.parser = Lark(grammar_content, parser='lalr', start='start')
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:439: in __init__
    self.parser = self._build_parser()
                  ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:485: in _build_parser
    return _construct_parsing_frontend(
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:257: in _construct_parsing_frontend
    return ParsingFrontend(lexer_conf, parser_conf, options)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:61: in __init__
    self.parser = create_parser(lexer_conf, parser_conf, options)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:161: in create_lalr_parser
    return cls(parser_conf, debug=debug, strict=strict)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parsers/lalr_parser.py:20: in __init__
    analysis.compute_lalr()
.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:332: in compute_lalr
    self.compute_lalr1_states()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <lark.parsers.lalr_analysis.LALR_Analyzer object at 0x105624050>

    def compute_lalr1_states(self) -> None:
        m: Dict[LR0ItemSet, Dict[str, Tuple]] = {}
        reduce_reduce = []
        for itemset in self.lr0_itemsets:
            actions: Dict[Symbol, Tuple] = {la: (Shift, next_state.closure)
                                                      for la, next_state in itemset.transitions.items()}
            for la, rules in itemset.lookaheads.items():
                if len(rules) > 1:
                    # Try to resolve conflict based on priority
                    p = [(r.options.priority or 0, r) for r in rules]
                    p.sort(key=lambda r: r[0], reverse=True)
                    best, second_best = p[:2]
                    if best[0] > second_best[0]:
                        rules = {best[1]}
                    else:
                        reduce_reduce.append((itemset, la, rules))
                        continue
    
                rule ,= rules
                if la in actions:
                    if self.strict:
                        raise GrammarError(f"Shift/Reduce conflict for terminal {la.name}. [strict-mode]\n ")
                    elif self.debug:
                        logger.warning('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.warning(' * %s', rule)
                    else:
                        logger.debug('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.debug(' * %s', rule)
                else:
                    actions[la] = (Reduce, rule)
            m[itemset] = { k.name: v for k, v in actions.items() }
    
        if reduce_reduce:
            msgs = []
            for itemset, la, rules in reduce_reduce:
                msg = 'Reduce/Reduce collision in %s between the following rules: %s' % (la, ''.join([ '\n\t- ' + str(r) for r in rules ]))
                if self.debug:
                    msg += '\n    collision occurred in state: {%s\n    }' % ''.join(['\n\t' + str(x) for x in itemset.closure])
                msgs.append(msg)
>           raise GrammarError('\n\n'.join(msgs))
E           lark.exceptions.GrammarError: Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('NAME') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RBRACE') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>

.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:306: GrammarError
___________________________ test_qos_history_values ____________________________

    def test_qos_history_values():
        """Test different QoS history values."""
        dsl_content = """
        node test_node {
            publisher /topic1: "std_msgs/msg/String" {
                qos {
                    history: keep_last
                    depth: 10
                }
            }
            publisher /topic2: "std_msgs/msg/String" {
                qos {
                    history: keep_all
                }
            }
        }
        """
    
>       ast = parse_robodsl(dsl_content)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_qos_config.py:137: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/robodsl/parser/lark_parser.py:115: in parse_robodsl
    _parser = RoboDSLParser()
              ^^^^^^^^^^^^^^^
src/robodsl/parser/lark_parser.py:27: in __init__
    self.parser = Lark(grammar_content, parser='lalr', start='start')
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:439: in __init__
    self.parser = self._build_parser()
                  ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:485: in _build_parser
    return _construct_parsing_frontend(
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:257: in _construct_parsing_frontend
    return ParsingFrontend(lexer_conf, parser_conf, options)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:61: in __init__
    self.parser = create_parser(lexer_conf, parser_conf, options)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:161: in create_lalr_parser
    return cls(parser_conf, debug=debug, strict=strict)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parsers/lalr_parser.py:20: in __init__
    analysis.compute_lalr()
.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:332: in compute_lalr
    self.compute_lalr1_states()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <lark.parsers.lalr_analysis.LALR_Analyzer object at 0x105879d30>

    def compute_lalr1_states(self) -> None:
        m: Dict[LR0ItemSet, Dict[str, Tuple]] = {}
        reduce_reduce = []
        for itemset in self.lr0_itemsets:
            actions: Dict[Symbol, Tuple] = {la: (Shift, next_state.closure)
                                                      for la, next_state in itemset.transitions.items()}
            for la, rules in itemset.lookaheads.items():
                if len(rules) > 1:
                    # Try to resolve conflict based on priority
                    p = [(r.options.priority or 0, r) for r in rules]
                    p.sort(key=lambda r: r[0], reverse=True)
                    best, second_best = p[:2]
                    if best[0] > second_best[0]:
                        rules = {best[1]}
                    else:
                        reduce_reduce.append((itemset, la, rules))
                        continue
    
                rule ,= rules
                if la in actions:
                    if self.strict:
                        raise GrammarError(f"Shift/Reduce conflict for terminal {la.name}. [strict-mode]\n ")
                    elif self.debug:
                        logger.warning('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.warning(' * %s', rule)
                    else:
                        logger.debug('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.debug(' * %s', rule)
                else:
                    actions[la] = (Reduce, rule)
            m[itemset] = { k.name: v for k, v in actions.items() }
    
        if reduce_reduce:
            msgs = []
            for itemset, la, rules in reduce_reduce:
                msg = 'Reduce/Reduce collision in %s between the following rules: %s' % (la, ''.join([ '\n\t- ' + str(r) for r in rules ]))
                if self.debug:
                    msg += '\n    collision occurred in state: {%s\n    }' % ''.join(['\n\t' + str(x) for x in itemset.closure])
                msgs.append(msg)
>           raise GrammarError('\n\n'.join(msgs))
E           lark.exceptions.GrammarError: Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('NAME') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RBRACE') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>

.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:306: GrammarError
__________________________ test_qos_liveliness_values __________________________

    def test_qos_liveliness_values():
        """Test different QoS liveliness values."""
        dsl_content = """
        node test_node {
            publisher /topic1: "std_msgs/msg/String" {
                qos {
                    liveliness: automatic
                }
            }
            publisher /topic2: "std_msgs/msg/String" {
                qos {
                    liveliness: manual_by_topic
                    lease_duration: 5.0
                }
            }
        }
        """
    
>       ast = parse_robodsl(dsl_content)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_qos_config.py:165: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/robodsl/parser/lark_parser.py:115: in parse_robodsl
    _parser = RoboDSLParser()
              ^^^^^^^^^^^^^^^
src/robodsl/parser/lark_parser.py:27: in __init__
    self.parser = Lark(grammar_content, parser='lalr', start='start')
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:439: in __init__
    self.parser = self._build_parser()
                  ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:485: in _build_parser
    return _construct_parsing_frontend(
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:257: in _construct_parsing_frontend
    return ParsingFrontend(lexer_conf, parser_conf, options)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:61: in __init__
    self.parser = create_parser(lexer_conf, parser_conf, options)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:161: in create_lalr_parser
    return cls(parser_conf, debug=debug, strict=strict)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parsers/lalr_parser.py:20: in __init__
    analysis.compute_lalr()
.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:332: in compute_lalr
    self.compute_lalr1_states()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <lark.parsers.lalr_analysis.LALR_Analyzer object at 0x1053757f0>

    def compute_lalr1_states(self) -> None:
        m: Dict[LR0ItemSet, Dict[str, Tuple]] = {}
        reduce_reduce = []
        for itemset in self.lr0_itemsets:
            actions: Dict[Symbol, Tuple] = {la: (Shift, next_state.closure)
                                                      for la, next_state in itemset.transitions.items()}
            for la, rules in itemset.lookaheads.items():
                if len(rules) > 1:
                    # Try to resolve conflict based on priority
                    p = [(r.options.priority or 0, r) for r in rules]
                    p.sort(key=lambda r: r[0], reverse=True)
                    best, second_best = p[:2]
                    if best[0] > second_best[0]:
                        rules = {best[1]}
                    else:
                        reduce_reduce.append((itemset, la, rules))
                        continue
    
                rule ,= rules
                if la in actions:
                    if self.strict:
                        raise GrammarError(f"Shift/Reduce conflict for terminal {la.name}. [strict-mode]\n ")
                    elif self.debug:
                        logger.warning('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.warning(' * %s', rule)
                    else:
                        logger.debug('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.debug(' * %s', rule)
                else:
                    actions[la] = (Reduce, rule)
            m[itemset] = { k.name: v for k, v in actions.items() }
    
        if reduce_reduce:
            msgs = []
            for itemset, la, rules in reduce_reduce:
                msg = 'Reduce/Reduce collision in %s between the following rules: %s' % (la, ''.join([ '\n\t- ' + str(r) for r in rules ]))
                if self.debug:
                    msg += '\n    collision occurred in state: {%s\n    }' % ''.join(['\n\t' + str(x) for x in itemset.closure])
                msgs.append(msg)
>           raise GrammarError('\n\n'.join(msgs))
E           lark.exceptions.GrammarError: Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('NAME') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RBRACE') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>

.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:306: GrammarError
__________________________ test_qos_multiple_settings __________________________

    def test_qos_multiple_settings():
        """Test multiple QoS settings on a single entity."""
        dsl_content = """
        node test_node {
            publisher /test_topic: "std_msgs/msg/String" {
                qos {
                    reliability: reliable
                    durability: transient_local
                    history: keep_last
                    depth: 20
                    liveliness: automatic
                    lease_duration: 10.0
                }
            }
        }
        """
    
>       ast = parse_robodsl(dsl_content)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_qos_config.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/robodsl/parser/lark_parser.py:115: in parse_robodsl
    _parser = RoboDSLParser()
              ^^^^^^^^^^^^^^^
src/robodsl/parser/lark_parser.py:27: in __init__
    self.parser = Lark(grammar_content, parser='lalr', start='start')
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:439: in __init__
    self.parser = self._build_parser()
                  ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:485: in _build_parser
    return _construct_parsing_frontend(
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:257: in _construct_parsing_frontend
    return ParsingFrontend(lexer_conf, parser_conf, options)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:61: in __init__
    self.parser = create_parser(lexer_conf, parser_conf, options)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:161: in create_lalr_parser
    return cls(parser_conf, debug=debug, strict=strict)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parsers/lalr_parser.py:20: in __init__
    analysis.compute_lalr()
.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:332: in compute_lalr
    self.compute_lalr1_states()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <lark.parsers.lalr_analysis.LALR_Analyzer object at 0x1056fa430>

    def compute_lalr1_states(self) -> None:
        m: Dict[LR0ItemSet, Dict[str, Tuple]] = {}
        reduce_reduce = []
        for itemset in self.lr0_itemsets:
            actions: Dict[Symbol, Tuple] = {la: (Shift, next_state.closure)
                                                      for la, next_state in itemset.transitions.items()}
            for la, rules in itemset.lookaheads.items():
                if len(rules) > 1:
                    # Try to resolve conflict based on priority
                    p = [(r.options.priority or 0, r) for r in rules]
                    p.sort(key=lambda r: r[0], reverse=True)
                    best, second_best = p[:2]
                    if best[0] > second_best[0]:
                        rules = {best[1]}
                    else:
                        reduce_reduce.append((itemset, la, rules))
                        continue
    
                rule ,= rules
                if la in actions:
                    if self.strict:
                        raise GrammarError(f"Shift/Reduce conflict for terminal {la.name}. [strict-mode]\n ")
                    elif self.debug:
                        logger.warning('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.warning(' * %s', rule)
                    else:
                        logger.debug('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.debug(' * %s', rule)
                else:
                    actions[la] = (Reduce, rule)
            m[itemset] = { k.name: v for k, v in actions.items() }
    
        if reduce_reduce:
            msgs = []
            for itemset, la, rules in reduce_reduce:
                msg = 'Reduce/Reduce collision in %s between the following rules: %s' % (la, ''.join([ '\n\t- ' + str(r) for r in rules ]))
                if self.debug:
                    msg += '\n    collision occurred in state: {%s\n    }' % ''.join(['\n\t' + str(x) for x in itemset.closure])
                msgs.append(msg)
>           raise GrammarError('\n\n'.join(msgs))
E           lark.exceptions.GrammarError: Reduce/Reduce collision in Terminal('NAME') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RBRACE') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>

.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:306: GrammarError
___________________________ test_qos_default_values ____________________________

    def test_qos_default_values():
        """Test that QoS entities without explicit QoS config work."""
        dsl_content = """
        node test_node {
            publisher /test_topic: "std_msgs/msg/String"
            subscriber /test_sub: "std_msgs/msg/String"
            service /test_srv: "std_srvs/srv/Trigger"
        }
        """
    
>       ast = parse_robodsl(dsl_content)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_qos_config.py:214: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/robodsl/parser/lark_parser.py:115: in parse_robodsl
    _parser = RoboDSLParser()
              ^^^^^^^^^^^^^^^
src/robodsl/parser/lark_parser.py:27: in __init__
    self.parser = Lark(grammar_content, parser='lalr', start='start')
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:439: in __init__
    self.parser = self._build_parser()
                  ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:485: in _build_parser
    return _construct_parsing_frontend(
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:257: in _construct_parsing_frontend
    return ParsingFrontend(lexer_conf, parser_conf, options)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:61: in __init__
    self.parser = create_parser(lexer_conf, parser_conf, options)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:161: in create_lalr_parser
    return cls(parser_conf, debug=debug, strict=strict)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parsers/lalr_parser.py:20: in __init__
    analysis.compute_lalr()
.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:332: in compute_lalr
    self.compute_lalr1_states()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <lark.parsers.lalr_analysis.LALR_Analyzer object at 0x105dcf4d0>

    def compute_lalr1_states(self) -> None:
        m: Dict[LR0ItemSet, Dict[str, Tuple]] = {}
        reduce_reduce = []
        for itemset in self.lr0_itemsets:
            actions: Dict[Symbol, Tuple] = {la: (Shift, next_state.closure)
                                                      for la, next_state in itemset.transitions.items()}
            for la, rules in itemset.lookaheads.items():
                if len(rules) > 1:
                    # Try to resolve conflict based on priority
                    p = [(r.options.priority or 0, r) for r in rules]
                    p.sort(key=lambda r: r[0], reverse=True)
                    best, second_best = p[:2]
                    if best[0] > second_best[0]:
                        rules = {best[1]}
                    else:
                        reduce_reduce.append((itemset, la, rules))
                        continue
    
                rule ,= rules
                if la in actions:
                    if self.strict:
                        raise GrammarError(f"Shift/Reduce conflict for terminal {la.name}. [strict-mode]\n ")
                    elif self.debug:
                        logger.warning('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.warning(' * %s', rule)
                    else:
                        logger.debug('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.debug(' * %s', rule)
                else:
                    actions[la] = (Reduce, rule)
            m[itemset] = { k.name: v for k, v in actions.items() }
    
        if reduce_reduce:
            msgs = []
            for itemset, la, rules in reduce_reduce:
                msg = 'Reduce/Reduce collision in %s between the following rules: %s' % (la, ''.join([ '\n\t- ' + str(r) for r in rules ]))
                if self.debug:
                    msg += '\n    collision occurred in state: {%s\n    }' % ''.join(['\n\t' + str(x) for x in itemset.closure])
                msgs.append(msg)
>           raise GrammarError('\n\n'.join(msgs))
E           lark.exceptions.GrammarError: Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('NAME') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RBRACE') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>

.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:306: GrammarError
___________________________ test_qos_numeric_values ____________________________

    def test_qos_numeric_values():
        """Test QoS settings with numeric values."""
        dsl_content = """
        node test_node {
            publisher /test_topic: "std_msgs/msg/String" {
                qos {
                    depth: 100
                    lease_duration: 30.5
                    deadline: 1.0
                }
            }
        }
        """
    
>       ast = parse_robodsl(dsl_content)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_qos_config.py:261: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/robodsl/parser/lark_parser.py:115: in parse_robodsl
    _parser = RoboDSLParser()
              ^^^^^^^^^^^^^^^
src/robodsl/parser/lark_parser.py:27: in __init__
    self.parser = Lark(grammar_content, parser='lalr', start='start')
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:439: in __init__
    self.parser = self._build_parser()
                  ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:485: in _build_parser
    return _construct_parsing_frontend(
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:257: in _construct_parsing_frontend
    return ParsingFrontend(lexer_conf, parser_conf, options)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:61: in __init__
    self.parser = create_parser(lexer_conf, parser_conf, options)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:161: in create_lalr_parser
    return cls(parser_conf, debug=debug, strict=strict)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parsers/lalr_parser.py:20: in __init__
    analysis.compute_lalr()
.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:332: in compute_lalr
    self.compute_lalr1_states()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <lark.parsers.lalr_analysis.LALR_Analyzer object at 0x105ca2510>

    def compute_lalr1_states(self) -> None:
        m: Dict[LR0ItemSet, Dict[str, Tuple]] = {}
        reduce_reduce = []
        for itemset in self.lr0_itemsets:
            actions: Dict[Symbol, Tuple] = {la: (Shift, next_state.closure)
                                                      for la, next_state in itemset.transitions.items()}
            for la, rules in itemset.lookaheads.items():
                if len(rules) > 1:
                    # Try to resolve conflict based on priority
                    p = [(r.options.priority or 0, r) for r in rules]
                    p.sort(key=lambda r: r[0], reverse=True)
                    best, second_best = p[:2]
                    if best[0] > second_best[0]:
                        rules = {best[1]}
                    else:
                        reduce_reduce.append((itemset, la, rules))
                        continue
    
                rule ,= rules
                if la in actions:
                    if self.strict:
                        raise GrammarError(f"Shift/Reduce conflict for terminal {la.name}. [strict-mode]\n ")
                    elif self.debug:
                        logger.warning('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.warning(' * %s', rule)
                    else:
                        logger.debug('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.debug(' * %s', rule)
                else:
                    actions[la] = (Reduce, rule)
            m[itemset] = { k.name: v for k, v in actions.items() }
    
        if reduce_reduce:
            msgs = []
            for itemset, la, rules in reduce_reduce:
                msg = 'Reduce/Reduce collision in %s between the following rules: %s' % (la, ''.join([ '\n\t- ' + str(r) for r in rules ]))
                if self.debug:
                    msg += '\n    collision occurred in state: {%s\n    }' % ''.join(['\n\t' + str(x) for x in itemset.closure])
                msgs.append(msg)
>           raise GrammarError('\n\n'.join(msgs))
E           lark.exceptions.GrammarError: Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('NAME') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RBRACE') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>

.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:306: GrammarError
___________________ TestRoboDSLValidator.test_valid_content ____________________

self = <test_validator.TestRoboDSLValidator object at 0x105252490>

    def test_valid_content(self):
        """Test validation of valid RoboDSL content."""
        content = """
        node test_node {
            parameter test_param: 42
            publisher /test_topic : "std_msgs/String"
            subscriber /input_topic : "std_msgs/String"
        }
        """
    
>       validator = RoboDSLValidator()
                    ^^^^^^^^^^^^^^^^^^

tests/test_validator.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/robodsl/validator.py:40: in __init__
    self.parser = RoboDSLParser()
                  ^^^^^^^^^^^^^^^
src/robodsl/parser/lark_parser.py:27: in __init__
    self.parser = Lark(grammar_content, parser='lalr', start='start')
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:439: in __init__
    self.parser = self._build_parser()
                  ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:485: in _build_parser
    return _construct_parsing_frontend(
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:257: in _construct_parsing_frontend
    return ParsingFrontend(lexer_conf, parser_conf, options)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:61: in __init__
    self.parser = create_parser(lexer_conf, parser_conf, options)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:161: in create_lalr_parser
    return cls(parser_conf, debug=debug, strict=strict)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parsers/lalr_parser.py:20: in __init__
    analysis.compute_lalr()
.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:332: in compute_lalr
    self.compute_lalr1_states()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <lark.parsers.lalr_analysis.LALR_Analyzer object at 0x103052890>

    def compute_lalr1_states(self) -> None:
        m: Dict[LR0ItemSet, Dict[str, Tuple]] = {}
        reduce_reduce = []
        for itemset in self.lr0_itemsets:
            actions: Dict[Symbol, Tuple] = {la: (Shift, next_state.closure)
                                                      for la, next_state in itemset.transitions.items()}
            for la, rules in itemset.lookaheads.items():
                if len(rules) > 1:
                    # Try to resolve conflict based on priority
                    p = [(r.options.priority or 0, r) for r in rules]
                    p.sort(key=lambda r: r[0], reverse=True)
                    best, second_best = p[:2]
                    if best[0] > second_best[0]:
                        rules = {best[1]}
                    else:
                        reduce_reduce.append((itemset, la, rules))
                        continue
    
                rule ,= rules
                if la in actions:
                    if self.strict:
                        raise GrammarError(f"Shift/Reduce conflict for terminal {la.name}. [strict-mode]\n ")
                    elif self.debug:
                        logger.warning('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.warning(' * %s', rule)
                    else:
                        logger.debug('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.debug(' * %s', rule)
                else:
                    actions[la] = (Reduce, rule)
            m[itemset] = { k.name: v for k, v in actions.items() }
    
        if reduce_reduce:
            msgs = []
            for itemset, la, rules in reduce_reduce:
                msg = 'Reduce/Reduce collision in %s between the following rules: %s' % (la, ''.join([ '\n\t- ' + str(r) for r in rules ]))
                if self.debug:
                    msg += '\n    collision occurred in state: {%s\n    }' % ''.join(['\n\t' + str(x) for x in itemset.closure])
                msgs.append(msg)
>           raise GrammarError('\n\n'.join(msgs))
E           lark.exceptions.GrammarError: Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('NAME') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RBRACE') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>

.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:306: GrammarError
____________________ TestRoboDSLValidator.test_parse_error _____________________

self = <test_validator.TestRoboDSLValidator object at 0x105252350>

    def test_parse_error(self):
        """Test validation with parse errors."""
        content = """
        node test_node {
            parameter test_param: 42
            invalid_syntax
        }
        """
    
>       validator = RoboDSLValidator()
                    ^^^^^^^^^^^^^^^^^^

tests/test_validator.py:39: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/robodsl/validator.py:40: in __init__
    self.parser = RoboDSLParser()
                  ^^^^^^^^^^^^^^^
src/robodsl/parser/lark_parser.py:27: in __init__
    self.parser = Lark(grammar_content, parser='lalr', start='start')
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:439: in __init__
    self.parser = self._build_parser()
                  ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:485: in _build_parser
    return _construct_parsing_frontend(
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:257: in _construct_parsing_frontend
    return ParsingFrontend(lexer_conf, parser_conf, options)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:61: in __init__
    self.parser = create_parser(lexer_conf, parser_conf, options)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:161: in create_lalr_parser
    return cls(parser_conf, debug=debug, strict=strict)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parsers/lalr_parser.py:20: in __init__
    analysis.compute_lalr()
.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:332: in compute_lalr
    self.compute_lalr1_states()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <lark.parsers.lalr_analysis.LALR_Analyzer object at 0x105dce7b0>

    def compute_lalr1_states(self) -> None:
        m: Dict[LR0ItemSet, Dict[str, Tuple]] = {}
        reduce_reduce = []
        for itemset in self.lr0_itemsets:
            actions: Dict[Symbol, Tuple] = {la: (Shift, next_state.closure)
                                                      for la, next_state in itemset.transitions.items()}
            for la, rules in itemset.lookaheads.items():
                if len(rules) > 1:
                    # Try to resolve conflict based on priority
                    p = [(r.options.priority or 0, r) for r in rules]
                    p.sort(key=lambda r: r[0], reverse=True)
                    best, second_best = p[:2]
                    if best[0] > second_best[0]:
                        rules = {best[1]}
                    else:
                        reduce_reduce.append((itemset, la, rules))
                        continue
    
                rule ,= rules
                if la in actions:
                    if self.strict:
                        raise GrammarError(f"Shift/Reduce conflict for terminal {la.name}. [strict-mode]\n ")
                    elif self.debug:
                        logger.warning('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.warning(' * %s', rule)
                    else:
                        logger.debug('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.debug(' * %s', rule)
                else:
                    actions[la] = (Reduce, rule)
            m[itemset] = { k.name: v for k, v in actions.items() }
    
        if reduce_reduce:
            msgs = []
            for itemset, la, rules in reduce_reduce:
                msg = 'Reduce/Reduce collision in %s between the following rules: %s' % (la, ''.join([ '\n\t- ' + str(r) for r in rules ]))
                if self.debug:
                    msg += '\n    collision occurred in state: {%s\n    }' % ''.join(['\n\t' + str(x) for x in itemset.closure])
                msgs.append(msg)
>           raise GrammarError('\n\n'.join(msgs))
E           lark.exceptions.GrammarError: Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('NAME') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RBRACE') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>

.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:306: GrammarError
___________________ TestRoboDSLValidator.test_semantic_error ___________________

self = <test_validator.TestRoboDSLValidator object at 0x105255940>

    def test_semantic_error(self):
        """Test validation with semantic errors."""
        content = """
        node test_node {
            parameter test_param: 42
            parameter test_param: 43  // Duplicate parameter
        }
        """
    
>       validator = RoboDSLValidator()
                    ^^^^^^^^^^^^^^^^^^

tests/test_validator.py:55: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/robodsl/validator.py:40: in __init__
    self.parser = RoboDSLParser()
                  ^^^^^^^^^^^^^^^
src/robodsl/parser/lark_parser.py:27: in __init__
    self.parser = Lark(grammar_content, parser='lalr', start='start')
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:439: in __init__
    self.parser = self._build_parser()
                  ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:485: in _build_parser
    return _construct_parsing_frontend(
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:257: in _construct_parsing_frontend
    return ParsingFrontend(lexer_conf, parser_conf, options)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:61: in __init__
    self.parser = create_parser(lexer_conf, parser_conf, options)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:161: in create_lalr_parser
    return cls(parser_conf, debug=debug, strict=strict)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parsers/lalr_parser.py:20: in __init__
    analysis.compute_lalr()
.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:332: in compute_lalr
    self.compute_lalr1_states()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <lark.parsers.lalr_analysis.LALR_Analyzer object at 0x1056fb150>

    def compute_lalr1_states(self) -> None:
        m: Dict[LR0ItemSet, Dict[str, Tuple]] = {}
        reduce_reduce = []
        for itemset in self.lr0_itemsets:
            actions: Dict[Symbol, Tuple] = {la: (Shift, next_state.closure)
                                                      for la, next_state in itemset.transitions.items()}
            for la, rules in itemset.lookaheads.items():
                if len(rules) > 1:
                    # Try to resolve conflict based on priority
                    p = [(r.options.priority or 0, r) for r in rules]
                    p.sort(key=lambda r: r[0], reverse=True)
                    best, second_best = p[:2]
                    if best[0] > second_best[0]:
                        rules = {best[1]}
                    else:
                        reduce_reduce.append((itemset, la, rules))
                        continue
    
                rule ,= rules
                if la in actions:
                    if self.strict:
                        raise GrammarError(f"Shift/Reduce conflict for terminal {la.name}. [strict-mode]\n ")
                    elif self.debug:
                        logger.warning('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.warning(' * %s', rule)
                    else:
                        logger.debug('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.debug(' * %s', rule)
                else:
                    actions[la] = (Reduce, rule)
            m[itemset] = { k.name: v for k, v in actions.items() }
    
        if reduce_reduce:
            msgs = []
            for itemset, la, rules in reduce_reduce:
                msg = 'Reduce/Reduce collision in %s between the following rules: %s' % (la, ''.join([ '\n\t- ' + str(r) for r in rules ]))
                if self.debug:
                    msg += '\n    collision occurred in state: {%s\n    }' % ''.join(['\n\t' + str(x) for x in itemset.closure])
                msgs.append(msg)
>           raise GrammarError('\n\n'.join(msgs))
E           lark.exceptions.GrammarError: Reduce/Reduce collision in Terminal('NAME') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RBRACE') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>

.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:306: GrammarError
__________________ TestRoboDSLValidator.test_style_validation __________________

self = <test_validator.TestRoboDSLValidator object at 0x105255cd0>

    def test_style_validation(self):
        """Test style validation."""
        content = """
        node test_node {
            parameter test_param: 42
            publisher /test_topic : "std_msgs/String"
        }
        """
    
>       validator = RoboDSLValidator()
                    ^^^^^^^^^^^^^^^^^^

tests/test_validator.py:71: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/robodsl/validator.py:40: in __init__
    self.parser = RoboDSLParser()
                  ^^^^^^^^^^^^^^^
src/robodsl/parser/lark_parser.py:27: in __init__
    self.parser = Lark(grammar_content, parser='lalr', start='start')
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:439: in __init__
    self.parser = self._build_parser()
                  ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:485: in _build_parser
    return _construct_parsing_frontend(
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:257: in _construct_parsing_frontend
    return ParsingFrontend(lexer_conf, parser_conf, options)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:61: in __init__
    self.parser = create_parser(lexer_conf, parser_conf, options)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:161: in create_lalr_parser
    return cls(parser_conf, debug=debug, strict=strict)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parsers/lalr_parser.py:20: in __init__
    analysis.compute_lalr()
.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:332: in compute_lalr
    self.compute_lalr1_states()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <lark.parsers.lalr_analysis.LALR_Analyzer object at 0x105c5c4b0>

    def compute_lalr1_states(self) -> None:
        m: Dict[LR0ItemSet, Dict[str, Tuple]] = {}
        reduce_reduce = []
        for itemset in self.lr0_itemsets:
            actions: Dict[Symbol, Tuple] = {la: (Shift, next_state.closure)
                                                      for la, next_state in itemset.transitions.items()}
            for la, rules in itemset.lookaheads.items():
                if len(rules) > 1:
                    # Try to resolve conflict based on priority
                    p = [(r.options.priority or 0, r) for r in rules]
                    p.sort(key=lambda r: r[0], reverse=True)
                    best, second_best = p[:2]
                    if best[0] > second_best[0]:
                        rules = {best[1]}
                    else:
                        reduce_reduce.append((itemset, la, rules))
                        continue
    
                rule ,= rules
                if la in actions:
                    if self.strict:
                        raise GrammarError(f"Shift/Reduce conflict for terminal {la.name}. [strict-mode]\n ")
                    elif self.debug:
                        logger.warning('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.warning(' * %s', rule)
                    else:
                        logger.debug('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.debug(' * %s', rule)
                else:
                    actions[la] = (Reduce, rule)
            m[itemset] = { k.name: v for k, v in actions.items() }
    
        if reduce_reduce:
            msgs = []
            for itemset, la, rules in reduce_reduce:
                msg = 'Reduce/Reduce collision in %s between the following rules: %s' % (la, ''.join([ '\n\t- ' + str(r) for r in rules ]))
                if self.debug:
                    msg += '\n    collision occurred in state: {%s\n    }' % ''.join(['\n\t' + str(x) for x in itemset.closure])
                msgs.append(msg)
>           raise GrammarError('\n\n'.join(msgs))
E           lark.exceptions.GrammarError: Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('NAME') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RBRACE') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>

.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:306: GrammarError
_________________ TestRoboDSLValidator.test_naming_conventions _________________

self = <test_validator.TestRoboDSLValidator object at 0x105306f90>

    def test_naming_conventions(self):
        """Test naming convention validation."""
        content = """
        node TestNode {
            parameter TestParam: 42
            publisher /TestTopic : "std_msgs/String"
        }
        """
    
>       validator = RoboDSLValidator()
                    ^^^^^^^^^^^^^^^^^^

tests/test_validator.py:86: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/robodsl/validator.py:40: in __init__
    self.parser = RoboDSLParser()
                  ^^^^^^^^^^^^^^^
src/robodsl/parser/lark_parser.py:27: in __init__
    self.parser = Lark(grammar_content, parser='lalr', start='start')
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:439: in __init__
    self.parser = self._build_parser()
                  ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:485: in _build_parser
    return _construct_parsing_frontend(
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:257: in _construct_parsing_frontend
    return ParsingFrontend(lexer_conf, parser_conf, options)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:61: in __init__
    self.parser = create_parser(lexer_conf, parser_conf, options)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:161: in create_lalr_parser
    return cls(parser_conf, debug=debug, strict=strict)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parsers/lalr_parser.py:20: in __init__
    analysis.compute_lalr()
.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:332: in compute_lalr
    self.compute_lalr1_states()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <lark.parsers.lalr_analysis.LALR_Analyzer object at 0x1055017f0>

    def compute_lalr1_states(self) -> None:
        m: Dict[LR0ItemSet, Dict[str, Tuple]] = {}
        reduce_reduce = []
        for itemset in self.lr0_itemsets:
            actions: Dict[Symbol, Tuple] = {la: (Shift, next_state.closure)
                                                      for la, next_state in itemset.transitions.items()}
            for la, rules in itemset.lookaheads.items():
                if len(rules) > 1:
                    # Try to resolve conflict based on priority
                    p = [(r.options.priority or 0, r) for r in rules]
                    p.sort(key=lambda r: r[0], reverse=True)
                    best, second_best = p[:2]
                    if best[0] > second_best[0]:
                        rules = {best[1]}
                    else:
                        reduce_reduce.append((itemset, la, rules))
                        continue
    
                rule ,= rules
                if la in actions:
                    if self.strict:
                        raise GrammarError(f"Shift/Reduce conflict for terminal {la.name}. [strict-mode]\n ")
                    elif self.debug:
                        logger.warning('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.warning(' * %s', rule)
                    else:
                        logger.debug('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.debug(' * %s', rule)
                else:
                    actions[la] = (Reduce, rule)
            m[itemset] = { k.name: v for k, v in actions.items() }
    
        if reduce_reduce:
            msgs = []
            for itemset, la, rules in reduce_reduce:
                msg = 'Reduce/Reduce collision in %s between the following rules: %s' % (la, ''.join([ '\n\t- ' + str(r) for r in rules ]))
                if self.debug:
                    msg += '\n    collision occurred in state: {%s\n    }' % ''.join(['\n\t' + str(x) for x in itemset.closure])
                msgs.append(msg)
>           raise GrammarError('\n\n'.join(msgs))
E           lark.exceptions.GrammarError: Reduce/Reduce collision in Terminal('NAME') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RBRACE') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>

.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:306: GrammarError
___________________ TestRoboDSLValidator.test_best_practices ___________________

self = <test_validator.TestRoboDSLValidator object at 0x10522ebe0>

    def test_best_practices(self):
        """Test best practices validation."""
        content = """
        node isolated_node {
            parameter test_param: 42
        }
        """
    
>       validator = RoboDSLValidator()
                    ^^^^^^^^^^^^^^^^^^

tests/test_validator.py:102: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/robodsl/validator.py:40: in __init__
    self.parser = RoboDSLParser()
                  ^^^^^^^^^^^^^^^
src/robodsl/parser/lark_parser.py:27: in __init__
    self.parser = Lark(grammar_content, parser='lalr', start='start')
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:439: in __init__
    self.parser = self._build_parser()
                  ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:485: in _build_parser
    return _construct_parsing_frontend(
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:257: in _construct_parsing_frontend
    return ParsingFrontend(lexer_conf, parser_conf, options)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:61: in __init__
    self.parser = create_parser(lexer_conf, parser_conf, options)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:161: in create_lalr_parser
    return cls(parser_conf, debug=debug, strict=strict)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parsers/lalr_parser.py:20: in __init__
    analysis.compute_lalr()
.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:332: in compute_lalr
    self.compute_lalr1_states()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <lark.parsers.lalr_analysis.LALR_Analyzer object at 0x103052890>

    def compute_lalr1_states(self) -> None:
        m: Dict[LR0ItemSet, Dict[str, Tuple]] = {}
        reduce_reduce = []
        for itemset in self.lr0_itemsets:
            actions: Dict[Symbol, Tuple] = {la: (Shift, next_state.closure)
                                                      for la, next_state in itemset.transitions.items()}
            for la, rules in itemset.lookaheads.items():
                if len(rules) > 1:
                    # Try to resolve conflict based on priority
                    p = [(r.options.priority or 0, r) for r in rules]
                    p.sort(key=lambda r: r[0], reverse=True)
                    best, second_best = p[:2]
                    if best[0] > second_best[0]:
                        rules = {best[1]}
                    else:
                        reduce_reduce.append((itemset, la, rules))
                        continue
    
                rule ,= rules
                if la in actions:
                    if self.strict:
                        raise GrammarError(f"Shift/Reduce conflict for terminal {la.name}. [strict-mode]\n ")
                    elif self.debug:
                        logger.warning('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.warning(' * %s', rule)
                    else:
                        logger.debug('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.debug(' * %s', rule)
                else:
                    actions[la] = (Reduce, rule)
            m[itemset] = { k.name: v for k, v in actions.items() }
    
        if reduce_reduce:
            msgs = []
            for itemset, la, rules in reduce_reduce:
                msg = 'Reduce/Reduce collision in %s between the following rules: %s' % (la, ''.join([ '\n\t- ' + str(r) for r in rules ]))
                if self.debug:
                    msg += '\n    collision occurred in state: {%s\n    }' % ''.join(['\n\t' + str(x) for x in itemset.closure])
                msgs.append(msg)
>           raise GrammarError('\n\n'.join(msgs))
E           lark.exceptions.GrammarError: Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('NAME') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RBRACE') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>

.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:306: GrammarError
_______________ TestRoboDSLValidator.test_performance_validation _______________

self = <test_validator.TestRoboDSLValidator object at 0x10522f020>

    def test_performance_validation(self):
        """Test performance validation."""
        content = """
        node test_node {
            publisher /test_topic : "std_msgs/String" {
                qos {
                    depth: 200
                }
            }
        }
        """
    
>       validator = RoboDSLValidator()
                    ^^^^^^^^^^^^^^^^^^

tests/test_validator.py:120: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/robodsl/validator.py:40: in __init__
    self.parser = RoboDSLParser()
                  ^^^^^^^^^^^^^^^
src/robodsl/parser/lark_parser.py:27: in __init__
    self.parser = Lark(grammar_content, parser='lalr', start='start')
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:439: in __init__
    self.parser = self._build_parser()
                  ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:485: in _build_parser
    return _construct_parsing_frontend(
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:257: in _construct_parsing_frontend
    return ParsingFrontend(lexer_conf, parser_conf, options)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:61: in __init__
    self.parser = create_parser(lexer_conf, parser_conf, options)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:161: in create_lalr_parser
    return cls(parser_conf, debug=debug, strict=strict)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parsers/lalr_parser.py:20: in __init__
    analysis.compute_lalr()
.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:332: in compute_lalr
    self.compute_lalr1_states()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <lark.parsers.lalr_analysis.LALR_Analyzer object at 0x105d64050>

    def compute_lalr1_states(self) -> None:
        m: Dict[LR0ItemSet, Dict[str, Tuple]] = {}
        reduce_reduce = []
        for itemset in self.lr0_itemsets:
            actions: Dict[Symbol, Tuple] = {la: (Shift, next_state.closure)
                                                      for la, next_state in itemset.transitions.items()}
            for la, rules in itemset.lookaheads.items():
                if len(rules) > 1:
                    # Try to resolve conflict based on priority
                    p = [(r.options.priority or 0, r) for r in rules]
                    p.sort(key=lambda r: r[0], reverse=True)
                    best, second_best = p[:2]
                    if best[0] > second_best[0]:
                        rules = {best[1]}
                    else:
                        reduce_reduce.append((itemset, la, rules))
                        continue
    
                rule ,= rules
                if la in actions:
                    if self.strict:
                        raise GrammarError(f"Shift/Reduce conflict for terminal {la.name}. [strict-mode]\n ")
                    elif self.debug:
                        logger.warning('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.warning(' * %s', rule)
                    else:
                        logger.debug('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.debug(' * %s', rule)
                else:
                    actions[la] = (Reduce, rule)
            m[itemset] = { k.name: v for k, v in actions.items() }
    
        if reduce_reduce:
            msgs = []
            for itemset, la, rules in reduce_reduce:
                msg = 'Reduce/Reduce collision in %s between the following rules: %s' % (la, ''.join([ '\n\t- ' + str(r) for r in rules ]))
                if self.debug:
                    msg += '\n    collision occurred in state: {%s\n    }' % ''.join(['\n\t' + str(x) for x in itemset.closure])
                msgs.append(msg)
>           raise GrammarError('\n\n'.join(msgs))
E           lark.exceptions.GrammarError: Reduce/Reduce collision in Terminal('NAME') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RBRACE') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>

.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:306: GrammarError
_______________ TestRoboDSLValidator.test_cuda_kernel_validation _______________

self = <test_validator.TestRoboDSLValidator object at 0x105318550>

    def test_cuda_kernel_validation(self):
        """Test CUDA kernel validation."""
        content = """
        cuda_kernels {
            kernel test_kernel {
                shared_memory: 32768
            }
        }
        """
    
>       validator = RoboDSLValidator()
                    ^^^^^^^^^^^^^^^^^^

tests/test_validator.py:136: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/robodsl/validator.py:40: in __init__
    self.parser = RoboDSLParser()
                  ^^^^^^^^^^^^^^^
src/robodsl/parser/lark_parser.py:27: in __init__
    self.parser = Lark(grammar_content, parser='lalr', start='start')
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:439: in __init__
    self.parser = self._build_parser()
                  ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:485: in _build_parser
    return _construct_parsing_frontend(
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:257: in _construct_parsing_frontend
    return ParsingFrontend(lexer_conf, parser_conf, options)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:61: in __init__
    self.parser = create_parser(lexer_conf, parser_conf, options)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:161: in create_lalr_parser
    return cls(parser_conf, debug=debug, strict=strict)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parsers/lalr_parser.py:20: in __init__
    analysis.compute_lalr()
.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:332: in compute_lalr
    self.compute_lalr1_states()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <lark.parsers.lalr_analysis.LALR_Analyzer object at 0x1053997f0>

    def compute_lalr1_states(self) -> None:
        m: Dict[LR0ItemSet, Dict[str, Tuple]] = {}
        reduce_reduce = []
        for itemset in self.lr0_itemsets:
            actions: Dict[Symbol, Tuple] = {la: (Shift, next_state.closure)
                                                      for la, next_state in itemset.transitions.items()}
            for la, rules in itemset.lookaheads.items():
                if len(rules) > 1:
                    # Try to resolve conflict based on priority
                    p = [(r.options.priority or 0, r) for r in rules]
                    p.sort(key=lambda r: r[0], reverse=True)
                    best, second_best = p[:2]
                    if best[0] > second_best[0]:
                        rules = {best[1]}
                    else:
                        reduce_reduce.append((itemset, la, rules))
                        continue
    
                rule ,= rules
                if la in actions:
                    if self.strict:
                        raise GrammarError(f"Shift/Reduce conflict for terminal {la.name}. [strict-mode]\n ")
                    elif self.debug:
                        logger.warning('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.warning(' * %s', rule)
                    else:
                        logger.debug('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.debug(' * %s', rule)
                else:
                    actions[la] = (Reduce, rule)
            m[itemset] = { k.name: v for k, v in actions.items() }
    
        if reduce_reduce:
            msgs = []
            for itemset, la, rules in reduce_reduce:
                msg = 'Reduce/Reduce collision in %s between the following rules: %s' % (la, ''.join([ '\n\t- ' + str(r) for r in rules ]))
                if self.debug:
                    msg += '\n    collision occurred in state: {%s\n    }' % ''.join(['\n\t' + str(x) for x in itemset.closure])
                msgs.append(msg)
>           raise GrammarError('\n\n'.join(msgs))
E           lark.exceptions.GrammarError: Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('NAME') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RBRACE') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>

.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:306: GrammarError
_____________________ TestRoboDSLLinter.test_format_string _____________________

self = <test_validator.TestRoboDSLLinter object at 0x1052525d0>

    def test_format_string(self):
        """Test string formatting."""
        content = """
        node test_node{
        parameter test_param:42
        publisher /test_topic:"std_msgs/String"
        }
        """
    
>       linter = RoboDSLLinter()
                 ^^^^^^^^^^^^^^^

tests/test_validator.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/robodsl/validator.py:312: in __init__
    self.validator = RoboDSLValidator()
                     ^^^^^^^^^^^^^^^^^^
src/robodsl/validator.py:40: in __init__
    self.parser = RoboDSLParser()
                  ^^^^^^^^^^^^^^^
src/robodsl/parser/lark_parser.py:27: in __init__
    self.parser = Lark(grammar_content, parser='lalr', start='start')
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:439: in __init__
    self.parser = self._build_parser()
                  ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:485: in _build_parser
    return _construct_parsing_frontend(
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:257: in _construct_parsing_frontend
    return ParsingFrontend(lexer_conf, parser_conf, options)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:61: in __init__
    self.parser = create_parser(lexer_conf, parser_conf, options)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:161: in create_lalr_parser
    return cls(parser_conf, debug=debug, strict=strict)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parsers/lalr_parser.py:20: in __init__
    analysis.compute_lalr()
.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:332: in compute_lalr
    self.compute_lalr1_states()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <lark.parsers.lalr_analysis.LALR_Analyzer object at 0x105c54050>

    def compute_lalr1_states(self) -> None:
        m: Dict[LR0ItemSet, Dict[str, Tuple]] = {}
        reduce_reduce = []
        for itemset in self.lr0_itemsets:
            actions: Dict[Symbol, Tuple] = {la: (Shift, next_state.closure)
                                                      for la, next_state in itemset.transitions.items()}
            for la, rules in itemset.lookaheads.items():
                if len(rules) > 1:
                    # Try to resolve conflict based on priority
                    p = [(r.options.priority or 0, r) for r in rules]
                    p.sort(key=lambda r: r[0], reverse=True)
                    best, second_best = p[:2]
                    if best[0] > second_best[0]:
                        rules = {best[1]}
                    else:
                        reduce_reduce.append((itemset, la, rules))
                        continue
    
                rule ,= rules
                if la in actions:
                    if self.strict:
                        raise GrammarError(f"Shift/Reduce conflict for terminal {la.name}. [strict-mode]\n ")
                    elif self.debug:
                        logger.warning('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.warning(' * %s', rule)
                    else:
                        logger.debug('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.debug(' * %s', rule)
                else:
                    actions[la] = (Reduce, rule)
            m[itemset] = { k.name: v for k, v in actions.items() }
    
        if reduce_reduce:
            msgs = []
            for itemset, la, rules in reduce_reduce:
                msg = 'Reduce/Reduce collision in %s between the following rules: %s' % (la, ''.join([ '\n\t- ' + str(r) for r in rules ]))
                if self.debug:
                    msg += '\n    collision occurred in state: {%s\n    }' % ''.join(['\n\t' + str(x) for x in itemset.closure])
                msgs.append(msg)
>           raise GrammarError('\n\n'.join(msgs))
E           lark.exceptions.GrammarError: Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('NAME') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RBRACE') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>

.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:306: GrammarError
______________ TestRoboDSLLinter.test_remove_trailing_whitespace _______________

self = <test_validator.TestRoboDSLLinter object at 0x105252710>

    def test_remove_trailing_whitespace(self):
        """Test removal of trailing whitespace."""
        content = "node test_node {\n    parameter test_param: 42    \n}"
    
>       linter = RoboDSLLinter()
                 ^^^^^^^^^^^^^^^

tests/test_validator.py:168: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/robodsl/validator.py:312: in __init__
    self.validator = RoboDSLValidator()
                     ^^^^^^^^^^^^^^^^^^
src/robodsl/validator.py:40: in __init__
    self.parser = RoboDSLParser()
                  ^^^^^^^^^^^^^^^
src/robodsl/parser/lark_parser.py:27: in __init__
    self.parser = Lark(grammar_content, parser='lalr', start='start')
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:439: in __init__
    self.parser = self._build_parser()
                  ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:485: in _build_parser
    return _construct_parsing_frontend(
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:257: in _construct_parsing_frontend
    return ParsingFrontend(lexer_conf, parser_conf, options)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:61: in __init__
    self.parser = create_parser(lexer_conf, parser_conf, options)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:161: in create_lalr_parser
    return cls(parser_conf, debug=debug, strict=strict)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parsers/lalr_parser.py:20: in __init__
    analysis.compute_lalr()
.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:332: in compute_lalr
    self.compute_lalr1_states()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <lark.parsers.lalr_analysis.LALR_Analyzer object at 0x10540c050>

    def compute_lalr1_states(self) -> None:
        m: Dict[LR0ItemSet, Dict[str, Tuple]] = {}
        reduce_reduce = []
        for itemset in self.lr0_itemsets:
            actions: Dict[Symbol, Tuple] = {la: (Shift, next_state.closure)
                                                      for la, next_state in itemset.transitions.items()}
            for la, rules in itemset.lookaheads.items():
                if len(rules) > 1:
                    # Try to resolve conflict based on priority
                    p = [(r.options.priority or 0, r) for r in rules]
                    p.sort(key=lambda r: r[0], reverse=True)
                    best, second_best = p[:2]
                    if best[0] > second_best[0]:
                        rules = {best[1]}
                    else:
                        reduce_reduce.append((itemset, la, rules))
                        continue
    
                rule ,= rules
                if la in actions:
                    if self.strict:
                        raise GrammarError(f"Shift/Reduce conflict for terminal {la.name}. [strict-mode]\n ")
                    elif self.debug:
                        logger.warning('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.warning(' * %s', rule)
                    else:
                        logger.debug('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.debug(' * %s', rule)
                else:
                    actions[la] = (Reduce, rule)
            m[itemset] = { k.name: v for k, v in actions.items() }
    
        if reduce_reduce:
            msgs = []
            for itemset, la, rules in reduce_reduce:
                msg = 'Reduce/Reduce collision in %s between the following rules: %s' % (la, ''.join([ '\n\t- ' + str(r) for r in rules ]))
                if self.debug:
                    msg += '\n    collision occurred in state: {%s\n    }' % ''.join(['\n\t' + str(x) for x in itemset.closure])
                msgs.append(msg)
>           raise GrammarError('\n\n'.join(msgs))
E           lark.exceptions.GrammarError: Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('NAME') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RBRACE') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>

.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:306: GrammarError
__________________ TestRoboDSLLinter.test_indentation_fixing ___________________

self = <test_validator.TestRoboDSLLinter object at 0x105255ba0>

    def test_indentation_fixing(self):
        """Test indentation fixing."""
        content = """
        node test_node {
      parameter test_param: 42
            publisher /test_topic : "std_msgs/String"
        }
        """
    
>       linter = RoboDSLLinter()
                 ^^^^^^^^^^^^^^^

tests/test_validator.py:184: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/robodsl/validator.py:312: in __init__
    self.validator = RoboDSLValidator()
                     ^^^^^^^^^^^^^^^^^^
src/robodsl/validator.py:40: in __init__
    self.parser = RoboDSLParser()
                  ^^^^^^^^^^^^^^^
src/robodsl/parser/lark_parser.py:27: in __init__
    self.parser = Lark(grammar_content, parser='lalr', start='start')
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:439: in __init__
    self.parser = self._build_parser()
                  ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:485: in _build_parser
    return _construct_parsing_frontend(
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:257: in _construct_parsing_frontend
    return ParsingFrontend(lexer_conf, parser_conf, options)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:61: in __init__
    self.parser = create_parser(lexer_conf, parser_conf, options)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:161: in create_lalr_parser
    return cls(parser_conf, debug=debug, strict=strict)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parsers/lalr_parser.py:20: in __init__
    analysis.compute_lalr()
.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:332: in compute_lalr
    self.compute_lalr1_states()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <lark.parsers.lalr_analysis.LALR_Analyzer object at 0x105cd3d90>

    def compute_lalr1_states(self) -> None:
        m: Dict[LR0ItemSet, Dict[str, Tuple]] = {}
        reduce_reduce = []
        for itemset in self.lr0_itemsets:
            actions: Dict[Symbol, Tuple] = {la: (Shift, next_state.closure)
                                                      for la, next_state in itemset.transitions.items()}
            for la, rules in itemset.lookaheads.items():
                if len(rules) > 1:
                    # Try to resolve conflict based on priority
                    p = [(r.options.priority or 0, r) for r in rules]
                    p.sort(key=lambda r: r[0], reverse=True)
                    best, second_best = p[:2]
                    if best[0] > second_best[0]:
                        rules = {best[1]}
                    else:
                        reduce_reduce.append((itemset, la, rules))
                        continue
    
                rule ,= rules
                if la in actions:
                    if self.strict:
                        raise GrammarError(f"Shift/Reduce conflict for terminal {la.name}. [strict-mode]\n ")
                    elif self.debug:
                        logger.warning('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.warning(' * %s', rule)
                    else:
                        logger.debug('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.debug(' * %s', rule)
                else:
                    actions[la] = (Reduce, rule)
            m[itemset] = { k.name: v for k, v in actions.items() }
    
        if reduce_reduce:
            msgs = []
            for itemset, la, rules in reduce_reduce:
                msg = 'Reduce/Reduce collision in %s between the following rules: %s' % (la, ''.join([ '\n\t- ' + str(r) for r in rules ]))
                if self.debug:
                    msg += '\n    collision occurred in state: {%s\n    }' % ''.join(['\n\t' + str(x) for x in itemset.closure])
                msgs.append(msg)
>           raise GrammarError('\n\n'.join(msgs))
E           lark.exceptions.GrammarError: Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('NAME') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RBRACE') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>

.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:306: GrammarError
___________________ TestRoboDSLLinter.test_check_formatting ____________________

self = <test_validator.TestRoboDSLLinter object at 0x105255810>

    def test_check_formatting(self):
        """Test formatting check."""
        content = """
        node test_node {
            parameter test_param: 42
        }
        """
    
>       linter = RoboDSLLinter()
                 ^^^^^^^^^^^^^^^

tests/test_validator.py:202: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/robodsl/validator.py:312: in __init__
    self.validator = RoboDSLValidator()
                     ^^^^^^^^^^^^^^^^^^
src/robodsl/validator.py:40: in __init__
    self.parser = RoboDSLParser()
                  ^^^^^^^^^^^^^^^
src/robodsl/parser/lark_parser.py:27: in __init__
    self.parser = Lark(grammar_content, parser='lalr', start='start')
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:439: in __init__
    self.parser = self._build_parser()
                  ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:485: in _build_parser
    return _construct_parsing_frontend(
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:257: in _construct_parsing_frontend
    return ParsingFrontend(lexer_conf, parser_conf, options)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:61: in __init__
    self.parser = create_parser(lexer_conf, parser_conf, options)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:161: in create_lalr_parser
    return cls(parser_conf, debug=debug, strict=strict)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parsers/lalr_parser.py:20: in __init__
    analysis.compute_lalr()
.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:332: in compute_lalr
    self.compute_lalr1_states()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <lark.parsers.lalr_analysis.LALR_Analyzer object at 0x105cccbb0>

    def compute_lalr1_states(self) -> None:
        m: Dict[LR0ItemSet, Dict[str, Tuple]] = {}
        reduce_reduce = []
        for itemset in self.lr0_itemsets:
            actions: Dict[Symbol, Tuple] = {la: (Shift, next_state.closure)
                                                      for la, next_state in itemset.transitions.items()}
            for la, rules in itemset.lookaheads.items():
                if len(rules) > 1:
                    # Try to resolve conflict based on priority
                    p = [(r.options.priority or 0, r) for r in rules]
                    p.sort(key=lambda r: r[0], reverse=True)
                    best, second_best = p[:2]
                    if best[0] > second_best[0]:
                        rules = {best[1]}
                    else:
                        reduce_reduce.append((itemset, la, rules))
                        continue
    
                rule ,= rules
                if la in actions:
                    if self.strict:
                        raise GrammarError(f"Shift/Reduce conflict for terminal {la.name}. [strict-mode]\n ")
                    elif self.debug:
                        logger.warning('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.warning(' * %s', rule)
                    else:
                        logger.debug('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.debug(' * %s', rule)
                else:
                    actions[la] = (Reduce, rule)
            m[itemset] = { k.name: v for k, v in actions.items() }
    
        if reduce_reduce:
            msgs = []
            for itemset, la, rules in reduce_reduce:
                msg = 'Reduce/Reduce collision in %s between the following rules: %s' % (la, ''.join([ '\n\t- ' + str(r) for r in rules ]))
                if self.debug:
                    msg += '\n    collision occurred in state: {%s\n    }' % ''.join(['\n\t' + str(x) for x in itemset.closure])
                msgs.append(msg)
>           raise GrammarError('\n\n'.join(msgs))
E           lark.exceptions.GrammarError: Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('NAME') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RBRACE') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>

.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:306: GrammarError
_____________ TestConvenienceFunctions.test_validate_robodsl_file ______________

self = <test_validator.TestConvenienceFunctions object at 0x105252850>
tmp_path = PosixPath('/private/var/folders/cq/t8wzz60x0416zygrcht5b6jw0000gn/T/pytest-of-ishayu/pytest-46/test_validate_robodsl_file0')

    def test_validate_robodsl_file(self, tmp_path):
        """Test file validation convenience function."""
        file_path = tmp_path / "test.robodsl"
        file_path.write_text("""
        node test_node {
            parameter test_param: 42
        }
        """)
    
>       issues = validate_robodsl_file(file_path)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_validator.py:221: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/robodsl/validator.py:377: in validate_robodsl_file
    validator = RoboDSLValidator()
                ^^^^^^^^^^^^^^^^^^
src/robodsl/validator.py:40: in __init__
    self.parser = RoboDSLParser()
                  ^^^^^^^^^^^^^^^
src/robodsl/parser/lark_parser.py:27: in __init__
    self.parser = Lark(grammar_content, parser='lalr', start='start')
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:439: in __init__
    self.parser = self._build_parser()
                  ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:485: in _build_parser
    return _construct_parsing_frontend(
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:257: in _construct_parsing_frontend
    return ParsingFrontend(lexer_conf, parser_conf, options)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:61: in __init__
    self.parser = create_parser(lexer_conf, parser_conf, options)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:161: in create_lalr_parser
    return cls(parser_conf, debug=debug, strict=strict)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parsers/lalr_parser.py:20: in __init__
    analysis.compute_lalr()
.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:332: in compute_lalr
    self.compute_lalr1_states()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <lark.parsers.lalr_analysis.LALR_Analyzer object at 0x105dc2190>

    def compute_lalr1_states(self) -> None:
        m: Dict[LR0ItemSet, Dict[str, Tuple]] = {}
        reduce_reduce = []
        for itemset in self.lr0_itemsets:
            actions: Dict[Symbol, Tuple] = {la: (Shift, next_state.closure)
                                                      for la, next_state in itemset.transitions.items()}
            for la, rules in itemset.lookaheads.items():
                if len(rules) > 1:
                    # Try to resolve conflict based on priority
                    p = [(r.options.priority or 0, r) for r in rules]
                    p.sort(key=lambda r: r[0], reverse=True)
                    best, second_best = p[:2]
                    if best[0] > second_best[0]:
                        rules = {best[1]}
                    else:
                        reduce_reduce.append((itemset, la, rules))
                        continue
    
                rule ,= rules
                if la in actions:
                    if self.strict:
                        raise GrammarError(f"Shift/Reduce conflict for terminal {la.name}. [strict-mode]\n ")
                    elif self.debug:
                        logger.warning('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.warning(' * %s', rule)
                    else:
                        logger.debug('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.debug(' * %s', rule)
                else:
                    actions[la] = (Reduce, rule)
            m[itemset] = { k.name: v for k, v in actions.items() }
    
        if reduce_reduce:
            msgs = []
            for itemset, la, rules in reduce_reduce:
                msg = 'Reduce/Reduce collision in %s between the following rules: %s' % (la, ''.join([ '\n\t- ' + str(r) for r in rules ]))
                if self.debug:
                    msg += '\n    collision occurred in state: {%s\n    }' % ''.join(['\n\t' + str(x) for x in itemset.closure])
                msgs.append(msg)
>           raise GrammarError('\n\n'.join(msgs))
E           lark.exceptions.GrammarError: Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('NAME') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RBRACE') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>

.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:306: GrammarError
______________ TestConvenienceFunctions.test_format_robodsl_file _______________

self = <test_validator.TestConvenienceFunctions object at 0x105252990>
tmp_path = PosixPath('/private/var/folders/cq/t8wzz60x0416zygrcht5b6jw0000gn/T/pytest-of-ishayu/pytest-46/test_format_robodsl_file0')

    def test_format_robodsl_file(self, tmp_path):
        """Test file formatting convenience function."""
        file_path = tmp_path / "test.robodsl"
        file_path.write_text("""
        node test_node{
        parameter test_param:42
        }
        """)
    
>       formatted = format_robodsl_file(file_path)
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_validator.py:235: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/robodsl/validator.py:383: in format_robodsl_file
    linter = RoboDSLLinter()
             ^^^^^^^^^^^^^^^
src/robodsl/validator.py:312: in __init__
    self.validator = RoboDSLValidator()
                     ^^^^^^^^^^^^^^^^^^
src/robodsl/validator.py:40: in __init__
    self.parser = RoboDSLParser()
                  ^^^^^^^^^^^^^^^
src/robodsl/parser/lark_parser.py:27: in __init__
    self.parser = Lark(grammar_content, parser='lalr', start='start')
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:439: in __init__
    self.parser = self._build_parser()
                  ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/lark.py:485: in _build_parser
    return _construct_parsing_frontend(
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:257: in _construct_parsing_frontend
    return ParsingFrontend(lexer_conf, parser_conf, options)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:61: in __init__
    self.parser = create_parser(lexer_conf, parser_conf, options)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parser_frontends.py:161: in create_lalr_parser
    return cls(parser_conf, debug=debug, strict=strict)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/lark/parsers/lalr_parser.py:20: in __init__
    analysis.compute_lalr()
.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:332: in compute_lalr
    self.compute_lalr1_states()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <lark.parsers.lalr_analysis.LALR_Analyzer object at 0x1054e90f0>

    def compute_lalr1_states(self) -> None:
        m: Dict[LR0ItemSet, Dict[str, Tuple]] = {}
        reduce_reduce = []
        for itemset in self.lr0_itemsets:
            actions: Dict[Symbol, Tuple] = {la: (Shift, next_state.closure)
                                                      for la, next_state in itemset.transitions.items()}
            for la, rules in itemset.lookaheads.items():
                if len(rules) > 1:
                    # Try to resolve conflict based on priority
                    p = [(r.options.priority or 0, r) for r in rules]
                    p.sort(key=lambda r: r[0], reverse=True)
                    best, second_best = p[:2]
                    if best[0] > second_best[0]:
                        rules = {best[1]}
                    else:
                        reduce_reduce.append((itemset, la, rules))
                        continue
    
                rule ,= rules
                if la in actions:
                    if self.strict:
                        raise GrammarError(f"Shift/Reduce conflict for terminal {la.name}. [strict-mode]\n ")
                    elif self.debug:
                        logger.warning('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.warning(' * %s', rule)
                    else:
                        logger.debug('Shift/Reduce conflict for terminal %s: (resolving as shift)', la.name)
                        logger.debug(' * %s', rule)
                else:
                    actions[la] = (Reduce, rule)
            m[itemset] = { k.name: v for k, v in actions.items() }
    
        if reduce_reduce:
            msgs = []
            for itemset, la, rules in reduce_reduce:
                msg = 'Reduce/Reduce collision in %s between the following rules: %s' % (la, ''.join([ '\n\t- ' + str(r) for r in rules ]))
                if self.debug:
                    msg += '\n    collision occurred in state: {%s\n    }' % ''.join(['\n\t' + str(x) for x in itemset.closure])
                msgs.append(msg)
>           raise GrammarError('\n\n'.join(msgs))
E           lark.exceptions.GrammarError: Reduce/Reduce collision in Terminal('NAME') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RBRACE') between the following rules: 
E           	- <qos_value : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <method_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('COMMA') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>
E           
E           Reduce/Reduce collision in Terminal('RPAR') between the following rules: 
E           	- <kernel_param_size_item : dotted_name>
E           	- <signed_atom : dotted_name>

.venv/lib/python3.13/site-packages/lark/parsers/lalr_analysis.py:306: GrammarError
=========================== short test summary info ============================
FAILED tests/test_comprehensive_features.py::TestComprehensiveNodeFeatures::test_complex_node_with_all_features
FAILED tests/test_comprehensive_features.py::TestAdvancedCppMethodFeatures::test_complex_cpp_methods
FAILED tests/test_comprehensive_features.py::TestAdvancedCudaKernelFeatures::test_complex_cuda_kernels
FAILED tests/test_comprehensive_features.py::TestSemanticValidation::test_duplicate_parameter_names
FAILED tests/test_comprehensive_features.py::TestSemanticValidation::test_duplicate_timer_names
FAILED tests/test_comprehensive_features.py::TestSemanticValidation::test_duplicate_publisher_topics
FAILED tests/test_comprehensive_features.py::TestSemanticValidation::test_duplicate_subscriber_topics
FAILED tests/test_comprehensive_features.py::TestSemanticValidation::test_duplicate_service_names
FAILED tests/test_comprehensive_features.py::TestSemanticValidation::test_duplicate_action_names
FAILED tests/test_comprehensive_features.py::TestSemanticValidation::test_duplicate_client_names
FAILED tests/test_comprehensive_features.py::TestSemanticValidation::test_duplicate_flag_names
FAILED tests/test_comprehensive_features.py::TestSemanticValidation::test_duplicate_method_names
FAILED tests/test_comprehensive_features.py::TestSemanticValidation::test_duplicate_kernel_names
FAILED tests/test_comprehensive_features.py::TestSemanticValidation::test_invalid_qos_values
FAILED tests/test_comprehensive_features.py::TestSemanticValidation::test_invalid_timer_period
FAILED tests/test_comprehensive_features.py::TestSemanticValidation::test_invalid_block_size
FAILED tests/test_comprehensive_features.py::TestEdgeCases::test_empty_node
FAILED tests/test_comprehensive_features.py::TestEdgeCases::test_node_with_only_comments
FAILED tests/test_comprehensive_features.py::TestEdgeCases::test_very_large_values
FAILED tests/test_comprehensive_features.py::TestEdgeCases::test_unicode_strings
FAILED tests/test_comprehensive_features.py::TestEdgeCases::test_nested_arrays_and_dicts
FAILED tests/test_comprehensive_features.py::TestEdgeCases::test_method_with_no_parameters
FAILED tests/test_comprehensive_features.py::TestEdgeCases::test_kernel_with_no_parameters
FAILED tests/test_comprehensive_features.py::TestErrorRecovery::test_multiple_nodes_with_one_invalid
FAILED tests/test_comprehensive_features.py::TestErrorRecovery::test_invalid_syntax_in_comments
FAILED tests/test_comprehensive_features.py::TestPerformance::test_large_number_of_parameters
FAILED tests/test_comprehensive_features.py::TestPerformance::test_large_number_of_publishers
FAILED tests/test_comprehensive_features.py::TestPerformance::test_large_code_blocks
FAILED tests/test_lark_parser.py::test_basic_node_parsing - lark.exceptions.G...
FAILED tests/test_lark_parser.py::test_cuda_kernel_parsing - lark.exceptions....
FAILED tests/test_lark_parser.py::test_qos_configuration - lark.exceptions.Gr...
FAILED tests/test_lark_parser.py::test_lifecycle_configuration - lark.excepti...
FAILED tests/test_lark_parser.py::test_timer_configuration - lark.exceptions....
FAILED tests/test_lark_parser.py::test_include_statements - lark.exceptions.G...
FAILED tests/test_lark_parser.py::test_comments - lark.exceptions.GrammarErro...
FAILED tests/test_lark_parser.py::test_semantic_errors - lark.exceptions.Gram...
FAILED tests/test_lark_parser.py::test_parse_errors - lark.exceptions.Grammar...
FAILED tests/test_lark_parser.py::test_complex_value_types - lark.exceptions....
FAILED tests/test_lark_parser.py::test_remapping - lark.exceptions.GrammarErr...
FAILED tests/test_lark_parser.py::test_namespace - lark.exceptions.GrammarErr...
FAILED tests/test_lark_parser.py::test_cpp_method_parsing - lark.exceptions.G...
FAILED tests/test_lark_parser.py::test_node_with_cuda_kernels - lark.exceptio...
FAILED tests/test_lark_parser.py::test_enhanced_cpp_method_parsing - lark.exc...
FAILED tests/test_lark_parser.py::test_enhanced_cpp_method_semantic_validation
FAILED tests/test_parser.py::test_parse_empty_config - lark.exceptions.Gramma...
FAILED tests/test_parser.py::test_parse_node_with_publisher - lark.exceptions...
FAILED tests/test_parser.py::test_parse_node_with_subscriber - lark.exception...
FAILED tests/test_parser.py::test_parse_node_with_service - lark.exceptions.G...
FAILED tests/test_parser.py::test_parse_node_with_parameters - lark.exception...
FAILED tests/test_parser.py::test_parse_node_with_qos - lark.exceptions.Gramm...
FAILED tests/test_parser.py::test_parse_cuda_kernels - lark.exceptions.Gramma...
FAILED tests/test_parser.py::test_parse_include - lark.exceptions.GrammarErro...
FAILED tests/test_parser.py::test_parse_complex_config - lark.exceptions.Gram...
FAILED tests/test_parser.py::test_cross_reference_validation - ModuleNotFound...
FAILED tests/test_qos_config.py::test_qos_config_parsing - lark.exceptions.Gr...
FAILED tests/test_qos_config.py::test_qos_reliability_values - lark.exception...
FAILED tests/test_qos_config.py::test_qos_durability_values - lark.exceptions...
FAILED tests/test_qos_config.py::test_qos_history_values - lark.exceptions.Gr...
FAILED tests/test_qos_config.py::test_qos_liveliness_values - lark.exceptions...
FAILED tests/test_qos_config.py::test_qos_multiple_settings - lark.exceptions...
FAILED tests/test_qos_config.py::test_qos_default_values - lark.exceptions.Gr...
FAILED tests/test_qos_config.py::test_qos_numeric_values - lark.exceptions.Gr...
FAILED tests/test_validator.py::TestRoboDSLValidator::test_valid_content - la...
FAILED tests/test_validator.py::TestRoboDSLValidator::test_parse_error - lark...
FAILED tests/test_validator.py::TestRoboDSLValidator::test_semantic_error - l...
FAILED tests/test_validator.py::TestRoboDSLValidator::test_style_validation
FAILED tests/test_validator.py::TestRoboDSLValidator::test_naming_conventions
FAILED tests/test_validator.py::TestRoboDSLValidator::test_best_practices - l...
FAILED tests/test_validator.py::TestRoboDSLValidator::test_performance_validation
FAILED tests/test_validator.py::TestRoboDSLValidator::test_cuda_kernel_validation
FAILED tests/test_validator.py::TestRoboDSLLinter::test_format_string - lark....
FAILED tests/test_validator.py::TestRoboDSLLinter::test_remove_trailing_whitespace
FAILED tests/test_validator.py::TestRoboDSLLinter::test_indentation_fixing - ...
FAILED tests/test_validator.py::TestRoboDSLLinter::test_check_formatting - la...
FAILED tests/test_validator.py::TestConvenienceFunctions::test_validate_robodsl_file
FAILED tests/test_validator.py::TestConvenienceFunctions::test_format_robodsl_file
======================== 76 failed, 25 passed in 3.91s =========================
