// Generated by RoboDSL - DO NOT EDIT

#include "nodes/perception/camera_synchronizer_node.hpp"
#include <memory>
#include <vector>
#include <map>
#include <cmath>
#include <stdexcept>



Camera_synchronizerNode::Camera_synchronizerNode(const rclcpp::NodeOptions& options)
: rclcpp::Node("camera_synchronizer", options)
{
    // Initialize parameters
    this->declare_parameter<double>("sync_tolerance", 0.033);
    this->declare_parameter<int>("max_queue_size", 10);

    // Create publishers
    {
        rclcpp::QoS qos(10);
        synchronized_camera1_pub_ = this->create_publisher<sensor_msgs::msg::Image>(
            "/synchronized/camera1", qos);
    }
    {
        rclcpp::QoS qos(10);
        synchronized_camera2_pub_ = this->create_publisher<sensor_msgs::msg::Image>(
            "/synchronized/camera2", qos);
    }
    {
        rclcpp::QoS qos(10);
        synchronized_camera3_pub_ = this->create_publisher<sensor_msgs::msg::Image>(
            "/synchronized/camera3", qos);
    }

    // Create subscribers
    {
        rclcpp::QoS qos(10);
        auto callback = std::bind(
            &Camera_synchronizerNode::on_camera_image_raw, 
            this, 
            std::placeholders::_1
        );
        camera_image_raw_sub_ = this->create_subscription<sensor_msgs::msg::Image>(
            "/camera/image_raw", 
            qos, 
            callback
        );
    }
    {
        rclcpp::QoS qos(10);
        auto callback = std::bind(
            &Camera_synchronizerNode::on_camera2_image_raw, 
            this, 
            std::placeholders::_1
        );
        camera2_image_raw_sub_ = this->create_subscription<sensor_msgs::msg::Image>(
            "/camera2/image_raw", 
            qos, 
            callback
        );
    }
    {
        rclcpp::QoS qos(10);
        auto callback = std::bind(
            &Camera_synchronizerNode::on_camera3_image_raw, 
            this, 
            std::placeholders::_1
        );
        camera3_image_raw_sub_ = this->create_subscription<sensor_msgs::msg::Image>(
            "/camera3/image_raw", 
            qos, 
            callback
        );
    }

    // Create services
    

    // Create timers

}

Camera_synchronizerNode::~Camera_synchronizerNode()
{
}


// Timer callbacks

// Subscriber callbacks
void Camera_synchronizerNode::on_camera_image_raw(const sensor_msgs::msg::Image::ConstSharedPtr msg)
{
    latest_camera_image_raw_ = msg;
    
    RCLCPP_DEBUG(this->get_logger(), "Received message on /camera/image_raw");
}
void Camera_synchronizerNode::on_camera2_image_raw(const sensor_msgs::msg::Image::ConstSharedPtr msg)
{
    latest_camera2_image_raw_ = msg;
    
    RCLCPP_DEBUG(this->get_logger(), "Received message on /camera2/image_raw");
}
void Camera_synchronizerNode::on_camera3_image_raw(const sensor_msgs::msg::Image::ConstSharedPtr msg)
{
    latest_camera3_image_raw_ = msg;
    
    RCLCPP_DEBUG(this->get_logger(), "Received message on /camera3/image_raw");
}

// Service callbacks



// User-defined C++ methods


int main(int argc, char* argv[])
{
    rclcpp::init(argc, argv);
    auto node = std::make_shared<Camera_synchronizerNode>();
    rclcpp::spin(node);
    rclcpp::shutdown();
    return 0;
}
