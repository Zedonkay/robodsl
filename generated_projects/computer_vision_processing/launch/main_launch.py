#!/usr/bin/env python3
"""
Launch all nodes from RoboDSL specification

This file was auto-generated by RoboDSL.
"""

from launch import LaunchDescription
from launch_ros.actions import Node
from launch.actions import DeclareLaunchArgument
from launch.substitutions import LaunchConfiguration

def generate_launch_description():
    # Declare launch arguments
    launch_arguments = [
        DeclareLaunchArgument(
            'use_sim_time',
            default_value='false',
            description='Use simulation time'
        ),
        DeclareLaunchArgument(
            'log_level',
            default_value='info',
            description='Log level for all nodes'
        ),
    ]
    
    # Create nodes
    nodes = []
    # vision_processor node
    vision_processor_node = Node(
        package='robodsl_package',
        executable='vision_processor_node',
        name='vision_processor_node',
        namespace='/vision_processor',
        output='screen',
        parameters=[
            {'processing_frequency': 0.0},
            {'image_width': 0},
            {'image_height': 0},
            {'resize_width': 0},
            {'resize_height': 0},
            {'confidence_threshold': 0.0},
            {'nms_threshold': 0.0},
            {'max_detections': 0},
            {'enable_edge_detection': False},
            {'enable_optical_flow': False},
            {'enable_feature_matching': False},
            {'gaussian_blur_sigma': 0.0},
            {'edge_detection_threshold': 0.0},
            {'object_detector_path': ""},
            {'face_recognition_path': ""},
            {'pose_estimation_path': ""},
            {'depth_estimation_path': ""},
            {'optical_flow_path': ""},
            {'use_sim_time': LaunchConfiguration("use_sim_time")},
        ],
        arguments=['--ros-args', '--log-level', LaunchConfiguration('log_level')],
    )
    nodes.append(vision_processor_node)
    # camera_synchronizer node
    camera_synchronizer_node = Node(
        package='robodsl_package',
        executable='camera_synchronizer_node',
        name='camera_synchronizer_node',
        namespace='/camera_synchronizer',
        output='screen',
        parameters=[
            {'sync_tolerance': 0.0},
            {'max_queue_size': 0},
            {'use_sim_time': LaunchConfiguration("use_sim_time")},
        ],
        arguments=['--ros-args', '--log-level', LaunchConfiguration('log_level')],
    )
    nodes.append(camera_synchronizer_node)

    return LaunchDescription(launch_arguments + nodes) 