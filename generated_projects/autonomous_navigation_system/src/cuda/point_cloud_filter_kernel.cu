// Generated by RoboDSL - DO NOT EDIT


#include "cuda/point_cloud_filter_kernel.cuh"
#include <algorithm>
#include <stdexcept>

// Define uchar type if not already defined
#ifndef __UCHAR_TYPE__
typedef unsigned char uchar;
#endif

namespace robodsl {

namespace {

// Device kernel implementation
__global__ void point_cloud_filter_kernel(
    float** raw_points,    int* num_points,    float* min_distance,    float* max_distance,    float** filtered_points,    int** filtered_count, int num_elements
) {
    const int idx = blockIdx.x * blockDim.x + threadIdx.x;
    const int stride = blockDim.x * gridDim.x;

    // Process elements in parallel
    for (int i = idx; i < num_elements; i += stride) {
        // Kernel implementation here
        // Example: output[i] = process(input[i], parameters);
    }
}

} // anonymous namespace

point_cloud_filterKernel::point_cloud_filterKernel(cudaStream_t* stream)
    : stream_(stream) {
    // Initialize CUDA device if needed
    cudaError_t status = cudaGetDevice(&device_id_);
    if (status != cudaSuccess) {
        last_error_ = std::string("Failed to get CUDA device: ") + cudaGetErrorString(status);
        return;
    }
    
    // Get device properties
    cudaDeviceProp props;
    status = cudaGetDeviceProperties(&props, device_id_);
    if (status != cudaSuccess) {
        last_error_ = std::string("Failed to get device properties: ") + cudaGetErrorString(status);
        return;
    }
    
    // Calculate optimal block size based on device properties
    max_threads_per_block_ = props.maxThreadsPerBlock;
    max_blocks_per_dim_ = props.maxGridSize[0];
    
    // CUDA device initialized successfully
    // Device: %s (Compute %d.%d)
}

point_cloud_filterKernel::~point_cloud_filterKernel() {
    try {
        freeDeviceMemory();
    } catch (const std::exception& e) {
        // Error in destructor: %s
    }
}

bool point_cloud_filterKernel::initialize(const float** input, size_t input_size) {
    if (!input || input_size == 0) {
        last_error_ = "Input pointer is null or size is zero";
        return false;
    }
    
    // Free any previously allocated memory
    freeDeviceMemory();
    
    // Store input size
    input_size_ = input_size;
    
    // Allocate device memory
    if (!allocateDeviceMemory()) {
        return false;
    }
    
    // Declare status variable once
    cudaError_t status;
    
    // Copy input data to device
    status = cudaMemcpyAsync(
        d_raw_points_, 
        input, 
        input_size_ * sizeof(float*), 
        cudaMemcpyHostToDevice,
        stream_ ? *stream_ : 0
    );
    
    if (!checkCudaError(status, "Copy raw_points to device")) {
        return false;
    }
    status = cudaMemcpyAsync(
        d_num_points_, 
        input, 
        input_size_ * sizeof(int), 
        cudaMemcpyHostToDevice,
        stream_ ? *stream_ : 0
    );
    
    if (!checkCudaError(status, "Copy num_points to device")) {
        return false;
    }
    status = cudaMemcpyAsync(
        d_min_distance_, 
        input, 
        input_size_ * sizeof(float), 
        cudaMemcpyHostToDevice,
        stream_ ? *stream_ : 0
    );
    
    if (!checkCudaError(status, "Copy min_distance to device")) {
        return false;
    }
    status = cudaMemcpyAsync(
        d_max_distance_, 
        input, 
        input_size_ * sizeof(float), 
        cudaMemcpyHostToDevice,
        stream_ ? *stream_ : 0
    );
    
    if (!checkCudaError(status, "Copy max_distance to device")) {
        return false;
    }
    
    // Synchronize to ensure the copy is complete
    if (stream_) {
        status = cudaStreamSynchronize(*stream_);
    } else {
        status = cudaDeviceSynchronize();
    }
    
    if (!checkCudaError(status, "Synchronize after initialization")) {
        return false;
    }
    
    initialized_ = true;
    return true;
}

bool point_cloud_filterKernel::process(const int** parameters, size_t param_size, float** output, size_t output_size) {
    if (!initialized_) {
        return false;
    }
    
    if (!output || output_size < input_size_) {
        last_error_ = "Output buffer is null or too small";
        return false;
    }
    
    // Declare status variable for this method
    cudaError_t status;
    
    // Copy parameters to device if needed
    if (parameters && !parameters_copied_) {
        status = cudaMemcpyAsync(
            d_parameters_, 
            parameters, 
            param_size, 
            cudaMemcpyHostToDevice,
            stream_ ? *stream_ : 0
        );
        
        if (!checkCudaError(status, "Copy parameters to device")) {
            return false;
        }
        
        parameters_copied_ = true;
    }
    
    // Calculate grid and block dimensions
    int block_size = std::min(max_threads_per_block_, kBlockSize);
    int num_blocks = (input_size_ + block_size - 1) / block_size;
    num_blocks = std::min(num_blocks, max_blocks_per_dim_);
    
    // Launch kernel
    point_cloud_filter_kernel<<<num_blocks, block_size, 0, stream_ ? *stream_ : 0>>>(
        d_raw_points_,        d_num_points_,        d_min_distance_,        d_max_distance_,        d_filtered_points_,        d_filtered_count_, input_size_
    );
    
    // Check for kernel launch errors
    status = cudaGetLastError();
    if (!checkCudaError(status, "Kernel launch")) {
        return false;
    }
    
    // Copy results back to host
    status = cudaMemcpyAsync(
        output, 
        d_filtered_points_, 
        input_size_ * sizeof(float*), 
        cudaMemcpyDeviceToHost,
        stream_ ? *stream_ : 0
    );
    
    if (!checkCudaError(status, "Copy filtered_points from device")) {
        return false;
    }
    status = cudaMemcpyAsync(
        output, 
        d_filtered_count_, 
        input_size_ * sizeof(int*), 
        cudaMemcpyDeviceToHost,
        stream_ ? *stream_ : 0
    );
    
    if (!checkCudaError(status, "Copy filtered_count from device")) {
        return false;
    }
    
    // Synchronize to ensure the copy is complete
    if (stream_) {
        status = cudaStreamSynchronize(*stream_);
    } else {
        status = cudaDeviceSynchronize();
    }
    
    if (!checkCudaError(status, "Synchronize after processing")) {
        return false;
    }
    
    return true;
}

bool point_cloud_filterKernel::allocateDeviceMemory() {
    cudaError_t status;
    
    // Allocate memory for all parameters
    status = cudaMalloc(&d_raw_points_, input_size_ * sizeof(float*));
    if (!checkCudaError(status, "Allocate raw_points memory")) {
        // Free previously allocated memory
        return false;
    }
    status = cudaMalloc(&d_num_points_, input_size_ * sizeof(int));
    if (!checkCudaError(status, "Allocate num_points memory")) {
        // Free previously allocated memory
        if (d_raw_points_) {
            cudaFree(d_raw_points_);
            d_raw_points_ = nullptr;
        }
        return false;
    }
    status = cudaMalloc(&d_min_distance_, input_size_ * sizeof(float));
    if (!checkCudaError(status, "Allocate min_distance memory")) {
        // Free previously allocated memory
        if (d_raw_points_) {
            cudaFree(d_raw_points_);
            d_raw_points_ = nullptr;
        }
        if (d_num_points_) {
            cudaFree(d_num_points_);
            d_num_points_ = nullptr;
        }
        return false;
    }
    status = cudaMalloc(&d_max_distance_, input_size_ * sizeof(float));
    if (!checkCudaError(status, "Allocate max_distance memory")) {
        // Free previously allocated memory
        if (d_raw_points_) {
            cudaFree(d_raw_points_);
            d_raw_points_ = nullptr;
        }
        if (d_num_points_) {
            cudaFree(d_num_points_);
            d_num_points_ = nullptr;
        }
        if (d_min_distance_) {
            cudaFree(d_min_distance_);
            d_min_distance_ = nullptr;
        }
        return false;
    }
    status = cudaMalloc(&d_filtered_points_, input_size_ * sizeof(float*));
    if (!checkCudaError(status, "Allocate filtered_points memory")) {
        // Free previously allocated memory
        if (d_raw_points_) {
            cudaFree(d_raw_points_);
            d_raw_points_ = nullptr;
        }
        if (d_num_points_) {
            cudaFree(d_num_points_);
            d_num_points_ = nullptr;
        }
        if (d_min_distance_) {
            cudaFree(d_min_distance_);
            d_min_distance_ = nullptr;
        }
        if (d_max_distance_) {
            cudaFree(d_max_distance_);
            d_max_distance_ = nullptr;
        }
        return false;
    }
    status = cudaMalloc(&d_filtered_count_, input_size_ * sizeof(int*));
    if (!checkCudaError(status, "Allocate filtered_count memory")) {
        // Free previously allocated memory
        if (d_raw_points_) {
            cudaFree(d_raw_points_);
            d_raw_points_ = nullptr;
        }
        if (d_num_points_) {
            cudaFree(d_num_points_);
            d_num_points_ = nullptr;
        }
        if (d_min_distance_) {
            cudaFree(d_min_distance_);
            d_min_distance_ = nullptr;
        }
        if (d_max_distance_) {
            cudaFree(d_max_distance_);
            d_max_distance_ = nullptr;
        }
        if (d_filtered_points_) {
            cudaFree(d_filtered_points_);
            d_filtered_points_ = nullptr;
        }
        return false;
    }
    
    return true;
}

void point_cloud_filterKernel::freeDeviceMemory() {
    if (d_raw_points_) {
        cudaFree(d_raw_points_);
        d_raw_points_ = nullptr;
    }
    if (d_num_points_) {
        cudaFree(d_num_points_);
        d_num_points_ = nullptr;
    }
    if (d_min_distance_) {
        cudaFree(d_min_distance_);
        d_min_distance_ = nullptr;
    }
    if (d_max_distance_) {
        cudaFree(d_max_distance_);
        d_max_distance_ = nullptr;
    }
    if (d_filtered_points_) {
        cudaFree(d_filtered_points_);
        d_filtered_points_ = nullptr;
    }
    if (d_filtered_count_) {
        cudaFree(d_filtered_count_);
        d_filtered_count_ = nullptr;
    }
    
    input_size_ = 0;
    initialized_ = false;
    parameters_copied_ = false;
}

bool point_cloud_filterKernel::checkCudaError(cudaError_t status, const std::string& context) {
    if (status != cudaSuccess) {
        last_error_ = context + ": " + cudaGetErrorString(status);
        return false;
    }
    return true;
}

} // namespace robodsl
