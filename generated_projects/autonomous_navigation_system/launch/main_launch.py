#!/usr/bin/env python3
"""
Launch all nodes from RoboDSL specification

This file was auto-generated by RoboDSL.
"""

from launch import LaunchDescription
from launch_ros.actions import Node
from launch.actions import DeclareLaunchArgument
from launch.substitutions import LaunchConfiguration

def generate_launch_description():
    # Declare launch arguments
    launch_arguments = [
        DeclareLaunchArgument(
            'use_sim_time',
            default_value='false',
            description='Use simulation time'
        ),
        DeclareLaunchArgument(
            'log_level',
            default_value='info',
            description='Log level for all nodes'
        ),
    ]
    
    # Create nodes
    nodes = []
    # autonomous_navigator node
    autonomous_navigator_node = Node(
        package='robodsl_package',
        executable='autonomous_navigator_node',
        name='autonomous_navigator_node',
        namespace='/autonomous_navigator',
        output='screen',
        parameters=[
            {'map_resolution': 0.0},
            {'map_width': 0},
            {'map_height': 0},
            {'min_point_distance': 0.0},
            {'max_point_distance': 0.0},
            {'yolo_model_path': ""},
            {'semantic_model_path': ""},
            {'confidence_threshold': 0.0},
            {'max_linear_velocity': 0.0},
            {'max_angular_velocity': 0.0},
            {'path_planning_frequency': 0.0},
            {'slam_update_frequency': 0.0},
            {'use_sim_time': LaunchConfiguration("use_sim_time")},
        ],
        arguments=['--ros-args', '--log-level', LaunchConfiguration('log_level')],
    )
    nodes.append(autonomous_navigator_node)
    # robot_localizer node
    robot_localizer_node = Node(
        package='robodsl_package',
        executable='robot_localizer_node',
        name='robot_localizer_node',
        namespace='/robot_localizer',
        output='screen',
        parameters=[
            {'localization_frequency': 0.0},
            {'use_ekf': False},
            {'use_particle_filter': False},
            {'use_sim_time': LaunchConfiguration("use_sim_time")},
        ],
        arguments=['--ros-args', '--log-level', LaunchConfiguration('log_level')],
    )
    nodes.append(robot_localizer_node)

    return LaunchDescription(launch_arguments + nodes) 