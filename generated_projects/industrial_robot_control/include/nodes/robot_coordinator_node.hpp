// Generated by RoboDSL - DO NOT EDIT

#ifndef ROBOT_COORDINATOR_NODE_HPP
#define ROBOT_COORDINATOR_NODE_HPP

// Standard includes
#include <memory>
#include <string>
#include <vector>
#include <map>
#include <cmath>
#include <functional>
#include <thread>
#include <atomic>

// ROS2 includes
#include <rclcpp/rclcpp.hpp>

// Message includes
#include <std_msgs/msg/bool.hpp>
#include <trajectory_msgs/msg/joint_trajectory.hpp>

// Additional ROS2 includes

// CUDA includes (if needed)

// OpenCV includes (if needed)

// Type definitions
#ifndef __UCHAR_TYPE__
typedef unsigned char uchar;
#endif

// Forward declarations for custom types

// CUDA parameter structs


class Robot_coordinatorNode : public rclcpp::Node {
public:
    explicit Robot_coordinatorNode(const rclcpp::NodeOptions& options = rclcpp::NodeOptions());
    virtual ~Robot_coordinatorNode();


    // Timer callbacks
    void on_coordination_timer();

    // Subscriber callbacks
    void on_robot1_status(const std_msgs::msg::Bool::ConstSharedPtr msg);
    void on_robot2_status(const std_msgs::msg::Bool::ConstSharedPtr msg);
    void on_robot3_status(const std_msgs::msg::Bool::ConstSharedPtr msg);

    // Service callbacks



    // User-defined C++ methods

private:
    // Publishers
    std::shared_ptr<rclcpp::Publisher<trajectory_msgs::msg::JointTrajectory>> robot1_coordinated_command_pub_;
    std::shared_ptr<rclcpp::Publisher<trajectory_msgs::msg::JointTrajectory>> robot2_coordinated_command_pub_;
    std::shared_ptr<rclcpp::Publisher<trajectory_msgs::msg::JointTrajectory>> robot3_coordinated_command_pub_;

    // Subscribers
    rclcpp::Subscription<std_msgs::msg::Bool>::SharedPtr robot1_status_sub_;
    rclcpp::Subscription<std_msgs::msg::Bool>::SharedPtr robot2_status_sub_;
    rclcpp::Subscription<std_msgs::msg::Bool>::SharedPtr robot3_status_sub_;

    // Services


    // Timers
    rclcpp::TimerBase::SharedPtr coordination_timer_timer_;

    // Lifecycle state tracking

    
    // Processing control
    bool enable_processing_{true};

    // Parameters
    double coordination_frequency_;
    double inter_robot_safety_distance_;

    // Latest message storage (per-subscriber)
    std_msgs::msg::Bool::ConstSharedPtr latest_robot1_status_;
    std_msgs::msg::Bool::ConstSharedPtr latest_robot2_status_;
    std_msgs::msg::Bool::ConstSharedPtr latest_robot3_status_;

    // CUDA kernel member variables

    // Helper methods
    void init_parameters();
    void init_publishers();
    void init_subscribers();
    void init_services();
    void init_timers();
};


#endif // ROBOT_COORDINATOR_NODE_HPP
