// Generated by RoboDSL - DO NOT EDIT

#include "nodes/safety/safety_monitor_node.hpp"
#include <memory>
#include <vector>
#include <map>
#include <cmath>
#include <stdexcept>



Safety_monitorNode::Safety_monitorNode(const rclcpp::NodeOptions& options)
: rclcpp::Node("safety_monitor", options)
{
    // Initialize parameters
    this->declare_parameter<double>("safety_check_frequency", 100.0);
    this->declare_parameter<double>("emergency_threshold", 0.8);

    // Create publishers
    {
        rclcpp::QoS qos(10);
        safety_emergency_stop_pub_ = this->create_publisher<std_msgs::msg::Bool>(
            "/safety/emergency_stop", qos);
    }
    {
        rclcpp::QoS qos(10);
        safety_safety_status_pub_ = this->create_publisher<std_msgs::msg::String>(
            "/safety/safety_status", qos);
    }

    // Create subscribers
    {
        rclcpp::QoS qos(10);
        auto callback = std::bind(
            &Safety_monitorNode::on_vehicle_kinematic_state, 
            this, 
            std::placeholders::_1
        );
        vehicle_kinematic_state_sub_ = this->create_subscription<std_msgs::msg::Float64MultiArray>(
            "/vehicle/kinematic_state", 
            qos, 
            callback
        );
    }
    {
        rclcpp::QoS qos(10);
        auto callback = std::bind(
            &Safety_monitorNode::on_safety_monitoring, 
            this, 
            std::placeholders::_1
        );
        safety_monitoring_sub_ = this->create_subscription<std_msgs::msg::Bool>(
            "/safety/monitoring", 
            qos, 
            callback
        );
    }

    // Create services
    

    // Create timers
    safety_timer_timer_ = this->create_wall_timer(
        std::chrono::duration<double>(1.0),
        std::bind(&Safety_monitorNode::on_safety_timer, this)
    );

}

Safety_monitorNode::~Safety_monitorNode()
{
}


// Timer callbacks
void Safety_monitorNode::on_safety_timer()
{
    RCLCPP_DEBUG(this->get_logger(), "Timer safety_timer triggered");
    
    // Custom timer implementation
    RCLCPP_DEBUG(this->get_logger(), "Custom timer safety_timer executed");
}

// Subscriber callbacks
void Safety_monitorNode::on_vehicle_kinematic_state(const std_msgs::msg::Float64MultiArray::ConstSharedPtr msg)
{
    latest_vehicle_kinematic_state_ = msg;
    
    RCLCPP_DEBUG(this->get_logger(), "Received message on /vehicle/kinematic_state");
}
void Safety_monitorNode::on_safety_monitoring(const std_msgs::msg::Bool::ConstSharedPtr msg)
{
    latest_safety_monitoring_ = msg;
    
    RCLCPP_DEBUG(this->get_logger(), "Received message on /safety/monitoring");
}

// Service callbacks



// User-defined C++ methods


int main(int argc, char* argv[])
{
    rclcpp::init(argc, argv);
    auto node = std::make_shared<Safety_monitorNode>();
    rclcpp::spin(node);
    rclcpp::shutdown();
    return 0;
}
