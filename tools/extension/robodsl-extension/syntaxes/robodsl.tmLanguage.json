{
    "name": "RoboDSL",
    "scopeName": "source.robodsl",
    "fileTypes": ["robodsl"],
    "patterns": [
        {
            "include": "#includes"
        },
        {
            "include": "#node-definition"
        },
        {
            "include": "#cuda-kernels-block"
        },
        {
            "include": "#onnx-model"
        },
        {
            "include": "#comments"
        },
        {
            "include": "#keywords"
        },
        {
            "include": "#qos-settings"
        },
        {
            "include": "#strings"
        },
        {
            "include": "#raw-strings"
        },
        {
            "include": "#numbers"
        },
        {
            "include": "#operators"
        },
        {
            "include": "#topic-paths"
        },
        {
            "include": "#topic-path"
        },
        {
            "include": "#expressions"
        },
        {
            "include": "#values"
        },
        {
            "include": "#pipeline-definition"
        },
        {
            "include": "#stage-definition"
        },
        {
            "include": "#stage-content"
        },
        {
            "include": "#stage-input"
        },
        {
            "include": "#stage-output"
        },
        {
            "include": "#stage-method"
        },
        {
            "include": "#stage-model"
        },
        {
            "include": "#stage-topic"
        },
        {
            "include": "#stage-cuda-kernel"
        },
        {
            "include": "#stage-onnx-model"
        },
        {
            "include": "#onnx-input-def"
        },
        {
            "include": "#onnx-output-def"
        },
        {
            "include": "#onnx-device"
        },
        {
            "include": "#onnx-optimization"
        },
        {
            "include": "#cuda-block-size"
        },
        {
            "include": "#cuda-grid-size"
        },
        {
            "include": "#cuda-shared-memory"
        },
        {
            "include": "#cuda-use-thrust"
        },
        {
            "include": "#cuda-kernel-input"
        },
        {
            "include": "#cuda-kernel-output"
        },
        {
            "include": "#cpp-input-param"
        },
        {
            "include": "#cpp-output-param"
        },
        {
            "include": "#binary-operators"
        },
        {
            "include": "#dotted-name"
        },
        {
            "include": "#topic-type-string"
        },
        {
            "include": "#signed-number"
        },
        {
            "include": "#type-with-array"
        }
    ],
    "repository": {
        "includes": {
            "patterns": [
                {
                    "name": "meta.preprocessor.include.robodsl",
                    "match": "\\b(include)\\s*(<[^>]+>|\\\"[^\"]+\")",
                    "captures": {
                        "1": { "name": "keyword.control.import.include.robodsl" },
                        "2": { "name": "string.quoted.other.lt-gt.include.robodsl" }
                    }
                }
            ]
        },
        "node-definition": {
            "name": "meta.node-definition.robodsl",
            "begin": "\\b(node)\\s+([a-zA-Z_][a-zA-Z0-9_]*)",
            "end": "\\}",
            "beginCaptures": {
                "1": { "name": "keyword.control.robodsl" },
                "2": { "name": "entity.name.class.robodsl" }
            },
            "endCaptures": {
                "0": { "name": "punctuation.section.block.end.robodsl" }
            },
            "patterns": [
                {
                    "include": "#node-content"
                },
                {
                    "include": "#comments"
                }
            ]
        },
        "node-content": {
            "patterns": [
                {
                    "include": "#parameter"
                },
                {
                    "include": "#parameter-simple"
                },
                {
                    "include": "#parameter-callbacks"
                },
                {
                    "include": "#lifecycle"
                },
                {
                    "include": "#lifecycle-simple"
                },
                {
                    "include": "#timer"
                },
                {
                    "include": "#remap"
                },
                {
                    "include": "#namespace"
                },
                {
                    "include": "#flag"
                },
                {
                    "include": "#cpp-method"
                },
                {
                    "include": "#ros-primitives"
                }
            ]
        },
        "parameter": {
            "name": "meta.parameter.robodsl",
            "match": "\\b(parameter)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*=",
            "captures": {
                "1": { "name": "keyword.control.robodsl" },
                "2": { "name": "storage.type.robodsl" },
                "3": { "name": "variable.parameter.robodsl" }
            }
        },
        "parameter-simple": {
            "name": "meta.parameter.robodsl",
            "match": "\\b(parameter)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*=",
            "captures": {
                "1": { "name": "keyword.control.robodsl" },
                "2": { "name": "variable.parameter.robodsl" }
            }
        },
        "lifecycle": {
            "name": "meta.lifecycle.robodsl",
            "begin": "\\b(lifecycle)\\s*\\{",
            "end": "\\}",
            "beginCaptures": {
                "1": { "name": "keyword.control.robodsl" }
            },
            "patterns": [
                {
                    "include": "#lifecycle-settings"
                }
            ]
        },
        "lifecycle-settings": {
            "patterns": [
                {
                    "name": "meta.lifecycle-setting.robodsl",
                    "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*:\\s*(true|false)\\b",
                    "captures": {
                        "1": { "name": "variable.other.robodsl" },
                        "2": { "name": "constant.language.boolean.robodsl" }
                    }
                }
            ]
        },
        "timer": {
            "name": "meta.timer.robodsl",
            "match": "\\b(timer)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*:",
            "captures": {
                "1": { "name": "keyword.control.robodsl" },
                "2": { "name": "variable.other.robodsl" }
            }
        },
        "remap": {
            "name": "meta.remap.robodsl",
            "match": "\\b(remap)\\s+(from:\\s*[\\/][a-zA-Z_][a-zA-Z0-9_\\/\\.]*\\s+to:\\s*[\\/][a-zA-Z_][a-zA-Z0-9_\\/\\.]*|[\\/][a-zA-Z_][a-zA-Z0-9_\\/\\.]*\\s*:\\s*[\\/][a-zA-Z_][a-zA-Z0-9_\\/\\.]*)",
            "captures": {
                "1": { "name": "keyword.control.robodsl" }
            }
        },
        "namespace": {
            "name": "meta.namespace.robodsl",
            "match": "\\b(namespace)\\s*:?\\s*([\\/][a-zA-Z_][a-zA-Z0-9_\\/\\.]*)",
            "captures": {
                "1": { "name": "keyword.control.robodsl" },
                "2": { "name": "string.other.robodsl" }
            }
        },
        "flag": {
            "name": "meta.flag.robodsl",
            "match": "\\b(flag)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*:\\s*(true|false)\\b",
            "captures": {
                "1": { "name": "keyword.control.robodsl" },
                "2": { "name": "variable.other.robodsl" },
                "3": { "name": "constant.language.boolean.robodsl" }
            }
        },
        "cpp-method": {
            "name": "meta.cpp-method.robodsl",
            "begin": "\\b(method)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\{",
            "end": "\\}",
            "beginCaptures": {
                "1": { "name": "keyword.control.robodsl" },
                "2": { "name": "entity.name.function.robodsl" }
            },
            "patterns": [
                { "include": "#comments" },
                { "include": "#method-content" }
            ]
        },
        "method-content": {
            "patterns": [
                { "include": "#comments" },
                { "include": "#input-param" },
                { "include": "#output-param" },
                { "include": "#code-block-cpp" }
            ]
        },
        "code-block-cpp": {
            "name": "meta.code-block.cpp.robodsl",
            "begin": "\\b(code)\\s*:?\\s*\\{",
            "end": "\\}",
            "beginCaptures": {
                "1": { "name": "keyword.control.robodsl" }
            },
            "patterns": [
                { "name": "source.cpp.embedded.robodsl", "begin": "", "end": "", "patterns": [ { "include": "source.cpp" } ] }
            ]
        },
        "input-param": {
            "name": "meta.input-param.robodsl",
            "match": "\\b(input)\\s+([a-zA-Z_:<>\\*\\s\\[\\]]+)\\s+([a-zA-Z_][a-zA-Z0-9_]*)",
            "captures": {
                "1": { "name": "keyword.control.robodsl" },
                "2": { "name": "storage.type.robodsl" },
                "3": { "name": "variable.parameter.robodsl" }
            }
        },
        "output-param": {
            "name": "meta.output-param.robodsl",
            "match": "\\b(output)\\s+([a-zA-Z_:<>\\*\\s\\[\\]]+)\\s+([a-zA-Z_][a-zA-Z0-9_]*)",
            "captures": {
                "1": { "name": "keyword.control.robodsl" },
                "2": { "name": "storage.type.robodsl" },
                "3": { "name": "variable.parameter.robodsl" }
            }
        },
        "ros-primitives": {
            "patterns": [
                {
                    "include": "#publisher"
                },
                {
                    "include": "#publisher-simple"
                },
                {
                    "include": "#subscriber"
                },
                {
                    "include": "#subscriber-simple"
                },
                {
                    "include": "#service"
                },
                {
                    "include": "#client"
                },
                {
                    "include": "#action"
                }
            ]
        },
        "publisher": {
            "name": "meta.publisher.robodsl",
            "match": "\\b(publisher)\\s+([\\/][a-zA-Z_][a-zA-Z0-9_\\/\\.]*)\\s*:",
            "captures": {
                "1": { "name": "keyword.control.robodsl" },
                "2": { "name": "string.other.robodsl" }
            }
        },
        "publisher-simple": {
            "name": "meta.publisher.robodsl",
            "match": "\\b(publisher)\\s+([\\/][a-zA-Z_][a-zA-Z0-9_\\/\\.]*)\\s+([a-zA-Z_][a-zA-Z0-9_]*(?:\\/[a-zA-Z_][a-zA-Z0-9_]*)*)",
            "captures": {
                "1": { "name": "keyword.control.robodsl" },
                "2": { "name": "string.other.robodsl" },
                "3": { "name": "support.type.robodsl" }
            }
        },
        "subscriber": {
            "name": "meta.subscriber.robodsl",
            "match": "\\b(subscriber)\\s+([\\/][a-zA-Z_][a-zA-Z0-9_\\/\\.]*)\\s*:",
            "captures": {
                "1": { "name": "keyword.control.robodsl" },
                "2": { "name": "string.other.robodsl" }
            }
        },
        "subscriber-simple": {
            "name": "meta.subscriber.robodsl",
            "match": "\\b(subscriber)\\s+([\\/][a-zA-Z_][a-zA-Z0-9_\\/\\.]*)\\s+([a-zA-Z_][a-zA-Z0-9_]*(?:\\/[a-zA-Z_][a-zA-Z0-9_]*)*)",
            "captures": {
                "1": { "name": "keyword.control.robodsl" },
                "2": { "name": "string.other.robodsl" },
                "3": { "name": "support.type.robodsl" }
            }
        },
        "service": {
            "name": "meta.service.robodsl",
            "match": "\\b(service)\\s+([\\/][a-zA-Z_][a-zA-Z0-9_\\/\\.]*)\\s*:",
            "captures": {
                "1": { "name": "keyword.control.robodsl" },
                "2": { "name": "string.other.robodsl" }
            }
        },
        "client": {
            "name": "meta.client.robodsl",
            "match": "\\b(client)\\s+([\\/][a-zA-Z_][a-zA-Z0-9_\\/\\.]*)\\s*:",
            "captures": {
                "1": { "name": "keyword.control.robodsl" },
                "2": { "name": "string.other.robodsl" }
            }
        },
        "action": {
            "name": "meta.action.robodsl",
            "match": "\\b(action)\\s+([\\/][a-zA-Z_][a-zA-Z0-9_\\/\\.]*)\\s*:",
            "captures": {
                "1": { "name": "keyword.control.robodsl" },
                "2": { "name": "string.other.robodsl" }
            }
        },
        "cuda-kernels-block": {
            "name": "meta.cuda-kernels-block.robodsl",
            "begin": "\\b(cuda_kernels)\\s*\\{",
            "end": "\\}",
            "beginCaptures": {
                "1": { "name": "keyword.control.robodsl" }
            },
            "patterns": [
                {
                    "include": "#kernel-definition"
                },
                {
                    "include": "#comments"
                }
            ]
        },
        "kernel-definition": {
            "name": "meta.kernel-definition.robodsl",
            "begin": "\\b(kernel)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\{",
            "end": "\\}",
            "beginCaptures": {
                "1": { "name": "keyword.control.robodsl" },
                "2": { "name": "entity.name.function.robodsl" }
            },
            "patterns": [
                { "include": "#comments" },
                { "include": "#kernel-content" }
            ]
        },
        "kernel-content": {
            "patterns": [
                { "include": "#comments" },
                { "include": "#kernel-param" },
                { "include": "#block-size" },
                { "include": "#grid-size" },
                { "include": "#shared-memory" },
                { "include": "#use-thrust" },
                { "include": "#code-block-cuda" }
            ]
        },
        "code-block-cuda": {
            "name": "meta.code-block.cuda.robodsl",
            "begin": "\\b(code)\\s*:?\\s*\\{",
            "end": "\\}",
            "beginCaptures": {
                "1": { "name": "keyword.control.robodsl" }
            },
            "patterns": [
                { "name": "source.cuda-c++.embedded.robodsl", "begin": "", "end": "", "patterns": [ { "include": "source.cuda-c++" } ] }
            ]
        },
        "kernel-param": {
            "name": "meta.kernel-param.robodsl",
            "match": "\\b(input|output)\\s+([a-zA-Z_:<>\\*\\s\\[\\]]+)\\s+([a-zA-Z_][a-zA-Z0-9_]*)",
            "captures": {
                "1": { "name": "keyword.control.robodsl" },
                "2": { "name": "storage.type.robodsl" },
                "3": { "name": "variable.parameter.robodsl" }
            }
        },
        "block-size": {
            "name": "meta.block-size.robodsl",
            "match": "\\b(block_size)\\s*:\\s*\\([^)]+\\)",
            "captures": {
                "1": { "name": "keyword.control.robodsl" }
            }
        },
        "grid-size": {
            "name": "meta.grid-size.robodsl",
            "match": "\\b(grid_size)\\s*:\\s*\\([^)]+\\)",
            "captures": {
                "1": { "name": "keyword.control.robodsl" }
            }
        },
        "shared-memory": {
            "name": "meta.shared-memory.robodsl",
            "match": "\\b(shared_memory)\\s*:",
            "captures": {
                "1": { "name": "keyword.control.robodsl" }
            }
        },
        "use-thrust": {
            "name": "meta.use-thrust.robodsl",
            "match": "\\b(use_thrust)\\s*:\\s*(true|false)\\b",
            "captures": {
                "1": { "name": "keyword.control.robodsl" },
                "2": { "name": "constant.language.boolean.robodsl" }
            }
        },
        "code-block": {
            "name": "meta.code-block.robodsl",
            "begin": "\\b(code)\\s*:?\\s*\\{",
            "end": "\\}",
            "beginCaptures": {
                "1": { "name": "keyword.control.robodsl" }
            },
            "patterns": [
                {
                    "name": "source.cpp",
                    "begin": "\\{",
                    "end": "\\}",
                    "patterns": [
                        {
                            "include": "source.cpp"
                        }
                    ]
                }
            ]
        },
        "comments": {
            "patterns": [
                {
                    "name": "comment.line.double-slash.robodsl",
                    "match": "//.*$"
                },
                {
                    "name": "comment.block.robodsl",
                    "begin": "/\\*",
                    "end": "\\*/"
                }
            ]
        },
        "keywords": {
            "patterns": [
                {
                    "name": "keyword.control.robodsl",
                    "match": "\\b(node|cuda_kernels|kernel|method|parameter|remap|namespace|flag|lifecycle|timer|client|publisher|subscriber|service|action|include|input|output|code|in|out|inout|block_size|grid_size|shared_memory|use_thrust|qos|onnx_model|device|optimization|pipeline|stage|config|project_name|parameter_callbacks|lifecycle_config|queue_size|autostart|cleanup_on_shutdown|oneshot|no_autostart)\\b"
                },
                {
                    "name": "constant.language.boolean.robodsl",
                    "match": "\\b(true|false)\\b"
                }
            ]
        },
        "qos-settings": {
            "patterns": [
                {
                    "name": "support.type.qos.robodsl",
                    "match": "\\b(reliability|durability|history|depth|deadline|lifespan|liveliness|liveliness_lease_duration)\\b"
                },
                {
                    "name": "support.constant.qos.robodsl",
                    "match": "\\b(reliable|best_effort|transient_local|volatile|keep_last|keep_all|automatic|manual_by_topic)\\b"
                }
            ]
        },
        "topic-paths": {
            "name": "string.other.robodsl",
            "match": "\\/[a-zA-Z_][a-zA-Z0-9_\\/\\.]*"
        },
        "topic-path": {
            "name": "string.other.robodsl",
            "match": "\\/[a-zA-Z_][a-zA-Z0-9_\\/\\.]*"
        },
        "expressions": {
            "patterns": [
                {
                    "name": "constant.numeric.signed.robodsl",
                    "match": "\\b-?[0-9]+(\\.[0-9]+)?\\b"
                },
                {
                    "name": "variable.other.robodsl",
                    "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*(\\.[a-zA-Z_][a-zA-Z0-9_]*)*\\b"
                }
            ]
        },
        "values": {
            "patterns": [
                {
                    "include": "#arrays"
                },
                {
                    "include": "#nested-dicts"
                }
            ]
        },
        "arrays": {
            "name": "meta.array.robodsl",
            "begin": "\\[",
            "end": "\\]",
            "patterns": [
                {
                    "include": "#expressions"
                },
                {
                    "include": "#strings"
                },
                {
                    "include": "#numbers"
                }
            ]
        },
        "nested-dicts": {
            "name": "meta.nested-dict.robodsl",
            "begin": "\\{",
            "end": "\\}",
            "patterns": [
                {
                    "include": "#dict-items"
                }
            ]
        },
        "dict-items": {
            "patterns": [
                {
                    "name": "meta.dict-item.robodsl",
                    "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*:",
                    "captures": {
                        "1": { "name": "variable.other.robodsl" }
                    }
                }
            ]
        },
        "strings": {
            "name": "string.quoted.double.robodsl",
            "begin": "\"",
            "end": "\"",
            "patterns": [
                {
                    "name": "constant.character.escape.robodsl",
                    "match": "\\\\(x\\h{2}|[0-2][0-7]{0,2}|3[0-6][0-7]|37[0-7]?|[4-7][0-7]?|t|n|v|f|r|\\\"|\\'|\\\\)"
                }
            ]
        },
        "raw-strings": {
            "name": "string.quoted.triple.robodsl",
            "begin": "\"\"\"",
            "end": "\"\"\""
        },
        "numbers": {
            "name": "constant.numeric.robodsl",
            "match": "\\b((0(x|X)[0-9a-fA-F]*)|(\\d+(\\.\\d+)?(e[+\\-]?\\d+)?))\\b"
        },
        "operators": {
            "name": "keyword.operator.robodsl",
            "match": "[=:;{}\\[\\]()<>.,+\\-*/%&|^!~]"
        },
        "onnx-model": {
            "name": "meta.onnx-model.robodsl",
            "begin": "\\b(onnx_model)\\s+\\\"([^\"]+)\\\"\\s*\\{",
            "end": "\\}",
            "beginCaptures": {
                "1": { "name": "keyword.control.robodsl" },
                "2": { "name": "string.quoted.double.robodsl" }
            },
            "patterns": [
                {
                    "include": "#onnx-model-config"
                },
                {
                    "include": "#comments"
                }
            ]
        },
        "onnx-model-config": {
            "patterns": [
                {
                    "include": "#onnx-input-def"
                },
                {
                    "include": "#onnx-output-def"
                },
                {
                    "include": "#onnx-device"
                },
                {
                    "include": "#onnx-optimization"
                }
            ]
        },
        "onnx-input-def": {
            "name": "meta.onnx-input-def.robodsl",
            "match": "\\b(input)\\s*:\\s*([\"'][^\"']*[\"']|[a-zA-Z_][a-zA-Z0-9_]*)\\s*->\\s*([\"'][^\"']*[\"']|[a-zA-Z_][a-zA-Z0-9_]*)",
            "captures": {
                "1": { "name": "keyword.control.robodsl" },
                "2": { "name": "string.quoted.robodsl" },
                "3": { "name": "string.quoted.robodsl" }
            }
        },
        "onnx-output-def": {
            "name": "meta.onnx-output-def.robodsl",
            "match": "\\b(output)\\s*:\\s*([\"'][^\"']*[\"']|[a-zA-Z_][a-zA-Z0-9_]*)\\s*->\\s*([\"'][^\"']*[\"']|[a-zA-Z_][a-zA-Z0-9_]*)",
            "captures": {
                "1": { "name": "keyword.control.robodsl" },
                "2": { "name": "string.quoted.robodsl" },
                "3": { "name": "string.quoted.robodsl" }
            }
        },
        "onnx-device": {
            "name": "meta.onnx-device.robodsl",
            "match": "\\b(device)\\s*:\\s*([a-zA-Z_][a-zA-Z0-9_]*)",
            "captures": {
                "1": { "name": "keyword.control.robodsl" },
                "2": { "name": "support.type.robodsl" }
            }
        },
        "onnx-optimization": {
            "name": "meta.onnx-optimization.robodsl",
            "match": "\\b(optimization)\\s*:\\s*([a-zA-Z_][a-zA-Z0-9_]*)",
            "captures": {
                "1": { "name": "keyword.control.robodsl" },
                "2": { "name": "support.type.robodsl" }
            }
        },
        "qos-block": {
            "name": "meta.qos-block.robodsl",
            "begin": "\\b(qos)\\s*:\\s*\\{",
            "end": "\\}",
            "beginCaptures": {
                "1": { "name": "keyword.control.robodsl" }
            },
            "patterns": [
                { "include": "#qos-settings" },
                { "include": "#comments" }
            ]
        },
        "queue-size": {
            "name": "meta.queue-size.robodsl",
            "match": "\\b(queue_size)\\s*:\\s*([0-9]+)",
            "captures": {
                "1": { "name": "keyword.control.robodsl" },
                "2": { "name": "constant.numeric.robodsl" }
            }
        },
        "parameter-callbacks": {
            "name": "meta.parameter-callbacks.robodsl",
            "match": "\\b(parameter_callbacks)\\s*:\\s*(true|false)\\b",
            "captures": {
                "1": { "name": "keyword.control.robodsl" },
                "2": { "name": "constant.language.boolean.robodsl" }
            }
        },
        "lifecycle-simple": {
            "name": "meta.lifecycle.robodsl",
            "match": "\\b(lifecycle)\\s*:\\s*(true|false)\\b",
            "captures": {
                "1": { "name": "keyword.control.robodsl" },
                "2": { "name": "constant.language.boolean.robodsl" }
            }
        },
        "pipeline-definition": {
            "name": "meta.pipeline-definition.robodsl",
            "begin": "\\b(pipeline)\\s+([a-zA-Z_][a-zA-Z0-9_]*)",
            "end": "\\}",
            "beginCaptures": {
                "1": { "name": "keyword.control.robodsl" },
                "2": { "name": "entity.name.class.robodsl" }
            },
            "patterns": [
                { "include": "#stage-definition" },
                { "include": "#comments" }
            ]
        },
        "stage-definition": {
            "name": "meta.stage-definition.robodsl",
            "begin": "\\b(stage)\\s+([a-zA-Z_][a-zA-Z0-9_]*)",
            "end": "\\}",
            "beginCaptures": {
                "1": { "name": "keyword.control.robodsl" },
                "2": { "name": "entity.name.function.robodsl" }
            },
            "patterns": [
                { "include": "#stage-content" },
                { "include": "#comments" }
            ]
        },
        "stage-content": {
            "patterns": [
                { "include": "#stage-input" },
                { "include": "#stage-output" },
                { "include": "#stage-method" },
                { "include": "#stage-model" },
                { "include": "#stage-topic" },
                { "include": "#stage-cuda-kernel" },
                { "include": "#stage-onnx-model" }
            ]
        },
        "stage-input": {
            "name": "meta.stage-input.robodsl",
            "match": "\\b(input)\\s*:\\s*([\"'][^\"']*[\"'])",
            "captures": {
                "1": { "name": "keyword.control.robodsl" },
                "2": { "name": "string.quoted.robodsl" }
            }
        },
        "stage-output": {
            "name": "meta.stage-output.robodsl",
            "match": "\\b(output)\\s*:\\s*([\"'][^\"']*[\"'])",
            "captures": {
                "1": { "name": "keyword.control.robodsl" },
                "2": { "name": "string.quoted.robodsl" }
            }
        },
        "stage-method": {
            "name": "meta.stage-method.robodsl",
            "match": "\\b(method)\\s*:\\s*([\"'][^\"']*[\"'])",
            "captures": {
                "1": { "name": "keyword.control.robodsl" },
                "2": { "name": "string.quoted.robodsl" }
            }
        },
        "stage-model": {
            "name": "meta.stage-model.robodsl",
            "match": "\\b(model)\\s*:\\s*([\"'][^\"']*[\"'])",
            "captures": {
                "1": { "name": "keyword.control.robodsl" },
                "2": { "name": "string.quoted.robodsl" }
            }
        },
        "stage-topic": {
            "name": "meta.stage-topic.robodsl",
            "match": "\\b(topic)\\s*:\\s*([\\/][a-zA-Z_][a-zA-Z0-9_\\/\\.]*)",
            "captures": {
                "1": { "name": "keyword.control.robodsl" },
                "2": { "name": "string.other.robodsl" }
            }
        },
        "stage-cuda-kernel": {
            "name": "meta.stage-cuda-kernel.robodsl",
            "match": "\\b(cuda_kernel)\\s*:\\s*([\"'][^\"']*[\"'])",
            "captures": {
                "1": { "name": "keyword.control.robodsl" },
                "2": { "name": "string.quoted.robodsl" }
            }
        },
        "stage-onnx-model": {
            "name": "meta.stage-onnx-model.robodsl",
            "match": "\\b(onnx_model)\\s*:\\s*([\"'][^\"']*[\"'])",
            "captures": {
                "1": { "name": "keyword.control.robodsl" },
                "2": { "name": "string.quoted.robodsl" }
            }
        },
        "cuda-block-size": {
            "name": "meta.cuda-block-size.robodsl",
            "match": "\\b(block_size)\\s*:\\s*\\([^)]*\\)",
            "captures": {
                "1": { "name": "keyword.control.robodsl" }
            }
        },
        "cuda-grid-size": {
            "name": "meta.cuda-grid-size.robodsl",
            "match": "\\b(grid_size)\\s*:\\s*\\([^)]*\\)",
            "captures": {
                "1": { "name": "keyword.control.robodsl" }
            }
        },
        "cuda-shared-memory": {
            "name": "meta.cuda-shared-memory.robodsl",
            "match": "\\b(shared_memory)\\s*:",
            "captures": {
                "1": { "name": "keyword.control.robodsl" }
            }
        },
        "cuda-use-thrust": {
            "name": "meta.cuda-use-thrust.robodsl",
            "match": "\\b(use_thrust)\\s*:",
            "captures": {
                "1": { "name": "keyword.control.robodsl" }
            }
        },
        "cuda-kernel-input": {
            "name": "meta.cuda-kernel-input.robodsl",
            "match": "\\b(input)\\s*:\\s*([a-zA-Z_][a-zA-Z0-9_]*)\\s+([a-zA-Z_][a-zA-Z0-9_]*)",
            "captures": {
                "1": { "name": "keyword.control.robodsl" },
                "2": { "name": "support.type.robodsl" },
                "3": { "name": "variable.parameter.robodsl" }
            }
        },
        "cuda-kernel-output": {
            "name": "meta.cuda-kernel-output.robodsl",
            "match": "\\b(output)\\s*:\\s*([a-zA-Z_][a-zA-Z0-9_]*)\\s+([a-zA-Z_][a-zA-Z0-9_]*)",
            "captures": {
                "1": { "name": "keyword.control.robodsl" },
                "2": { "name": "support.type.robodsl" },
                "3": { "name": "variable.parameter.robodsl" }
            }
        },
        "cpp-input-param": {
            "name": "meta.cpp-input-param.robodsl",
            "match": "\\b(input)\\s*:\\s*([a-zA-Z_][a-zA-Z0-9_]*)\\s+([a-zA-Z_][a-zA-Z0-9_]*)",
            "captures": {
                "1": { "name": "keyword.control.robodsl" },
                "2": { "name": "support.type.robodsl" },
                "3": { "name": "variable.parameter.robodsl" }
            }
        },
        "cpp-output-param": {
            "name": "meta.cpp-output-param.robodsl",
            "match": "\\b(output)\\s*:\\s*([a-zA-Z_][a-zA-Z0-9_]*)\\s+([a-zA-Z_][a-zA-Z0-9_]*)",
            "captures": {
                "1": { "name": "keyword.control.robodsl" },
                "2": { "name": "support.type.robodsl" },
                "3": { "name": "variable.parameter.robodsl" }
            }
        },
        "binary-operators": {
            "name": "keyword.operator.robodsl",
            "match": "\\b(\\+|\\-|\\*|\\/|\\%|\\^)\\b"
        },
        "dotted-name": {
            "name": "variable.other.robodsl",
            "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)(\\.([a-zA-Z_][a-zA-Z0-9_]*)|(\\([^)]*\\)))+"
        },
        "topic-type-string": {
            "name": "string.quoted.robodsl",
            "match": "\"[a-zA-Z0-9_\\/]+\""
        },
        "signed-number": {
            "name": "constant.numeric.robodsl",
            "match": "\\-?[0-9]+(\\.[0-9]+)?"
        },
        "type-with-array": {
            "name": "support.type.robodsl",
            "match": "[a-zA-Z_][a-zA-Z0-9_]*(\\[[0-9,]*\\])?"
        }
    }
}