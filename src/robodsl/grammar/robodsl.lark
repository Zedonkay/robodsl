
%ignore _WS
%ignore COMMENT   // Officially recognize // as a comment
%ignore BLOCK_COMMENT
%ignore PY_COMMENT  // Ignore Python-style # comments
%ignore _NL

start: include_stmt* (data_structure | custom_interface | node_def | cuda_kernels_block | onnx_model | pipeline_def | simulation_config | dynamic_config | raw_cpp_code)*

// Include statements
include_stmt: "include" ("<" include_path ">" | STRING)
include_path: NAME ("/" NAME)* ("." NAME)?

// Data structure definitions
data_structure: struct_def SEMICOLON?
              | class_def SEMICOLON?
              | pyclass_def SEMICOLON?
              | enum_def SEMICOLON?
              | typedef_def SEMICOLON?
              | using_def SEMICOLON?

// Custom interface definitions (messages, services, actions)
custom_interface: message_def | service_def | action_def

// Message definitions
message_def: "message" NAME LBRACE message_content RBRACE
message_content: message_field*
message_field: cpp_type NAME default_value? ";"
default_value: "=" value

// Service definitions
service_def: "service" NAME LBRACE service_content RBRACE
service_content: service_request service_response
service_request: service_fields
service_response: "---" service_fields
service_fields: message_field*

// Action definitions
action_def: "action" NAME LBRACE action_content RBRACE
action_content: action_goal action_feedback action_result
action_goal: action_fields
action_feedback: "---" action_fields
action_result: "---" action_fields
action_fields: message_field*

// Dynamic runtime configuration
dynamic_config: dynamic_parameters | dynamic_remaps
dynamic_parameters: "dynamic_parameters" LBRACE dynamic_parameter* RBRACE
dynamic_parameter: "parameter" TYPE NAME "=" value dynamic_param_config?
dynamic_param_config: LBRACE dynamic_param_setting* RBRACE
dynamic_param_setting: (NAME ":" value) | description
description: "description" ":" STRING

dynamic_remaps: "dynamic_remaps" LBRACE dynamic_remap* RBRACE
dynamic_remap: "remap" TOPIC_PATH ":" TOPIC_PATH remap_condition?
remap_condition: "when" ":" STRING

// Simulation configuration
simulation_config: simulation_def | hil_config
simulation_def: "simulation" simulator_type LBRACE simulation_content RBRACE
simulator_type: "gazebo" | "isaac_sim" | "gym"
simulation_content: (simulation_world | simulation_robot | simulation_plugin | simulation_setting)*

simulation_world: "world" LBRACE world_config RBRACE
world_config: world_setting*
world_setting: (NAME ":" value) | physics_engine | gravity | step_size | real_time_factor
physics_engine: "physics_engine" ":" (NAME | STRING)
gravity: "gravity" ":" LPAR expr COMMA expr COMMA expr RPAR
step_size: "max_step_size" ":" expr
real_time_factor: "real_time_factor" ":" expr

simulation_robot: "robot" NAME LBRACE robot_config RBRACE
robot_config: robot_setting*
robot_setting: (NAME ":" value) | model_file | robot_namespace | initial_pose | robot_plugins
model_file: "model_file" ":" (NAME | STRING)
robot_namespace: "namespace" ":" (NAME | STRING)
initial_pose: "initial_pose" ":" LPAR expr COMMA expr COMMA expr COMMA expr COMMA expr COMMA expr RPAR
robot_plugins: "plugins" LBRACE simulation_plugin* RBRACE

simulation_plugin: "plugin" NAME LBRACE plugin_config RBRACE
plugin_config: plugin_setting*
plugin_setting: NAME ":" value

simulation_setting: (gui | headless | physics_engine)
gui: "gui" ":" BOOLEAN
headless: "headless" ":" BOOLEAN

// Hardware-in-the-loop configuration
hil_config: "hardware_in_loop" LBRACE hil_content RBRACE
hil_content: (simulation_nodes | hardware_nodes | bridge_config)*
simulation_nodes: "simulation_nodes" ":" node_list
hardware_nodes: "hardware_nodes" ":" node_list
node_list: NAME (COMMA NAME)*
bridge_config: "bridge_config" ":" STRING

// Struct definitions
struct_def: "struct" NAME LBRACE struct_content RBRACE
struct_content: (struct_member | cpp_method | include_stmt)*
struct_member: cpp_type NAME array_spec? ";"?

// Class definitions
class_def: "class" NAME inheritance? LBRACE class_content RBRACE
inheritance: ":" access_specifier? cpp_type (COMMA access_specifier? cpp_type)*
access_specifier: PUBLIC | PRIVATE | PROTECTED
class_content: (class_access_section | class_direct_member | class_section_method | include_stmt)*
class_access_section: access_specifier ":" (class_section_member | class_section_method)*
class_direct_member: struct_member
class_section_member: struct_member
class_section_method: cpp_method

// Pythonic class definition
pyclass_def: "pyclass" NAME inheritance? LBRACE pyclass_content RBRACE
pyclass_content: (pyclass_attribute | pyclass_method | pyclass_constructor | pyclass_access_section)*

// Pythonic class attributes (member variables)
pyclass_attribute: NAME ":" cpp_type default_value?

// Pythonic class constructor
pyclass_constructor: "def" "__init__" LPAR pyclass_param_list RPAR LBRACE pyclass_constructor_content RBRACE
pyclass_constructor_content: (pyclass_assign | code_block)*
pyclass_assign: "self" "." NAME "=" NAME ";"

// Pythonic class methods
pyclass_method: "def" NAME LPAR pyclass_param_list RPAR return_type? LBRACE pyclass_method_content RBRACE
pyclass_param_list: pyclass_param (COMMA pyclass_param)*
pyclass_param: NAME ":" cpp_type default_value?
return_type: "->" cpp_type
pyclass_method_content: (code_block)*

// Pythonic access sections
pyclass_access_section: pyclass_access_specifier ":" (pyclass_attribute | pyclass_method | pyclass_constructor)*
pyclass_access_specifier: "public" | "private" | "protected"

// Enum definitions
enum_def: "enum" enum_type? NAME LBRACE enum_content RBRACE
enum_type: CLASS | STRUCT
enum_content: enum_value (COMMA enum_value)* COMMA?
enum_value: NAME ("=" expr)?

// Type definitions
typedef_def: "typedef" cpp_type NAME ";"
using_def: "using" NAME "=" cpp_type ";"

// Array specifications
array_spec: LSQB expr? RSQB
node_def: "node" NODE_NAME LBRACE node_content RBRACE
node_content: (parameter | lifecycle | timer | remap | namespace | ros_primitive | flag | cpp_method | kernel_def | onnx_model_ref | cuda_kernels_block | use_kernel | raw_cpp_code)*

// Pipeline definitions (Phase 4) - Enhanced with CUDA/ONNX integration
pipeline_def: "pipeline" NAME LBRACE pipeline_content RBRACE
pipeline_content: stage_def*
stage_def: "stage" NAME LBRACE stage_content RBRACE
stage_content: (stage_input | stage_output | stage_method | stage_model | stage_topic | stage_cuda_kernel | stage_onnx_model)*
stage_input: "input" ":" STRING
stage_output: "output" ":" STRING
stage_method: "method" ":" STRING
stage_model: "model" ":" STRING
stage_topic: "topic" ":" TOPIC_PATH
stage_cuda_kernel: "cuda_kernel" ":" STRING
stage_onnx_model: "onnx_model" ":" STRING

// ONNX Model definitions (Phase 3) - Developer-friendly syntax
onnx_model: "onnx_model" NAME LBRACE onnx_model_content RBRACE
onnx_model_ref: "onnx_model" NAME LBRACE onnx_model_content RBRACE
onnx_model_content: (config_block | input_def | output_def | device | optimization | COMMENT)*
config_block: "config" LBRACE (input_def | output_def | device | optimization)* RBRACE
input_def: "input" ":" (STRING | NAME) "->" (STRING | NAME) COMMENT?
output_def: "output" ":" (STRING | NAME) "->" (STRING | NAME)
device: "device" ":" (NAME | STRING)
optimization: "optimization" ":" (NAME | STRING)

// Parameters
parameter: "parameter" TYPE NAME "=" value

// Lifecycle configuration
lifecycle: "lifecycle" LBRACE lifecycle_config RBRACE
lifecycle_config: lifecycle_setting*
lifecycle_setting: NAME ":" BOOLEAN

// Timers
// Allow negative numbers
// Allow expressions in period
timer: "timer" NAME ":" expr timer_config?
timer_config: LBRACE timer_setting* RBRACE
timer_setting: NAME ":" (BOOLEAN | NAME)

// Remaps
remap: "remap" ("from:" TOPIC_PATH "to:" TOPIC_PATH | TOPIC_PATH ":" TOPIC_PATH)

// Namespaces
namespace: "namespace" (":"? TOPIC_PATH)

// ROS primitives
ros_primitive: publisher | subscriber | service | client | action
publisher: "publisher" topic_path ":" topic_type publisher_config?
publisher_config: LBRACE publisher_setting* RBRACE
publisher_setting: qos_config | (NAME ":" (value | topic_type | NAME))

topic_type: TOPIC_TYPE_STRING | NAME ("/" NAME)+

subscriber: "subscriber" topic_path ":" topic_type subscriber_config?
subscriber_config: LBRACE subscriber_setting* RBRACE
subscriber_setting: qos_config | (NAME ":" (value | topic_type | NAME))

service: "service" topic_path ":" topic_type service_config?
service_config: LBRACE service_setting* RBRACE
service_setting: qos_config | (NAME ":" (value | topic_type | NAME))

client: "client" topic_path ":" topic_type client_config?
client_config: LBRACE client_setting* RBRACE
client_setting: qos_config | (NAME ":" (value | topic_type | NAME))

action: "action" topic_path ":" topic_type action_config?
action_config: LBRACE action_setting* RBRACE
action_setting: qos_config | (NAME ":" (value | topic_type | NAME))

topic_path: "/" NAME ("/" NAME)*

// Flags
flag: "flag" NAME ":" BOOLEAN

// Enhanced C++ methods (Phase 2)
cpp_method: "method" NAME LBRACE method_content RBRACE
method_content: (input_param | output_param | code_block)*
input_param: "input" ":" cpp_type NAME input_param_size?
output_param: "output" ":" cpp_type NAME output_param_size?
input_param_size: LPAR method_param_size_list RPAR
output_param_size: LPAR method_param_size_list RPAR
method_param_size_list: method_param_size_item (COMMA method_param_size_item)*
method_param_size_item: SIGNED_NUMBER | NAME | STRING | dotted_name

// CUDA kernels block - Developer-friendly with comma-separated parameters
cuda_kernels_block: "cuda_kernels" LBRACE kernel_def* RBRACE
kernel_def: "kernel" NAME LBRACE kernel_content RBRACE
kernel_content: (block_size | grid_size | shared_memory | use_thrust | kernel_input_param | kernel_output_param | code_block | cuda_include)*

block_size: "block_size" ":" LPAR expr COMMA expr COMMA expr RPAR
grid_size: "grid_size" ":" LPAR expr COMMA expr COMMA expr RPAR
shared_memory: "shared_memory" ":" expr
use_thrust: "use_thrust" ":" BOOLEAN
kernel_input_param: "input" ":" kernel_param_list
kernel_output_param: "output" ":" kernel_param_list
kernel_param_list: kernel_param (COMMA kernel_param)*
kernel_param: cpp_type NAME kernel_param_size?
cuda_include: "include" ("<" include_path ">" | STRING)
cpp_type: cpp_type_name
cpp_type_name: /((const\s+)?[a-zA-Z_][a-zA-Z0-9_]*(\:\:[a-zA-Z_][a-zA-Z0-9_]*)*(\<[^<>]*(\<[^<>]*\>[^<>]*)*\>)?(\s*const)?(\s*[\*&])*(\[\])*)/
kernel_param_size: LPAR kernel_param_size_list RPAR
kernel_param_size_list: kernel_param_size_item (COMMA kernel_param_size_item)*
kernel_param_size_item: SIGNED_NUMBER | NAME | STRING

dotted_name: NAME (DOT NAME | LPAR (dotted_name (COMMA dotted_name)*)? RPAR)+

// Code blocks use C++/CUDA curly braces, not triple quotes or strings
code_block: "code" ":"? balanced_braces
balanced_braces: "{" balanced_content* "}"
balanced_content: /[^{}]+/ | balanced_braces

// Raw C++ code blocks that get passed through as-is
// Enhanced to better handle C++ syntax for IntelliSense support
raw_cpp_code: "cpp" ":"? LBRACE cpp_raw_content* RBRACE
cpp_raw_content: /[^{}]+/ | cpp_balanced_braces
cpp_balanced_braces: "{" cpp_raw_content* "}"

// Values
// Note: SIGNED_NUMBER can be int or float; AST builder will parse as int if no decimal
value: primitive | array | nested_dict

primitive: BOOLEAN | STRING | SIGNED_NUMBER

array: LSQB value_list RSQB
value_list: (value (COMMA value)*)?

nested_dict: LBRACE dict_list RBRACE
dict_list: (dict_item (dict_sep? dict_item)*)?
dict_item: NAME ":" value
dict_sep: COMMA | _NL

// Expressions for block/grid size and parameter sizes
expr: signed_atom (binop signed_atom)*
signed_atom: SIGNED_NUMBER | NAME | dotted_name | LPAR expr RPAR
binop: "+" | "-" | "*" | "/" | "%" | "^"

// Topics must start with /
TOPIC_PATH: /\/[a-zA-Z_][a-zA-Z0-9_\/\.]*/

// Terminals
STAR: "*"
DOT: "."
LPAR: "("
RPAR: ")"
LSQB: "["
RSQB: "]"
LBRACE: "{"
RBRACE: "}"
COMMA: ","
LESSTAN: "<"
MORETHAN: ">"
SIGNED_NUMBER: /-?[0-9]+(\.[0-9]+)?/
BOOLEAN: "true" | "false"
CLASS: "class"
STRUCT: "struct"
PUBLIC: "public"
PRIVATE: "private"
PROTECTED: "protected"
NAME: /[a-zA-Z_\u4e00-\u9fff][a-zA-Z0-9_\u4e00-\u9fff]*/
NODE_NAME: /[a-zA-Z_\u4e00-\u9fff][a-zA-Z0-9_\u4e00-\u9fff]*/
STRING: /"([^"\\]|\\.)*"/
TYPE: /[a-zA-Z_][a-zA-Z0-9_]*(\[[0-9,]*\])*(\<[^>]*\>)?/

// Block comments and line comments
BLOCK_COMMENT: /\/\*[\s\S]*?\*\//
COMMENT: /\/\/[^\n]*/
PY_COMMENT: /#[^\n]*/

// Ignore whitespace and comments
_NL: /(\r?\n)+\s*/
_WS: /[ \t]+/

// QoS configuration
qos_config: "qos" LBRACE qos_setting* RBRACE
qos_setting: NAME ":" expr

// Add this to the terminals section near STRING:
TOPIC_TYPE_STRING: /"[a-zA-Z0-9_\/]+"/

// Reference to a global CUDA kernel by name
use_kernel: "use_kernel" ":" STRING

SEMICOLON: ";"