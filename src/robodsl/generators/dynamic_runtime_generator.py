"""Dynamic Runtime Generator for RoboDSL.

This module generates dynamic parameter configuration and runtime remapping logic.
"""

import os
from pathlib import Path
from typing import List, Dict, Any, Optional
from ..core.ast import DynamicParameterNode, DynamicRemapNode


class DynamicRuntimeGenerator:
    """Generates dynamic runtime configuration and logic."""
    
    def __init__(self, output_dir: str = "config"):
        self.output_dir = Path(output_dir)
        self.output_dir.mkdir(exist_ok=True)
    
    def generate_dynamic_parameters(self, parameters: List[DynamicParameterNode]) -> str:
        """Generate dynamic parameters configuration file."""
        lines = [
            "# Dynamic Parameters Configuration",
            "# Generated by RoboDSL",
            "",
            "dynamic_parameters:",
        ]
        
        for param in parameters:
            lines.extend(self._generate_parameter_config(param))
        
        return "\n".join(lines)
    
    def generate_dynamic_remaps(self, remaps: List[DynamicRemapNode]) -> str:
        """Generate dynamic remapping configuration file."""
        lines = [
            "# Dynamic Remapping Configuration",
            "# Generated by RoboDSL",
            "",
            "dynamic_remaps:",
        ]
        
        for remap in remaps:
            lines.extend(self._generate_remap_config(remap))
        
        return "\n".join(lines)
    
    def generate_runtime_manager(self, parameters: List[DynamicParameterNode], remaps: List[DynamicRemapNode]) -> str:
        """Generate runtime parameter manager C++ class."""
        lines = [
            "#include <rclcpp/rclcpp.hpp>",
            "#include <rclcpp/parameter_events_filter.hpp>",
            "#include <std_msgs/msg/string.hpp>",
            "#include <map>",
            "#include <string>",
            "#include <functional>",
            "",
            "class DynamicRuntimeManager : public rclcpp::Node",
            "{",
            "public:",
            "    DynamicRuntimeManager() : Node(\"dynamic_runtime_manager\")",
            "    {",
            "        // Initialize parameters"
        ]
        
        for param in parameters:
            lines.extend(self._generate_parameter_declaration(param))
        
        lines.extend([
            "        ",
            "        // Initialize remapping logic",
        ])
        
        for remap in remaps:
            lines.extend(self._generate_remap_logic(remap))
        
        lines.extend([
            "        ",
            "        // Set up parameter callback",
            "        param_callback_handle_ = add_on_set_parameters_callback(",
            "            std::bind(&DynamicRuntimeManager::parameter_callback, this, std::placeholders::_1)",
            "        );",
            "        ",
            "        // Setup parameter callbacks and remapping",
            "        setup_parameter_callbacks();",
            "        setup_remapping();",
            "    }",
            "",
            "private:",
            "    rclcpp::node_interfaces::OnSetParametersCallbackHandle::SharedPtr param_callback_handle_;",
            "    std::map<std::string, std::function<void(const rclcpp::Parameter&)>> parameter_callbacks_;",
            "    std::map<std::string, std::string> dynamic_remaps_;",
            "",
            "    rcl_interfaces::msg::SetParametersResult parameter_callback(",
            "        const std::vector<rclcpp::Parameter>& parameters)",
            "    {",
            "        rcl_interfaces::msg::SetParametersResult result;",
            "        result.successful = true;",
            "",
            "        for (const auto& param : parameters)",
            "        {",
            "            auto it = parameter_callbacks_.find(param.get_name());",
            "            if (it != parameter_callbacks_.end())",
            "            {",
            "                it->second(param);",
            "            }",
            "        }",
            "",
            "        return result;",
            "    }",
            "",
            "    void setup_parameter_callbacks()",
            "    {",
        ])
        
        for param in parameters:
            lines.extend(self._generate_parameter_callback(param))
        
        lines.extend([
            "    }",
            "",
            "    void setup_remapping()",
            "    {",
        ])
        
        for remap in remaps:
            lines.extend(self._generate_remap_setup(remap))
        
        lines.extend([
            "    }",
            "};",
            "",
            "int main(int argc, char** argv)",
            "{",
            "    rclcpp::init(argc, argv);",
            "    auto node = std::make_shared<DynamicRuntimeManager>();",
            "    rclcpp::spin(node);",
            "    rclcpp::shutdown();",
            "    return 0;",
            "}",
        ])
        
        return "\n".join(lines)
    
    def _generate_parameter_config(self, param: DynamicParameterNode) -> List[str]:
        """Generate parameter configuration."""
        lines = [
            f"  {param.name}:",
            f"    type: {param.type}",
            f"    default_value: {param.default_value.value}",
        ]
        
        if param.min_value:
            lines.append(f"    min_value: {param.min_value.value}")
        if param.max_value:
            lines.append(f"    max_value: {param.max_value.value}")
        if param.step:
            lines.append(f"    step: {param.step.value}")
        if param.description:
            lines.append(f"    description: {param.description}")
        
        return lines
    
    def _generate_remap_config(self, remap: DynamicRemapNode) -> List[str]:
        """Generate remap configuration."""
        lines = [
            f"  - from: {remap.from_topic}",
            f"    to: {remap.to_topic}",
        ]
        
        if remap.condition:
            lines.append(f"    condition: {remap.condition}")
        
        return lines
    
    def _generate_parameter_declaration(self, param: DynamicParameterNode) -> List[str]:
        """Generate parameter declaration in C++."""
        cpp_type = self._map_to_cpp_type(param.type)
        lines = [
            f"        // Parameter: {param.name}",
            f"        declare_parameter(\"{param.name}\", {param.default_value.value});",
        ]
        
        if param.min_value or param.max_value:
            lines.append(f"        // Parameter constraints: {param.name}")
            if param.min_value:
                lines.append(f"        // Min: {param.min_value.value}")
            if param.max_value:
                lines.append(f"        // Max: {param.max_value.value}")
        
        return lines
    
    def _generate_remap_logic(self, remap: DynamicRemapNode) -> List[str]:
        """Generate remapping logic in C++."""
        lines = [
            f"        // Remap: {remap.from_topic} -> {remap.to_topic}",
        ]
        
        if remap.condition:
            lines.extend([
                f"        if ({remap.condition}) {{",
                f"            dynamic_remaps_[\"{remap.from_topic}\"] = \"{remap.to_topic}\";",
                f"        }}",
            ])
        else:
            lines.append(f"        dynamic_remaps_[\"{remap.from_topic}\"] = \"{remap.to_topic}\";")
        
        return lines
    
    def _generate_parameter_callback(self, param: DynamicParameterNode) -> List[str]:
        """Generate parameter callback in C++."""
        lines = [
            f"        parameter_callbacks_[\"{param.name}\"] = [this](const rclcpp::Parameter& param) {{",
            f"            // Handle parameter change: {param.name}",
            f"            RCLCPP_INFO(this->get_logger(), \"Parameter {param.name} changed to: %s\", param.value_to_string().c_str());",
            f"            // Add your custom logic here",
            f"        }};",
        ]
        
        return lines
    
    def _generate_remap_setup(self, remap: DynamicRemapNode) -> List[str]:
        """Generate remap setup in C++."""
        lines = [
            f"        // Setup remap: {remap.from_topic} -> {remap.to_topic}",
            f"        if (dynamic_remaps_.find(\"{remap.from_topic}\") != dynamic_remaps_.end()) {{",
            f"            // Apply remapping logic",
            f"            RCLCPP_INFO(this->get_logger(), \"Setting up remap: {remap.from_topic} -> {remap.to_topic}\");",
            f"        }}",
        ]
        
        return lines
    
    def _map_to_cpp_type(self, robodsl_type: str) -> str:
        """Map RoboDSL types to C++ types."""
        type_mapping = {
            'bool': 'bool',
            'int32': 'int32_t',
            'int64': 'int64_t',
            'float32': 'float',
            'float64': 'double',
            'string': 'std::string',
            'uint8': 'uint8_t',
            'uint16': 'uint16_t',
            'uint32': 'uint32_t',
            'uint64': 'uint64_t',
            'int8': 'int8_t',
            'int16': 'int16_t',
        }
        
        return type_mapping.get(robodsl_type, robodsl_type)
    
    def write_dynamic_parameters(self, parameters: List[DynamicParameterNode], filename: str = "dynamic_parameters.yaml") -> str:
        """Generate and write dynamic parameters configuration to disk."""
        content = self.generate_dynamic_parameters(parameters)
        file_path = self.output_dir / filename
        file_path.parent.mkdir(parents=True, exist_ok=True)
        
        with open(file_path, 'w') as f:
            f.write(content)
        
        return str(file_path)
    
    def write_dynamic_remaps(self, remaps: List[DynamicRemapNode], filename: str = "dynamic_remaps.yaml") -> str:
        """Generate and write dynamic remaps configuration to disk."""
        content = self.generate_dynamic_remaps(remaps)
        file_path = self.output_dir / filename
        file_path.parent.mkdir(parents=True, exist_ok=True)
        
        with open(file_path, 'w') as f:
            f.write(content)
        
        return str(file_path)
    
    def write_runtime_manager(self, parameters: List[DynamicParameterNode], remaps: List[DynamicRemapNode], filename: str = "dynamic_runtime_manager.cpp") -> str:
        """Generate and write runtime manager C++ file to disk."""
        content = self.generate_runtime_manager(parameters, remaps)
        file_path = self.output_dir / filename
        file_path.parent.mkdir(parents=True, exist_ok=True)
        
        with open(file_path, 'w') as f:
            f.write(content)
        
        return str(file_path) 