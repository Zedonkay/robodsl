# Generated by RoboDSL - DO NOT EDIT

import os
from launch import LaunchDescription
from launch.actions import DeclareLaunchArgument
from launch.substitutions import LaunchConfiguration
from launch_ros.actions import Node, LifecycleNode
from ament_index_python.packages import get_package_share_directory

def generate_launch_description():
    # Get the package directory
    pkg_dir = get_package_share_directory('{{ package_name }}')
    
    # Launch arguments
    launch_arguments = [
        DeclareLaunchArgument(
            'use_sim_time',
            default_value='false',
            description='Use simulation (Gazebo) clock if true'
        ),
        DeclareLaunchArgument(
            'use_rviz',
            default_value='false',
            description='Start RViz2 automatically if true'
        )
    ]

    # Main node configuration
    node_params = {
        'package': '{{ package_name }}',
        'executable': '{{ node_name }}_node',
        'name': '{{ node_name }}',
        'output': 'screen',
        'parameters': [],
        'arguments': ['--ros-args', '--log-level', 'info']
    }

    # Add namespace if specified
    {% if namespace %}
    node_params['namespace'] = '{{ namespace }}'
    {% endif %}

    # Add parameters
    {% if parameters %}
    node_params['parameters'] = [
        {% for param in parameters %}
        {
            {% for key, value in param.items() %}
            '{{ key }}': 
            {% if value is string and not value.startswith(('"', "'")) and value.lower() not in ('true', 'false', 'none') %}
            '{{ value }}'
            {% else %}
            {{ value }}
            {% endif %}{% if not loop.last %},{% endif %}
            {% endfor %}
        }{% if not loop.last %},{% endif %}
        {% endfor %}
    ]
    {% endif %}

    # Add remappings
    {% if remappings %}
    node_params['remappings'] = [
        {% for src, dst in remappings.items() %}
        ('{{ src }}', '{{ dst }}'){% if not loop.last %},{% endif %}
        {% endfor %}
    ]
    {% endif %}

    # Add environment variables
    {% if env_vars %}
    node_params['environment'] = [
        {% for key, value in env_vars.items() %}
        {'name': '{{ key }}', 'value': '{{ value }}'}{% if not loop.last %},{% endif %}
        {% endfor %}
    ]
    {% endif %}

    # Create the appropriate node type
    {% if is_lifecycle %}
    node = LifecycleNode(**node_params)
    {% else %}
    node = Node(**node_params)
    {% endif %}

    # Create launch description with arguments
    ld = LaunchDescription(launch_arguments)
    ld.add_action(node)
    
    # Add any additional nodes
    {% for extra_node in extra_nodes %}
    {{ extra_node.name }} = Node(
        package='{{ extra_node.metadata.package if extra_node.metadata and extra_node.metadata.package else package_name }}',
        executable='{{ extra_node.name }}_node',
        name='{{ extra_node.name }}',
        {% if extra_node.namespace %}
        namespace='{{ extra_node.namespace }}',
        {% endif %}
        output='screen',
        {% if extra_node.parameters %}
        parameters=[
            {% for param in extra_node.parameters %}
            {
                {% for key, value in param.items() %}
                '{{ key }}': 
                {% if value is string and not value.startswith(('"', "'")) and value.lower() not in ('true', 'false', 'none') %}
                '{{ value }}'
                {% else %}
                {{ value }}
                {% endif %}{% if not loop.last %},{% endif %}
                {% endfor %}
            }{% if not loop.last %},{% endif %}
            {% endfor %}
        ],
        {% endif %}
        {% if extra_node.remappings %}
        remappings=[
            {% for src, dst in extra_node.remappings.items() %}
            ('{{ src }}', '{{ dst }}'){% if not loop.last %},{% endif %}
            {% endfor %}
        ],
        {% endif %}
        arguments=['--ros-args', '--log-level', 'info']
    )
    ld.add_action({{ extra_node.name }})
    {% endfor %}
    
    return ld
