#!/usr/bin/env python3
# Generated by RoboDSL - DO NOT EDIT

import rclpy
{% if is_lifecycle %}
from rclpy.lifecycle import Node, State, TransitionCallbackReturn
{% else %}
from rclpy.node import Node
{% endif %}
from rclpy.qos import QoSPresetProfiles, QoSProfile
{% for msg_import in message_imports %}
{{ msg_import }}
{% endfor %}

class {{ class_name }}({% if is_lifecycle %}Node{% else %}Node{% endif %}):
    """{{ node_description }}"""
    
    def __init__(self, node_name: str, **kwargs):
        """Initialize the node."""
        super().__init__(node_name, **kwargs)
        
        # Parameters
        self.declare_parameters(
            namespace='',
            parameters=[
                {% for param in parameters %}
                ('{{ param.name }}', {{ param.default_value }}),  # {{ param.description }}
                {% endfor %}
            ]
        )
        
        # Get parameters
        {% for param in parameters %}
        self.{{ param.name }} = self.get_parameter('{{ param.name }}').value
        {% endfor %}
        
        # Publishers
        {% for pub in publishers %}
        self.{{ pub.name }}_pub = self.create_publisher(
            {{ pub.msg_type }},
            '{{ pub.topic }}',
            qos_profile=QoSPresetProfiles.SYSTEM_DEFAULT.value
        )
        {% endfor %}
        
        # Subscribers
        {% for sub in subscribers %}
        self.{{ sub.name }}_sub = self.create_subscription(
            {{ sub.msg_type }},
            '{{ sub.topic }}',
            self.{{ sub.callback_name }},
            qos_profile=QoSPresetProfiles.SENSOR_DATA.value
        )
        {% endfor %}
        
        # Services
        {% for srv in services %}
        self.{{ srv.name }}_srv = self.create_service(
            {{ srv.srv_type }},
            '{{ srv.service }}',
            self.{{ srv.callback_name }}
        )
        {% endfor %}
        
        # Timers
        {% for timer in timers %}
        self.timer = self.create_timer(
            {{ timer.period }},  # seconds
            self.{{ timer.callback_name }}
        )
        {% endfor %}
    
    {% if is_lifecycle %}
    # Lifecycle callbacks
    def on_configure(self, previous_state: State) -> TransitionCallbackReturn:
        """Configure the node."""
        self.get_logger().info('Configuring...')
        return TransitionCallbackReturn.SUCCESS
    
    def on_activate(self, previous_state: State) -> TransitionCallbackReturn:
        """Activate the node."""
        self.get_logger().info('Activating...')
        return TransitionCallbackReturn.SUCCESS
    
    def on_deactivate(self, previous_state: State) -> TransitionCallbackReturn:
        """Deactivate the node."""
        self.get_logger().info('Deactivating...')
        return TransitionCallbackReturn.SUCCESS
    
    def on_cleanup(self, previous_state: State) -> TransitionCallbackReturn:
        """Clean up the node."""
        self.get_logger().info('Cleaning up...')
        return TransitionCallbackReturn.SUCCESS
    
    def on_shutdown(self, previous_state: State) -> TransitionCallbackReturn:
        """Shutdown the node."""
        self.get_logger().info('Shutting down...')
        return TransitionCallbackReturn.SUCCESS
    {% endif %}
    
    # Timer callbacks
    {% for timer in timers %}
    def {{ timer.callback_name }}(self):
        """Timer callback for {{ timer.name }}."""
        self.get_logger().debug('Timer {{ timer.name }} triggered')
    
    {% endfor %}
    
    # Subscriber callbacks
    {% for sub in subscribers %}
    def {{ sub.callback_name }}(self, msg):
        """Callback for {{ sub.topic }} subscriber."""
        self.get_logger().debug(f'Received message on {{ sub.topic }}: {msg}')
    
    {% endfor %}
    
    # Service callbacks
    {% for srv in services %}
    def {{ srv.callback_name }}(self, request, response):
        """Callback for {{ srv.service }} service."""
        self.get_logger().debug(f'Service {{ srv.service }} called with: {request}')
        return response
    
    {% endfor %}


def main(args=None):
    """Run the node."""
    rclpy.init(args=args)
    
    try:
        node = {{ class_name }}('{{ node_name }}')
        
        {% if is_lifecycle %}
        # For lifecycle nodes, we need to manually trigger the configure transition
        rclpy.spin_until_future_complete(
            node.trigger_configure()
        )
        rclpy.spin_until_future_complete(
            node.trigger_activate()
        )
        {% endif %}
        
        rclpy.spin(node)
    except KeyboardInterrupt:
        pass
    finally:
        node.destroy_node()
        rclpy.shutdown()


if __name__ == '__main__':
    main()
