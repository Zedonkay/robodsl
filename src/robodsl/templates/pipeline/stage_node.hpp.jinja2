#ifndef {{ project_name.upper() }}_{{ stage.name.upper() }}_NODE_HPP
#define {{ project_name.upper() }}_{{ stage.name.upper() }}_NODE_HPP

#include <rclcpp/rclcpp.hpp>
#include <std_msgs/msg/string.hpp>
#include <sensor_msgs/msg/image.hpp>
#include <sensor_msgs/msg/point_cloud2.hpp>

namespace {{ project_name }} {

class {{ stage.name | title }}Node : public rclcpp::Node {
public:
    {{ stage.name | title }}Node();
    ~{{ stage.name | title }}Node() = default;

private:
    // Callback functions
    {% for input in stage.content.inputs %}
    void on_{{ input.input_name }}_received(const std_msgs::msg::String::SharedPtr msg);
    {% endfor %}
    
    // Processing methods
    {% for method in stage.content.methods %}
    void {{ method.method_name }}();
    {% endfor %}
    
    // Publishers
    {% for output in stage.content.outputs %}
    rclcpp::Publisher<std_msgs::msg::String>::SharedPtr {{ output.output_name }}_publisher_;
    {% endfor %}
    
    // Subscribers
    {% for input in stage.content.inputs %}
    rclcpp::Subscription<std_msgs::msg::String>::SharedPtr {{ input.input_name }}_subscriber_;
    {% endfor %}
    
    // Timer for periodic processing
    rclcpp::TimerBase::SharedPtr timer_;
    void timer_callback();
    
    // Parameters
    {% for topic in stage.content.topics %}
    std::string {{ topic.topic_path.split('/')[-1] }}_topic_;
    {% endfor %}
    
    // Internal state
    bool initialized_;
    int processing_count_;
};

} // namespace {{ project_name }}

#endif // {{ project_name.upper() }}_{{ stage.name.upper() }}_NODE_HPP 