#!/usr/bin/env python3

import rclpy
from rclpy.node import Node
from std_msgs.msg import String
import time


class {{ stage.name | title }}Node(Node):
    """{{ stage.name | title }} stage node for {{ pipeline_name }} pipeline."""
    
    def __init__(self):
        super().__init__('{{ stage.name }}_node')
        
        # Set namespace
        self.set_namespace('{{ stage_namespace }}')
        
        self.get_logger().info(f'Initializing {{ stage.name | title }}Node')
        
        # Initialize state
        self.initialized = False
        self.processing_count = 0
        
        # Declare parameters
        {% for topic in stage.content.topics %}
        self.declare_parameter('{{ topic.topic_path.split('/')[-1] }}_topic', '{{ topic.topic_path }}')
        self.{{ topic.topic_path.split('/')[-1] }}_topic = self.get_parameter('{{ topic.topic_path.split('/')[-1] }}_topic').value
        {% endfor %}
        
        # Initialize publishers
        {% for output in stage.content.outputs %}
        self.{{ output.output_name }}_publisher = self.create_publisher(
            String, '{{ stage_namespace }}/{{ output.output_name }}', 10)
        {% endfor %}
        
        # Initialize subscribers
        {% for input in stage.content.inputs %}
        self.{{ input.input_name }}_subscriber = self.create_subscription(
            String, '{{ stage_namespace }}/{{ input.input_name }}',
            self.on_{{ input.input_name }}_received, 10)
        {% endfor %}
        
        # Initialize timer for periodic processing
        self.timer = self.create_timer(0.1, self.timer_callback)  # 10 Hz
        
        self.initialized = True
        self.get_logger().info('{{ stage.name | title }}Node initialized successfully')
    
    {% for input in stage.content.inputs %}
    def on_{{ input.input_name }}_received(self, msg):
        """Handle received {{ input.input_name }} message."""
        self.get_logger().info(f'Received {{ input.input_name }}: {msg.data}')
        
        # Process the input
        {% for method in stage.content.methods %}
        self.{{ method.method_name }}()
        {% endfor %}
        
        # Publish outputs if available
        {% for output in stage.content.outputs %}
        output_msg = String()
        output_msg.data = f'Processed {{ input.input_name }}: {msg.data}'
        self.{{ output.output_name }}_publisher.publish(output_msg)
        {% endfor %}
    {% endfor %}
    
    {% for method in stage.content.methods %}
    def {{ method.method_name }}(self):
        """Execute {{ method.method_name }} processing."""
        self.get_logger().debug(f'Executing {{ method.method_name }}')
        
        # TODO: Implement {{ method.method_name }} logic
        # This is where the actual processing logic would go
        
        self.processing_count += 1
    {% endfor %}
    
    def timer_callback(self):
        """Periodic timer callback."""
        if not self.initialized:
            return
        
        # Periodic processing
        self.get_logger().debug(f'{{ stage.name | title }}Node timer callback, count: {self.processing_count}')
        
        {% if stage.content.outputs %}
        # Publish periodic status
        status_msg = String()
        status_msg.data = f'{{ stage.name | title }}Node status: {self.processing_count}'
        {% for output in stage.content.outputs %}
        self.{{ output.output_name }}_publisher.publish(status_msg)
        {% endfor %}
        {% endif %}


def main(args=None):
    rclpy.init(args=args)
    
    node = {{ stage.name | title }}Node()
    
    node.get_logger().info('Starting {{ stage.name | title }}Node')
    
    try:
        rclpy.spin(node)
    except KeyboardInterrupt:
        pass
    finally:
        node.destroy_node()
        rclpy.shutdown()


if __name__ == '__main__':
    main() 