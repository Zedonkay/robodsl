// Generated by RoboDSL - DO NOT EDIT

#ifndef {{ include_guard }}
#define {{ include_guard }}

// Standard includes
#include <memory>
#include <string>
#include <vector>

// ROS2 includes
#include <rclcpp/rclcpp.hpp>
#include <rclcpp_lifecycle/lifecycle_node.hpp>
#include <rclcpp_lifecycle/lifecycle_publisher.hpp>
#include <rclcpp_lifecycle/lifecycle_node_interface.hpp>
#include <rclcpp_components/register_node_macro.hpp>

// Message includes
{% for include in includes %}
{{ include }}
{% endfor %}

{% if ros2_includes %}
// Additional ROS2 includes
{% for include in ros2_includes %}
{{ include }}
{% endfor %}
{% endif %}

{% if namespace %}
namespace {{ namespace }} {
{% endif %}

class {{ class_name }} : public {{ base_class }} {
public:
    // Referenced global CUDA kernels
    {% if referenced_kernels %}
    /**
     * Referenced global CUDA kernels:
     * {% for k in referenced_kernels %}
     *   - {{ k }}
     * {% endfor %}
     */
    {% endif %}
    explicit {{ class_name }}(const rclcpp::NodeOptions& options = rclcpp::NodeOptions());
    ~{{ class_name }}() override;

    // Lifecycle node interface
    {% if is_lifecycle %}
    rclcpp_lifecycle::node_interfaces::LifecycleNodeInterface::CallbackReturn 
    on_configure(const rclcpp_lifecycle::State& previous_state) override;
    
    rclcpp_lifecycle::node_interfaces::LifecycleNodeInterface::CallbackReturn 
    on_activate(const rclcpp_lifecycle::State& previous_state) override;
    
    rclcpp_lifecycle::node_interfaces::LifecycleNodeInterface::CallbackReturn 
    on_deactivate(const rclcpp_lifecycle::State& previous_state) override;
    
    rclcpp_lifecycle::node_interfaces::LifecycleNodeInterface::CallbackReturn 
    on_cleanup(const rclcpp_lifecycle::State& previous_state) override;
    
    rclcpp_lifecycle::node_interfaces::LifecycleNodeInterface::CallbackReturn 
    on_shutdown(const rclcpp_lifecycle::State& previous_state) override;
    
    rclcpp_lifecycle::node_interfaces::LifecycleNodeInterface::CallbackReturn 
    on_error(const rclcpp_lifecycle::State& previous_state) override;
    {% endif %}

    // Timer callbacks
    {% for timer in timers %}
    void {{ timer.callback_name }}();
    {% endfor %}

    // Subscriber callbacks
    {% for sub in subscribers %}
    void {{ sub.callback_name }}(const {{ sub.msg_type }}::ConstSharedPtr msg);
    {% endfor %}

    // Service callbacks
    {% for srv in services %}
    void {{ srv.callback_name }}(
        const std::shared_ptr<{{ srv.srv_type }}::Request> request,
        std::shared_ptr<{{ srv.srv_type }}::Response> response);
    {% endfor %}

    // Action server callbacks
    {% for action in actions %}
    rclcpp_action::GoalResponse handle_{{ action.name }}_goal(
        const rclcpp_action::GoalUUID& uuid,
        std::shared_ptr<const {{ action.action_type }}::Goal> goal);
        
    rclcpp_action::CancelResponse handle_{{ action.name }}_cancel(
        const std::shared_ptr<rclcpp_action::ServerGoalHandle<{{ action.action_type }}>> goal_handle);
        
    void handle_{{ action.name }}_accepted(
        const std::shared_ptr<rclcpp_action::ServerGoalHandle<{{ action.action_type }}>> goal_handle);
    
    void execute_{{ action.name }}(
        const std::shared_ptr<rclcpp_action::ServerGoalHandle<{{ action.action_type }}>> goal_handle);
    {% endfor %}

    // CUDA kernels
    {% if cuda_kernels %}
    /**
     * @brief Process data using CUDA acceleration
     * @param input Input data to process
     * @param parameters Processing parameters
     * @return Processed output data
     * @note This is a virtual method that can be overridden by derived classes
     * to provide custom CUDA-accelerated processing. The default implementation
     * will return an empty vector if not overridden.
     */
    virtual std::vector<{{ cuda_default_output_type|default('float') }}> processWithCuda(
        const std::vector<{{ cuda_default_input_type|default('float') }}>& input,
        const {{ cuda_default_param_type|default('CudaParams') }}& parameters);
    
    /**
     * @brief Initialize CUDA resources
     * @return true if initialization was successful, false otherwise
     * @note Override this method to perform custom CUDA initialization.
     * Call the base class implementation if you override this method.
     */
    virtual bool initializeCuda();
    
    /**
     * @brief Clean up CUDA resources
     * @note Override this method to perform custom CUDA cleanup.
     * Call the base class implementation if you override this method.
     */
    virtual void cleanupCuda();
    
    // Individual CUDA kernel declarations
    {% for kernel in cuda_kernels %}
    /**
     * @brief {{ kernel.description|default("Process data using CUDA kernel: " + kernel.kernel_name) }}
     * @note This method provides a C++ interface to the {{ kernel.kernel_name }} CUDA kernel.
     * The actual CUDA kernel implementation should be provided in a .cu file.
     */
    virtual void {{ kernel.kernel_name }}(
        {%- for param in kernel.parameters -%}
        {{ param.type }} {{ param.name }}{% if not loop.last %}, {% endif %}
        {%- endfor -%}
    );
    {% endfor %}
    {% if cuda_kernels|selectattr('use_thrust')|list %}
    // NOTE: This node uses Thrust algorithms in at least one CUDA kernel.
    #include <thrust/device_vector.h>
    #include <thrust/transform.h>
    #include <thrust/functional.h>
    {% endif %}
    {% endif %}

    // User-defined C++ methods
    {% for method in cpp_methods %}
    /**
     * @brief {{ method.name }} - User-defined C++ method
     {% for input in method.inputs %}
     * @param {{ input.name }} Input parameter of type {{ input.type }}{% if input.size_expr %} with size {{ input.size_expr }}{% endif %}
     {% endfor %}
     {% for output in method.outputs %}
     * @param {{ output.name }} Output parameter of type {{ output.type }}{% if output.size_expr %} with size {{ output.size_expr }}{% endif %}
     {% endfor %}
     */
    void {{ method.name }}(
        {% for input in method.inputs %}{{ input.type }} {{ input.name }}{% if input.size_expr %}[{{ input.size_expr }}]{% endif %}{% if not loop.last %}, {% endif %}{% endfor %}
        {% if method.inputs and method.outputs %}, {% endif %}
        {% for output in method.outputs %}{{ output.type }}& {{ output.name }}{% if output.size_expr %}[{{ output.size_expr }}]{% endif %}{% if not loop.last %}, {% endif %}{% endfor %}
    );
    {% endfor %}

private:
    // ROS2 publishers
    {% for pub in publishers %}
    {% if is_lifecycle %}
    std::shared_ptr<rclcpp_lifecycle::LifecyclePublisher<{{ pub.msg_type }}>> {{ pub.name }}_pub_;
    {% else %}
    rclcpp::Publisher<{{ pub.msg_type }}>::SharedPtr {{ pub.name }}_pub_;
    {% endif %}
    {% endfor %}

    // ROS2 subscribers
    {% for sub in subscribers %}
    rclcpp::Subscription<{{ sub.msg_type }}>::SharedPtr {{ sub.name }}_sub_;
    {% endfor %}

    // ROS2 services
    {% for srv in services %}
    rclcpp::Service<{{ srv.srv_type }}>::SharedPtr {{ srv.name }}_srv_;
    {% endfor %}

    // ROS2 action servers
    {% for action in actions %}
    rclcpp_action::Server<{{ action.action_type }}>::SharedPtr {{ action.name }}_action_server_;
    {% endfor %}

    // ROS2 timers
    {% for timer in timers %}
    rclcpp::TimerBase::SharedPtr {{ timer.name }}_timer_;
    {% endfor %}

    // Parameters
    {% for param in parameters %}
    {{ param.type }} {{ param.name }}_;
    {% endfor %}

    // CUDA members
    {% for kernel in cuda_kernels %}
    // {{ kernel.name }} members
    {% for member in kernel.members %}
    {{ member.type }} {{ member.name }}_;
    {% endfor %}
    {% endfor %}

    // Private methods
    void init_parameters();
    void init_publishers();
    void init_subscribers();
    void init_services();
    void init_action_servers();
    void init_timers();
    void init_cuda();
};

{% if namespace %}
} // namespace {{ namespace }}
{% endif %}

// Register component
#include <rclcpp_components/register_node_macro.hpp>
RCLCPP_COMPONENTS_REGISTER_NODE({{ '::' if namespace }}{{ namespace }}{{ '::' if namespace }}{{ class_name }})

#endif // {{ include_guard }}
