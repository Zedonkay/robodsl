// Generated by RoboDSL - DO NOT EDIT

#ifndef TESTNODE_NODE_HPP
#define TESTNODE_NODE_HPP

// Standard includes
#include <memory>
#include <string>
#include <vector>

// ROS2 includes
#include <rclcpp/rclcpp.hpp>
#include <rclcpp_lifecycle/lifecycle_node.hpp>
#include <rclcpp_lifecycle/lifecycle_publisher.hpp>
#include <rclcpp_lifecycle/lifecycle_node_interface.hpp>
#include <rclcpp_components/register_node_macro.hpp>

// Message includes


// CUDA includes
#include <cuda_runtime.h>
#include <vector>
#include <memory>

namespace robodsl {

class TestnodeNode : public rclcpp::Node {
public:
    explicit TestnodeNode(const rclcpp::NodeOptions& options = rclcpp::NodeOptions());
    ~TestnodeNode() override;

    // Lifecycle node interface

    // Timer callbacks

    // Subscriber callbacks

    // Service callbacks

    // Action server callbacks

    // CUDA kernels
    /**
     * @brief Process data using CUDA acceleration
     * @param input Input data to process
     * @param parameters Processing parameters
     * @return Processed output data
     * @note This is a virtual method that can be overridden by derived classes
     * to provide custom CUDA-accelerated processing. The default implementation
     * will return an empty vector if not overridden.
     */
    virtual std::vector<float> processWithCuda(
        const std::vector<float>& input,
        const CudaParams& parameters);
    
    /**
     * @brief Initialize CUDA resources
     * @return true if initialization was successful, false otherwise
     * @note Override this method to perform custom CUDA initialization.
     * Call the base class implementation if you override this method.
     */
    virtual bool initializeCuda();
    
    /**
     * @brief Clean up CUDA resources
     * @note Override this method to perform custom CUDA cleanup.
     * Call the base class implementation if you override this method.
     */
    virtual void cleanupCuda();
    
    // Individual CUDA kernel declarations
    /**
     * @brief Process data using CUDA kernel: test_kernel
     * @note This method provides a C++ interface to the test_kernel CUDA kernel.
     * The actual CUDA kernel implementation should be provided in a .cu file.
     */
    virtual void test_kernel(const unsigned char* input_image, const float* output_image);

    // User-defined C++ methods
    /**
     * @brief test_method - User-defined C++ method
     * @param input_data Input parameter of type const float*     * @param output_data Output parameter of type const int*     */
    void test_method(
const float* input_data, const int*& output_data    );

private:
    // ROS2 publishers

    // ROS2 subscribers

    // ROS2 services

    // ROS2 action servers

    // ROS2 timers

    // Parameters

    // CUDA members
    //  members
    const unsigned char* input_image_;
    const float* output_image_;

    // Private methods
    void init_parameters();
    void init_publishers();
    void init_subscribers();
    void init_services();
    void init_action_servers();
    void init_timers();
    void init_cuda();
};

} // namespace robodsl

// Register component
#include <rclcpp_components/register_node_macro.hpp>
RCLCPP_COMPONENTS_REGISTER_NODE(::robodsl::TestnodeNode)

#endif // TESTNODE_NODE_HPP
