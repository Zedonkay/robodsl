name: Build Debian Package

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        # Don't use pip cache since we don't have requirements.txt
    
    - name: Install build dependencies
      run: |
        # Save the original Python environment
        echo "ORIGINAL_PYTHONPATH=$PYTHONPATH" >> $GITHUB_ENV
        
        # Install basic build tools
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends \
          build-essential \
          cmake \
          debhelper \
          devscripts \
          dh-python \
          python3-all \
          python3-dev \
          python3-setuptools \
          python3-sphinx \
          python3-sphinx-rtd-theme \
          python3-sphinxcontrib.apidoc \
          software-properties-common
        
        # Add deadsnakes PPA for Python 3.10
        sudo add-apt-repository -y ppa:deadsnakes/ppa
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends \
          python3.10 \
          python3.10-dev \
          python3.10-venv
        
        # Install pip for Python 3.10
        curl -sS https://bootstrap.pypa.io/get-pip.py | python3.10
        
        # Clean up any conflicting Python environment variables
        unset PYTHONPATH
        
        # Set Python 3.10 as the default for this build
        echo "PYTHON=python3.10" >> $GITHUB_ENV
        echo "DEB_PYTHON_DEFAULT=3.10" >> $GITHUB_ENV
    
    - name: Build package
      run: |
        # Clean up Python environment variables that might cause conflicts
        unset PYTHONPATH
        
        # Build the package using the system Python for debhelper
        # but target Python 3.10 for the actual package
        dpkg-buildpackage -us -uc -D -DDEB_PYTHON_INSTALL_LAYOUT=deb_system
        
        # Create dist directory and copy artifacts
        mkdir -p dist
        cp ../*.deb ../*.changes ../*.buildinfo dist/ 2>/dev/null || true
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: debian-artifacts
        path: |
          dist/*.deb
          dist/*.changes
          dist/*.buildinfo
        if-no-files-found: error
        retention-days: 5
    
    - name: Set up APT repository
      if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
      run: |
        mkdir -p apt-repo
        cp dist/*.deb apt-repo/
        cd apt-repo
        dpkg-scanpackages . /dev/null > Packages
        gzip -k -f Packages
        apt-ftparchive release . > Release
        gpg --batch --yes --default-key "packages@robodsl.org" -abs -o Release.gpg Release
        gpg --batch --yes --default-key "packages@robodsl.org" --clearsign -o InRelease Release
    
    - name: Upload APT repository
      if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
      uses: actions/upload-artifact@v4
      with:
        name: apt-repo
        path: apt-repo
        retention-days: 5
