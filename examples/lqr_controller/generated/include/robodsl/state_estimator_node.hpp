// Generated by RoboDSL - DO NOT EDIT
#ifndef ROBODSL_STATE_ESTIMATOR_NODE_HPP_
#define ROBODSL_STATE_ESTIMATOR_NODE_HPP_

#if ENABLE_ROS2
#include "rclcpp/rclcpp.hpp"
#else
// ROS2 stubs for non-ROS2 builds
namespace rclcpp { class Node {}; }
#endif

#include <string>
#include <vector>
#include <map>

// ROS2 message includes
#include "std_msgs/msg/Float32.hpp"
#include "std_msgs/msg/Float32MultiArray.hpp"


class StateEstimator : public rclcpp::Node {
public:
    StateEstimator() : Node("state_estimator") {}
    virtual ~StateEstimator() = default;
    
    // Common interface methods
    void initialize();
    void update();
    void cleanup();

private:
    // ROS2 Publishers
    rclcpp::Publisher<std_msgs/msg/Float32MultiArray>::<class 'type'> estimated_state_pub_;
    
    // ROS2 Subscribers
    void imu_callback(const std_msgs/msg/Float32MultiArray::ConstSharedPtr msg) const;
    void wheel_odometry_callback(const std_msgs/msg/Float32::ConstSharedPtr msg) const;
    
    // ROS2 Services
    // No services defined

    
    // Parameters
    // Parameters
    auto filter_gain_;

    // CUDA Kernels
    // CUDA Kernels
    // CUDA kernel: lqr_cost
    // Add kernel declarations here
};

#endif // ROBODSL_STATE_ESTIMATOR_NODE_HPP_
