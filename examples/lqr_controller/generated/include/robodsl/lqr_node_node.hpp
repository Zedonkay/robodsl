// Generated by RoboDSL - DO NOT EDIT
#ifndef ROBODSL_LQR_NODE_NODE_HPP_
#define ROBODSL_LQR_NODE_NODE_HPP_

#if ENABLE_ROS2
#include "rclcpp/rclcpp.hpp"
#else
// ROS2 stubs for non-ROS2 builds
namespace rclcpp { class Node {}; }
#endif

#include <string>
#include <vector>
#include <map>

#if ENABLE_ROS2
#include "std_msgs/msg/Float32MultiArray.hpp"
#else
// Stub message/service types for non-ROS2 builds
#include <memory>
namespace std_msgs { namespace msg { struct Float32MultiArray "{} using SharedPtr = std::shared_ptr<Float32MultiArray>; using ConstSharedPtr = std::shared_ptr<const Float32MultiArray>; }; }
#endif



class LqrNode : public rclcpp::Node {
public:
    LqrNode() : Node("lqr_node") {}
    virtual ~LqrNode() = default;
    
    // Common interface methods
    void initialize();
    void update();
    void cleanup();

private:
    // ROS2 Publishers
    rclcpp::Publisher<std_msgs/msg/Float32MultiArray>::SharedPtr control_pub_;
    
    // ROS2 Subscribers
    void state_callback(const std_msgs/msg/Float32MultiArray::ConstSharedPtr msg) const;
    void estimated_state_callback(const std_msgs/msg/Float32MultiArray::ConstSharedPtr msg) const;
    
    // ROS2 Services
    // No services defined

    
    // Parameters
    // Parameters
    auto dt_;
    auto q_pos_;
    auto q_angle_;
    auto r_control_;

    // CUDA Kernels
    // CUDA Kernels
    // CUDA kernel: lqr_cost
    // Add kernel declarations here
};

#endif // ROBODSL_LQR_NODE_NODE_HPP_
