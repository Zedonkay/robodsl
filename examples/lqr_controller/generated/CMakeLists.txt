# Generated by RoboDSL - DO NOT EDIT

cmake_minimum_required(VERSION 3.10)
project(robodsl_project VERSION 0.1.0)

# Default to C++17
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Options for optional features
option(ENABLE_ROS2 "Enable ROS2 support" ON)
option(ENABLE_CUDA "Enable CUDA support" ON)

# Find required packages
find_package(Threads REQUIRED)

# Find ROS2 packages if enabled
if(ENABLE_ROS2)
    # Find ament_cmake if not already found
    if(NOT ament_cmake_FOUND)
        find_package(ament_cmake REQUIRED)
    endif()
    
    # Find ROS2 packages
    find_package(rclcpp REQUIRED)
    find_package(rclcpp_components REQUIRED)
    find_package(std_msgs REQUIRED)
    
    # Find message/service dependencies
    # TODO: Add any additional ROS2 message/service dependencies here
    
    # Include directories
    include_directories(
        ${CMAKE_CURRENT_SOURCE_DIR}/include
        ${rclcpp_INCLUDE_DIRS}
        ${rclcpp_components_INCLUDE_DIRS}
    )
    
    # Add compile definitions
    add_compile_definitions(ENABLE_ROS2=1)
else()
    # Include directories for non-ROS2 build
    include_directories(
        ${CMAKE_CURRENT_SOURCE_DIR}/include
    )
    
    # Add compile definitions
    add_compile_definitions(ENABLE_ROS2=0)
    
    # Add stubs for ROS2 types if needed
    # TODO: Add any necessary stubs for ROS2 types
endif()

# Handle CUDA if enabled
if(ENABLE_CUDA)
    enable_language(CUDA)
    
    # Set CUDA architecture
    set(CUDA_ARCHITECTURES "native")
    
    # CUDA compile options
    set(CUDA_NVCC_FLAGS "${CUDA_NVCC_FLAGS} -std=c++17 --expt-relaxed-constexpr")
    
    # Find CUDA
    find_package(CUDA REQUIRED)
    
    # Include CUDA directories
    include_directories(
        ${CUDA_INCLUDE_DIRS}
    )
    
    # Add CUDA compile definitions
    add_compile_definitions(WITH_CUDA=1)
    
    # Find Thrust if needed
    if(EXISTS "${CMAKE_CUDA_TOOLKIT_INCLUDE_DIRECTORIES}/thrust")
        add_compile_definitions(WITH_THRUST=1)
    else()
        add_compile_definitions(WITH_THRUST=0)
    endif()
else()
    # Add stubs for CUDA if needed
    add_compile_definitions(WITH_CUDA=0)
    add_compile_definitions(WITH_THRUST=0)
    
    # TODO: Add any necessary stubs for CUDA types/functions
endif()

# Add library
add_library(${PROJECT_NAME}_lib
    # Add source files here
    # src/example.cpp
)

target_link_libraries(${PROJECT_NAME}_lib
    ${CMAKE_THREAD_LIBS_INIT}
)

if(ENABLE_ROS2)
    ament_target_dependencies(${PROJECT_NAME}_lib
        rclcpp
        rclcpp_components
        std_msgs
        # Add other ROS2 dependencies here
    )
endif()

# Add CUDA kernel library if needed
if(ENABLE_CUDA AND ENABLE_CUDA_SUPPORT AND TARGET cuda_kernels)
    add_dependencies(${PROJECT_NAME}_lib cuda_kernels)
    target_link_libraries(${PROJECT_NAME}_lib cuda_kernels)
endif()

# Add executables for each node

# lqr_node node
target_sources(${PROJECT_NAME}_lib PRIVATE
    src/lqr_node_node.cpp
)

# Add include directory for this node
target_include_directories(${PROJECT_NAME}_lib PRIVATE
    ${CMAKE_CURRENT_SOURCE_DIR}/include/robodsl
)

# Create executable
add_executable(lqr_node_node src/lqr_node_node.cpp)
target_link_libraries(lqr_node_node ${PROJECT_NAME}_lib)

# Install targets
install(TARGETS lqr_node_node
    RUNTIME DESTINATION lib/${PROJECT_NAME}
    LIBRARY DESTINATION lib/${PROJECT_NAME}
    ARCHIVE DESTINATION lib/${PROJECT_NAME}
)
# state_estimator node
target_sources(${PROJECT_NAME}_lib PRIVATE
    src/state_estimator_node.cpp
)

# Add include directory for this node
target_include_directories(${PROJECT_NAME}_lib PRIVATE
    ${CMAKE_CURRENT_SOURCE_DIR}/include/robodsl
)

# Create executable
add_executable(state_estimator_node src/state_estimator_node.cpp)
target_link_libraries(state_estimator_node ${PROJECT_NAME}_lib)

# Install targets
install(TARGETS state_estimator_node
    RUNTIME DESTINATION lib/${PROJECT_NAME}
    LIBRARY DESTINATION lib/${PROJECT_NAME}
    ARCHIVE DESTINATION lib/${PROJECT_NAME}
)
# Install Python modules for the package
install(DIRECTORY
    launch
    DESTINATION share/${PROJECT_NAME}/
)

# Export dependencies
if(ENABLE_ROS2)
    ament_export_dependencies(
        rclcpp
        rclcpp_components
        std_msgs
        # Add other ROS2 dependencies here
    )
    
    ament_export_include_directories(include)
    ament_export_libraries(${PROJECT_NAME}_lib)
    
    ament_package()
endif()
