// Generated by RoboDSL - DO NOT EDIT

#ifndef NAVIGATION_NODE_NODE_HPP
#define NAVIGATION_NODE_NODE_HPP

// Standard includes
#include <memory>
#include <string>
#include <vector>
#include <map>
#include <cmath>
#include <functional>
#include <thread>
#include <atomic>

// ROS2 includes
#include <rclcpp/rclcpp.hpp>

// Message includes
#include <geometry_msgs/msg/pose_stamped.hpp>
#include <geometry_msgs/msg/twist.hpp>
#include <nav_msgs/msg/path.hpp>

// Additional ROS2 includes

// CUDA includes (if needed)

// OpenCV includes (if needed)

// Type definitions
#ifndef __UCHAR_TYPE__
typedef unsigned char uchar;
#endif

// Forward declarations for custom types

// CUDA parameter structs

namespace navigation {

class Navigation_nodeNode : public rclcpp::Node {
public:
    explicit Navigation_nodeNode(const rclcpp::NodeOptions& options = rclcpp::NodeOptions());
    virtual ~Navigation_nodeNode();


    // Timer callbacks
    void on_navigation_timer();

    // Subscriber callbacks
    void on_goal_pose(const geometry_msgs::msg::PoseStamped::ConstSharedPtr msg);

    // Service callbacks



    // User-defined C++ methods

private:
    // Publishers
    std::shared_ptr<rclcpp::Publisher<geometry_msgs::msg::Twist>> cmd_vel_pub_;
    std::shared_ptr<rclcpp::Publisher<nav_msgs::msg::Path>> path_pub_;

    // Subscribers
    rclcpp::Subscription<geometry_msgs::msg::PoseStamped>::SharedPtr goal_pose_sub_;

    // Services


    // Timers
    rclcpp::TimerBase::SharedPtr navigation_timer_timer_;

    // Lifecycle state tracking

    
    // Processing control
    bool enable_processing_{true};

    // Parameters
    // Parameter max_velocity of type float not supported in member variables
    // Parameter goal_tolerance of type float not supported in member variables
    bool enable_obstacle_avoidance_;

    // Latest message storage

    // CUDA kernel member variables

    // Helper methods
    void init_parameters();
    void init_publishers();
    void init_subscribers();
    void init_services();
    void init_timers();
};

} // namespace navigation

#endif // NAVIGATION_NODE_NODE_HPP
