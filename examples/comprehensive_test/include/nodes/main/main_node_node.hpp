// Generated by RoboDSL - DO NOT EDIT

#ifndef MAIN_NODE_NODE_HPP
#define MAIN_NODE_NODE_HPP

// Standard includes
#include <memory>
#include <string>
#include <vector>
#include <map>
#include <cmath>
#include <functional>
#include <thread>
#include <atomic>

// ROS2 includes
#include <rclcpp/rclcpp.hpp>
#include <rclcpp_lifecycle/lifecycle_node.hpp>
#include <rclcpp_lifecycle/lifecycle_publisher.hpp>
#include <rclcpp_lifecycle/node_interfaces/lifecycle_node_interface.hpp>
#include <rclcpp/rclcpp.hpp>

// Message includes
#include <geometry_msgs/msg/pose_stamped.hpp>
#include <sensor_msgs/msg/image.hpp>
#include <std_msgs/msg/string.hpp>
#include <std_srvs/srv/set_bool.hpp>

// Additional ROS2 includes
#include <rclcpp/rclcpp.hpp>

// CUDA includes (if needed)

// OpenCV includes (if needed)

// Type definitions
#ifndef __UCHAR_TYPE__
typedef unsigned char uchar;
#endif

// Forward declarations for custom types

// CUDA parameter structs

namespace robot {

class Main_nodeNode : public rclcpp_lifecycle::LifecycleNode {
public:
    explicit Main_nodeNode(const rclcpp::NodeOptions& options = rclcpp::NodeOptions());
    virtual ~Main_nodeNode();

    // Lifecycle callbacks
    rclcpp_lifecycle::node_interfaces::LifecycleNodeInterface::CallbackReturn 
    on_configure(const rclcpp_lifecycle::State& previous_state) override;
    
    rclcpp_lifecycle::node_interfaces::LifecycleNodeInterface::CallbackReturn 
    on_activate(const rclcpp_lifecycle::State& previous_state) override;
    
    rclcpp_lifecycle::node_interfaces::LifecycleNodeInterface::CallbackReturn 
    on_deactivate(const rclcpp_lifecycle::State& previous_state) override;
    
    rclcpp_lifecycle::node_interfaces::LifecycleNodeInterface::CallbackReturn 
    on_cleanup(const rclcpp_lifecycle::State& previous_state) override;
    
    rclcpp_lifecycle::node_interfaces::LifecycleNodeInterface::CallbackReturn 
    on_shutdown(const rclcpp_lifecycle::State& previous_state) override;

    // Timer callbacks
    void on_main_timer();
    void on_processing_timer();

    // Subscriber callbacks
    void on_image_raw(const sensor_msgs::msg::Image::ConstSharedPtr msg);
    void on_goal_pose(const geometry_msgs::msg::PoseStamped::ConstSharedPtr msg);

    // Service callbacks
    void on_process_image(
        const std::shared_ptr<std_srvs::srv::SetBool::Request> request,
        std::shared_ptr<std_srvs::srv::SetBool::Response> response);



    // User-defined C++ methods

private:
    // Publishers
    std::shared_ptr<rclcpp_lifecycle::LifecyclePublisher<std_msgs::msg::String>> chatter_pub_;
    std::shared_ptr<rclcpp_lifecycle::LifecyclePublisher<sensor_msgs::msg::Image>> image_processed_pub_;
    std::shared_ptr<rclcpp_lifecycle::LifecyclePublisher<std_msgs::msg::String>> detections_pub_;

    // Subscribers
    rclcpp::Subscription<sensor_msgs::msg::Image>::SharedPtr image_raw_sub_;
    rclcpp::Subscription<geometry_msgs::msg::PoseStamped>::SharedPtr goal_pose_sub_;

    // Services
    rclcpp::Service<std_srvs::srv::SetBool>::SharedPtr process_image_srv_;


    // Timers
    rclcpp::TimerBase::SharedPtr main_timer_timer_;
    rclcpp::TimerBase::SharedPtr processing_timer_timer_;

    // Lifecycle state tracking
    std::atomic<bool> is_active_{false};
    bool main_timer_was_active_{false};
    bool processing_timer_was_active_{false};

    
    // Processing control
    bool enable_processing_{true};

    // Parameters
    int count_;
    double rate_;
    // Parameter name of type string not supported in member variables
    bool enabled_;
    // Parameter array_coords of type list not supported in member variables
    // Parameter dict_config of type dict not supported in member variables

    // Latest message storage
    sensor_msgs::msg::Image::ConstSharedPtr latest_image_;

    // CUDA kernel member variables

    // Helper methods
    void init_parameters();
    void init_publishers();
    void init_subscribers();
    void init_services();
    void init_timers();
};

} // namespace robot

#endif // MAIN_NODE_NODE_HPP
