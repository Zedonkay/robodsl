// Generated by RoboDSL - DO NOT EDIT

#ifndef ROBOT_CPP_NODE_NODE_HPP
#define ROBOT_CPP_NODE_NODE_HPP

// Standard includes
#include <memory>
#include <string>
#include <vector>

// ROS2 includes
#include <rclcpp/rclcpp.hpp>
#include <rclcpp_lifecycle/lifecycle_node.hpp>
#include <rclcpp_lifecycle/lifecycle_publisher.hpp>
#include <rclcpp_lifecycle/lifecycle_node_interface.hpp>
#include <rclcpp_components/register_node_macro.hpp>

// Message includes
#include <std_msgs/msg/String.hpp>


// Global C++ code blocks (passed through as-is)

    // Additional C++ code that gets included in the generated files
    namespace robot_utils {
        // Utility functions
        template<typename T>
        T clamp(T value, T min, T max) {
            return std::max(min, std::min(max, value));
        }
        
        double radians_to_degrees(double radians) {
            return radians * 180.0 / M_PI;
        }
        
        double degrees_to_radians(double degrees) {
            return degrees * M_PI / 180.0;
        }
    }


namespace robodsl {


class Robot_cpp_nodeNode : public rclcpp::Node {
public:
    // Referenced global CUDA kernels
    explicit Robot_cpp_nodeNode(const rclcpp::NodeOptions& options = rclcpp::NodeOptions());
    ~Robot_cpp_nodeNode() override;

    // Lifecycle node interface

    // Timer callbacks

    // Subscriber callbacks
    void on_cpp_input(const std_msgs::msg::String::ConstSharedPtr msg);

    // Service callbacks

    // Action server callbacks

    // CUDA kernels

    // User-defined C++ methods

    // Raw C++ code blocks (passed through as-is)

private:
    // ROS2 publishers
    rclcpp::Publisher<std_msgs::msg::String>::SharedPtr cpp_topic_pub_;

    // ROS2 subscribers
    rclcpp::Subscription<std_msgs::msg::String>::SharedPtr cpp_input_sub_;

    // ROS2 services

    // ROS2 action servers

    // ROS2 timers

    // Parameters
    int cpp_param_;

    // CUDA members

    // Private methods
    void init_parameters();
    void init_publishers();
    void init_subscribers();
    void init_services();
    void init_action_servers();
    void init_timers();
    void init_cuda();
};

} // namespace robodsl

// Register component
#include <rclcpp_components/register_node_macro.hpp>
RCLCPP_COMPONENTS_REGISTER_NODE(::robodsl::Robot_cpp_nodeNode)

#endif // ROBOT_CPP_NODE_NODE_HPP
