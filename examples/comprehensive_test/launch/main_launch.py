#!/usr/bin/env python3
"""
Launch all nodes from RoboDSL specification

This file was auto-generated by RoboDSL.
"""

from launch import LaunchDescription
from launch_ros.actions import Node
from launch.actions import DeclareLaunchArgument
from launch.substitutions import LaunchConfiguration

def generate_launch_description():
    # Declare launch arguments
    launch_arguments = [
        DeclareLaunchArgument(
            'use_sim_time',
            default_value='false',
            description='Use simulation time'
        ),
        DeclareLaunchArgument(
            'log_level',
            default_value='info',
            description='Log level for all nodes'
        ),
    ]
    
    # Create nodes
    nodes = []
    # main_node node
    main_node_node = Node(
        package='robodsl_package',
        executable='main_node_node',
        name='main_node_node',
        namespace='/main_node',
        output='screen',
        parameters=[
            {'count': null},
            {'rate': 10.0},
            {'name': robot},
            {'enabled': True},
            {'array_coords': [1.0, 2.0, 3.0]},
            {'dict_config': {'max_iterations': 100, 'timeout': 5.0, 'enabled': True}},
            {'use_sim_time': LaunchConfiguration('use_sim_time')},
        ],
        arguments=['--ros-args', '--log-level', LaunchConfiguration('log_level')],
    )
    nodes.append(main_node_node)
    # perception_node node
    perception_node_node = Node(
        package='robodsl_package',
        executable='perception_node_node',
        name='perception_node_node',
        namespace='/perception_node',
        output='screen',
        parameters=[
            {'enable_gpu': True},
            {'confidence_threshold': 0.5},
            {'model_path': models/detection.onnx},
            {'use_sim_time': LaunchConfiguration('use_sim_time')},
        ],
        arguments=['--ros-args', '--log-level', LaunchConfiguration('log_level')],
    )
    nodes.append(perception_node_node)
    # navigation_node node
    navigation_node_node = Node(
        package='robodsl_package',
        executable='navigation_node_node',
        name='navigation_node_node',
        namespace='/navigation_node',
        output='screen',
        parameters=[
            {'max_velocity': 2.0},
            {'goal_tolerance': 0.1},
            {'enable_obstacle_avoidance': True},
            {'use_sim_time': LaunchConfiguration('use_sim_time')},
        ],
        arguments=['--ros-args', '--log-level', LaunchConfiguration('log_level')],
    )
    nodes.append(navigation_node_node)
    # safety_node node
    safety_node_node = Node(
        package='robodsl_package',
        executable='safety_node_node',
        name='safety_node_node',
        namespace='/safety_node',
        output='screen',
        parameters=[
            {'max_acceleration': 2.0},
            {'emergency_stop_distance': 0.5},
            {'enable_emergency_stop': True},
            {'use_sim_time': LaunchConfiguration('use_sim_time')},
        ],
        arguments=['--ros-args', '--log-level', LaunchConfiguration('log_level')],
    )
    nodes.append(safety_node_node)
    # robot_cpp_node node
    robot_cpp_node_node = Node(
        package='robodsl_package',
        executable='robot_cpp_node_node',
        name='robot_cpp_node_node',
        namespace='/robot_cpp_node',
        output='screen',
        parameters=[
            {'cpp_param': 42},
            {'use_sim_time': LaunchConfiguration('use_sim_time')},
        ],
        arguments=['--ros-args', '--log-level', LaunchConfiguration('log_level')],
    )
    nodes.append(robot_cpp_node_node)

    return LaunchDescription(launch_arguments + nodes) 