// Generated by RoboDSL - DO NOT EDIT

#include "nodes/robot_cpp_node_node.hpp"
#include <memory>
#include <vector>
#include <map>
#include <cmath>
#include <stdexcept>


namespace robot_cpp {

Robot_cpp_nodeNode::Robot_cpp_nodeNode(const rclcpp::NodeOptions& options)
: rclcpp::Node("robot_cpp_node", options)
{
    // Initialize parameters
    this->declare_parameter<int>("cpp_param", 42);

    // Create publishers
    {
        rclcpp::QoS qos(10);
        cpp_topic_pub_ = this->create_publisher<std_msgs::msg::String>(
            "/cpp_topic", qos);
    }

    // Create subscribers
    {
        rclcpp::QoS qos(10);
        auto callback = std::bind(
            &Robot_cpp_nodeNode::on_cpp_input, 
            this, 
            std::placeholders::_1
        );
        cpp_input_sub_ = this->create_subscription<std_msgs::msg::String>(
            "/cpp_input", 
            qos, 
            callback
        );
    }

    // Create services
    

    // Create timers

}

Robot_cpp_nodeNode::~Robot_cpp_nodeNode()
{
}


// Timer callbacks

// Subscriber callbacks
void Robot_cpp_nodeNode::on_cpp_input(const std_msgs::msg::String::ConstSharedPtr msg)
{
    
    RCLCPP_DEBUG(this->get_logger(), "Received message on /cpp_input");
}

// Service callbacks



// User-defined C++ methods

} // namespace robot_cpp

int main(int argc, char* argv[])
{
    rclcpp::init(argc, argv);
    auto node = std::make_shared<robot_cpp::Robot_cpp_nodeNode>();
    rclcpp::spin(node);
    rclcpp::shutdown();
    return 0;
}
