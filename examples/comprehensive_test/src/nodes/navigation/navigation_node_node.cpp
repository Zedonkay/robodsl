// Generated by RoboDSL - DO NOT EDIT

#include "nodes/navigation/navigation_node_node.hpp"
#include <memory>
#include <vector>
#include <map>
#include <cmath>
#include <stdexcept>


namespace navigation {

Navigation_nodeNode::Navigation_nodeNode(const rclcpp::NodeOptions& options)
: rclcpp::Node("navigation_node", options)
{
    // Initialize parameters
    this->declare_parameter<std::string>("max_velocity", "2.0");
    this->declare_parameter<std::string>("goal_tolerance", "0.1");
    this->declare_parameter<bool>("enable_obstacle_avoidance", true);

    // Create publishers
    {
        rclcpp::QoS qos(10);
        cmd_vel_pub_ = this->create_publisher<geometry_msgs::msg::Twist>(
            "/cmd_vel", qos);
    }
    {
        rclcpp::QoS qos(10);
        path_pub_ = this->create_publisher<nav_msgs::msg::Path>(
            "/path", qos);
    }

    // Create subscribers
    {
        rclcpp::QoS qos(10);
        auto callback = std::bind(
            &Navigation_nodeNode::on_goal_pose, 
            this, 
            std::placeholders::_1
        );
        goal_pose_sub_ = this->create_subscription<geometry_msgs::msg::PoseStamped>(
            "/goal_pose", 
            qos, 
            callback
        );
    }

    // Create services
    

    // Create timers
    navigation_timer_timer_ = this->create_wall_timer(
        std::chrono::duration<double>(0.1),
        std::bind(&Navigation_nodeNode::on_navigation_timer, this)
    );

}

Navigation_nodeNode::~Navigation_nodeNode()
{
}


// Timer callbacks
void Navigation_nodeNode::on_navigation_timer()
{
    RCLCPP_DEBUG(this->get_logger(), "Timer navigation_timer triggered");
    
    // Custom timer implementation
    RCLCPP_DEBUG(this->get_logger(), "Custom timer navigation_timer executed");
}

// Subscriber callbacks
void Navigation_nodeNode::on_goal_pose(const geometry_msgs::msg::PoseStamped::ConstSharedPtr msg)
{
    
    RCLCPP_DEBUG(this->get_logger(), "Received message on /goal_pose");
}

// Service callbacks



// User-defined C++ methods

} // namespace navigation

int main(int argc, char* argv[])
{
    rclcpp::init(argc, argv);
    auto node = std::make_shared<navigation::Navigation_nodeNode>();
    rclcpp::spin(node);
    rclcpp::shutdown();
    return 0;
}
