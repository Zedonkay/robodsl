#!/usr/bin/env python3
# Generated by RoboDSL - DO NOT EDIT

import rclpy
from rclpy.node import Node
from rclpy.qos import QoSPresetProfiles, QoSProfile
std_msgs/msg/String

class Main_nodeNode(Node):
    """"""
    
    def __init__(self, node_name: str, **kwargs):
        """Initialize the node."""
        super().__init__(node_name, **kwargs)
        
        # Parameters
        self.declare_parameters(
            namespace='',
            parameters=[
                ('count', 0),  # 
                ('rate', 10.0),  # 
                ('name', robot),  # 
                ('enabled', True),  # 
            ]
        )
        
        # Get parameters
        self.count = self.get_parameter('count').value
        self.rate = self.get_parameter('rate').value
        self.name = self.get_parameter('name').value
        self.enabled = self.get_parameter('enabled').value
        
        # Publishers
        self.chatter_pub = self.create_publisher(
            std_msgs/msg/String,
            '/chatter',
            qos_profile=QoSPresetProfiles.SYSTEM_DEFAULT.value
        )
        
        # Subscribers
        self.chatter_sub = self.create_subscription(
            std_msgs/msg/String,
            '/chatter',
            self.on_chatter,
            qos_profile=QoSPresetProfiles.SENSOR_DATA.value
        )
        
        # Services
        
        # Timers
        self.timer = self.create_timer(
            1.0,  # seconds
            self.on_main_timer
        )
    
    
    # Timer callbacks
    def on_main_timer(self):
        """Timer callback for main_timer."""
        self.get_logger().debug('Timer main_timer triggered')
    
    
    # Subscriber callbacks
    def on_chatter(self, msg):
        """Callback for /chatter subscriber."""
        self.get_logger().debug(f'Received message on /chatter: {msg}')
    
    
    # Service callbacks


def main(args=None):
    """Run the node."""
    rclpy.init(args=args)
    
    try:
        node = Main_nodeNode('main_node_node')
        
        
        rclpy.spin(node)
    except KeyboardInterrupt:
        pass
    finally:
        node.destroy_node()
        rclpy.shutdown()


if __name__ == '__main__':
    main()
