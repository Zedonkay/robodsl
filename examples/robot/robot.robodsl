// robot RoboDSL Configuration

// Project configuration
project_name: robot

// Global includes (will be added to all nodes)
include <rclcpp/rclcpp.hpp>
include <std_msgs/msg/string.hpp>
include <sensor_msgs/msg/image.hpp>

// Main node configuration
node main_node {
    // Node namespace
    namespace: /robot
    // Parameters
    parameter int count = 0
    parameter double rate = 10.0
    parameter string name = "robot"
    parameter bool enabled = true
    
    // Publisher
    publisher /chatter: "std_msgs/msg/String" {
        qos {
            reliability: 1
            history: 1
            depth: 10
        }
        queue_size: 10
    }
    
    // Subscriber
    subscriber /chatter: "std_msgs/msg/String" {
        qos {
            reliability: 0
            history: 1
            depth: 10
        }
        queue_size: 10
    }
    
    // Timer
    timer main_timer: 1.0 {
        callback: on_timer_callback
    }
    
    // C++ method for timer callback
    method on_timer_callback {
        input: rclcpp::Time current_time
        code {
            auto message = std_msgs::msg::String();
            message.data = "Hello from robot!";
            chatter_pub_->publish(message);
        }
    }
    
    // C++ method for message callback
    method on_message_received {
        input: const std_msgs::msg::String::SharedPtr msg
        code {
            RCLCPP_INFO(this->get_logger(), "Received: %s", msg->data.c_str());
        }
    }
}

// CUDA Kernels section (optional)
cuda_kernels {
    // Example vector addition kernel
    kernel vector_add {
        input: float* a, float* b, int size
        output: float* c
        
        block_size: (256, 1, 1)
        
        include <cuda_runtime.h>
        include <device_launch_parameters.h>
        
        code {
            __global__ void vector_add_kernel(const float* a, const float* b, float* c, int size) {
                int i = blockIdx.x * blockDim.x + threadIdx.x;
                if (i < size) {
                    c[i] = a[i] + b[i];
                }
            }
        }
    }
}
