// Generated by RoboDSL - DO NOT EDIT

#ifndef MAIN_NODE_NODE_HPP
#define MAIN_NODE_NODE_HPP

// Standard includes
#include <memory>
#include <string>
#include <vector>

// ROS2 includes
#include <rclcpp/rclcpp.hpp>
#include <rclcpp_lifecycle/lifecycle_node.hpp>
#include <rclcpp_lifecycle/lifecycle_publisher.hpp>
#include <rclcpp_lifecycle/lifecycle_node_interface.hpp>
#include <rclcpp_components/register_node_macro.hpp>

// Message includes
#include <std_msgs/msg/String.hpp>



namespace robodsl {


class Main_nodeNode : public rclcpp::Node {
public:
    // Referenced global CUDA kernels
    explicit Main_nodeNode(const rclcpp::NodeOptions& options = rclcpp::NodeOptions());
    ~Main_nodeNode() override;

    // Lifecycle node interface

    // Timer callbacks
    void on_main_timer();

    // Subscriber callbacks
    void on_chatter(const std_msgs::msg::String::ConstSharedPtr msg);

    // Service callbacks

    // Action server callbacks

    // CUDA kernels

    // User-defined C++ methods
    /**
     * @brief on_timer_callback - User-defined C++ method
     * @param current_time Input parameter of type rclcpp::Time     */
    void on_timer_callback(
rclcpp::Time current_time    );
    /**
     * @brief on_message_received - User-defined C++ method
     * @param msg Input parameter of type const std_msgs::msg::String::SharedPtr     */
    void on_message_received(
const std_msgs::msg::String::SharedPtr msg    );

    // Raw C++ code blocks (passed through as-is)

private:
    // ROS2 publishers
    rclcpp::Publisher<std_msgs::msg::String>::SharedPtr chatter_pub_;

    // ROS2 subscribers
    rclcpp::Subscription<std_msgs::msg::String>::SharedPtr chatter_sub_;

    // ROS2 services

    // ROS2 action servers

    // ROS2 timers
    rclcpp::TimerBase::SharedPtr main_timer_timer_;

    // Parameters
    int count_;
    double rate_;
    string name_;
    bool enabled_;

    // CUDA members

    // Private methods
    void init_parameters();
    void init_publishers();
    void init_subscribers();
    void init_services();
    void init_action_servers();
    void init_timers();
    void init_cuda();
};

} // namespace robodsl

// Register component
#include <rclcpp_components/register_node_macro.hpp>
RCLCPP_COMPONENTS_REGISTER_NODE(::robodsl::Main_nodeNode)

#endif // MAIN_NODE_NODE_HPP
