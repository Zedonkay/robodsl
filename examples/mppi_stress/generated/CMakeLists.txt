# Generated by RoboDSL - DO NOT EDIT
cmake_minimum_required(VERSION 3.8)
# Optional CUDA compilation
option(ENABLE_CUDA "Build with CUDA support" OFF)

project(robodsl_project LANGUAGES CXX)

# Enable CUDA language only if requested and available
if(ENABLE_CUDA)
  enable_language(CUDA)
endif()

# Set C++ standard
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CUDA_STANDARD 17)
set(CMAKE_CUDA_STANDARD_REQUIRED ON)

# ROS2 support (optional)
option(ENABLE_ROS2 "Build with ROS2 (rclcpp)" OFF)
if(ENABLE_ROS2)
  find_package(ament_cmake REQUIRED)
  find_package(rclcpp REQUIRED)
  find_package(rclcpp_components REQUIRED)
endif()

# Set include directories
include_directories(
  include
  ${CMAKE_CURRENT_SOURCE_DIR}/include
)

# Add CUDA specific flags
set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -std=c++17 --expt-relaxed-constexpr")

# Add library for CUDA kernels
if(ENABLE_CUDA)
  add_library(cuda_kernels
    src/cuda/cuda_kernels.cu
  )
  target_include_directories(cuda_kernels PUBLIC
    ${CMAKE_CURRENT_SOURCE_DIR}/include
  )
  target_link_libraries(cuda_kernels
    CUDA::cudart
    CUDA::cuda_driver
  )
else()
  # Stub interface library when CUDA is disabled
  add_library(cuda_kernels INTERFACE)
endif()

# Add node executables
if(ENABLE_ROS2)

# mppi_node node
add_executable(mppi_node_node
  src/mppi_node_node.cpp
)
target_include_directories(mppi_node_node PUBLIC
  ${CMAKE_CURRENT_SOURCE_DIR}/include
)
target_link_libraries(mppi_node_node
  rclcpp::rclcpp
  rclcpp_components::component
  cuda_kernels
)

# state_estimator node
add_executable(state_estimator_node
  src/state_estimator_node.cpp
)
target_include_directories(state_estimator_node PUBLIC
  ${CMAKE_CURRENT_SOURCE_DIR}/include
)
target_link_libraries(state_estimator_node
  rclcpp::rclcpp
  rclcpp_components::component
  cuda_kernels
)

# Install include files
install(
  DIRECTORY include/
  DESTINATION include/
)

# Install launch files
install(
  DIRECTORY launch/
  DESTINATION share/${PROJECT_NAME}/launch
)

# Install config files
install(
  DIRECTORY config/
  DESTINATION share/${PROJECT_NAME}/config
)

endif() # ENABLE_ROS2

if(ENABLE_ROS2)
  # Export dependencies
  ament_export_dependencies(ament_cmake rclcpp rclcpp_components)

  # Export includes
  ament_export_include_directories(include)

  # Export libraries
  ament_export_libraries(cuda_kernels)

  # Generate package configuration
  ament_package()
endif()
