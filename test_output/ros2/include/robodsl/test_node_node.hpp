// Generated by RoboDSL - DO NOT EDIT
#ifndef ROBODSL_TEST_NODE_NODE_HPP_
#define ROBODSL_TEST_NODE_NODE_HPP_

#if ENABLE_ROS2
#include "rclcpp/rclcpp.hpp"
#else
// ROS2 stubs for non-ROS2 builds
namespace rclcpp { class Node {}; }
#endif

#include <string>
#include <vector>
#include <map>

// ROS2 message includes
#include "example_interfaces/srv/AddTwoInts.hpp"
#include "sensor_msgs/msg/Image.hpp"
#include "std_msgs/msg/Float32MultiArray.hpp"
#include "std_msgs/msg/String.hpp"


class TestNode : public rclcpp::Node {
public:
    TestNode() : Node("test_node") {}
    virtual ~TestNode() = default;
    
    // Common interface methods
    void initialize();
    void update();
    void cleanup();

private:
    // ROS2 Publishers
    rclcpp::Publisher<std_msgs::msg::Float32MultiArray>::<class 'type'> test_topic_pub_;
    rclcpp::Publisher<std_msgs::msg::String>::<class 'type'> test_topic2_pub_;
    
    // ROS2 Subscribers
    void test_sub_callback(const sensor_msgs::msg::Image::ConstSharedPtr msg) const;
    
    // ROS2 Services
    void test_service_callback(const std::shared_ptr<example_interfaces::srv::AddTwoInts::Request> request, std::shared_ptr<example_interfaces::srv::AddTwoInts::Response> response);
    
    // Parameters
    // Parameters
    int param1_;
    std::string param2_;

    // CUDA Kernels
    // No CUDA kernels defined

};

#endif // ROBODSL_TEST_NODE_NODE_HPP_
