// Generated by RoboDSL - DO NOT EDIT

#ifndef ROBODSL_TEST_NODE_NODE_HPP_
#define ROBODSL_TEST_NODE_NODE_HPP_

// Standard includes
#include <memory>
#include <string>
#include <vector>

// ROS2 includes
#include <rclcpp/rclcpp.hpp>
#include <rclcpp_lifecycle/lifecycle_node.hpp>
#include <rclcpp_lifecycle/lifecycle_publisher.hpp>
#include <rclcpp_lifecycle/lifecycle_node_interface.hpp>
#include <rclcpp_components/register_node_macro.hpp>

// Message includes
#include <memory>
#include <string>
#include <vector>
#include <rclcpp/rclcpp.hpp>
#include <rclcpp_lifecycle/lifecycle_node.hpp>
#include <rclcpp_lifecycle/lifecycle_publisher.hpp>
#include <std_msgs/msg/string.hpp>
#if ENABLE_ROS2
#include "example_interfaces/srv/AddTwoInts.hpp"
#include "sensor_msgs/msg/Image.hpp"
#include "std_msgs/msg/Float32MultiArray.hpp"
#include "std_msgs/msg/String.hpp"
#else
// Stub message/service types for non-ROS2 builds
#include <memory>
namespace example_interfaces {
  namespace srv {
    struct AddTwoInts {
      struct Request {
        using SharedPtr = std::shared_ptr<Request>;
      };
      struct Response {
        using SharedPtr = std::shared_ptr<Response>;
      };
      using Request = Request;
      using Response = Response;
    };
  }
}
namespace sensor_msgs {
  namespace msg {
    struct Image {
      using SharedPtr = std::shared_ptr<Image>;
      using ConstSharedPtr = std::shared_ptr<const Image>;
    };
  }
}
namespace std_msgs {
  namespace msg {
    struct Float32MultiArray {
      using SharedPtr = std::shared_ptr<Float32MultiArray>;
      using ConstSharedPtr = std::shared_ptr<const Float32MultiArray>;
    };
  }
}
namespace std_msgs {
  namespace msg {
    struct String {
      using SharedPtr = std::shared_ptr<String>;
      using ConstSharedPtr = std::shared_ptr<const String>;
    };
  }
}
#endif


// Additional ROS2 includes
#include <rclcpp/service.hpp>
#include <rclcpp/parameter.hpp>



class TestNode : public rclcpp_lifecycle::LifecycleNode {
public:
    explicit TestNode(const rclcpp::NodeOptions& options = rclcpp::NodeOptions());
    ~TestNode() override;

    // Lifecycle node interface
    rclcpp_lifecycle::node_interfaces::LifecycleNodeInterface::CallbackReturn 
    on_configure(const rclcpp_lifecycle::State& previous_state) override;
    
    rclcpp_lifecycle::node_interfaces::LifecycleNodeInterface::CallbackReturn 
    on_activate(const rclcpp_lifecycle::State& previous_state) override;
    
    rclcpp_lifecycle::node_interfaces::LifecycleNodeInterface::CallbackReturn 
    on_deactivate(const rclcpp_lifecycle::State& previous_state) override;
    
    rclcpp_lifecycle::node_interfaces::LifecycleNodeInterface::CallbackReturn 
    on_cleanup(const rclcpp_lifecycle::State& previous_state) override;
    
    rclcpp_lifecycle::node_interfaces::LifecycleNodeInterface::CallbackReturn 
    on_shutdown(const rclcpp_lifecycle::State& previous_state) override;
    
    rclcpp_lifecycle::node_interfaces::LifecycleNodeInterface::CallbackReturn 
    on_error(const rclcpp_lifecycle::State& previous_state) override;

    // Timer callbacks

    // Subscriber callbacks
    void test_sub_callback(const sensor_msgs::msg::Image::ConstSharedPtr msg);

    // Service callbacks
    void test_service_callback(
        const std::shared_ptr<example_interfaces::srv::AddTwoInts::Request> request,
        std::shared_ptr<example_interfaces::srv::AddTwoInts::Response> response);

    // Action server callbacks

    // CUDA kernels

private:
    // ROS2 publishers
    std::shared_ptr<rclcpp_lifecycle::LifecyclePublisher<std_msgs::msg::Float32MultiArray>> test_topic_pub_;
    std::shared_ptr<rclcpp_lifecycle::LifecyclePublisher<std_msgs::msg::String>> test_topic2_pub_;

    // ROS2 subscribers
    rclcpp::Subscription<sensor_msgs::msg::Image>::SharedPtr test_sub_sub_;

    // ROS2 services
    rclcpp::Service<example_interfaces::srv::AddTwoInts>::SharedPtr test_service_srv_;

    // ROS2 action servers

    // ROS2 timers

    // Parameters
    int param1_;
    std::string param2_;

    // CUDA members

    // Private methods
    void init_parameters();
    void init_publishers();
    void init_subscribers();
    void init_services();
    void init_action_servers();
    void init_timers();
    void init_cuda();
};


// Register component
#include <rclcpp_components/register_node_macro.hpp>
RCLCPP_COMPONENTS_REGISTER_NODE(TestNode)

#endif // ROBODSL_TEST_NODE_NODE_HPP_
